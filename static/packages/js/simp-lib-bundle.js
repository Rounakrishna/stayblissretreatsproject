/*!
 * jQuery JavaScript Library v1.12.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-01-08T19:56Z
 */

(function(global, factory) {

    if (typeof module === "object" && typeof module.exports === "object") {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ?
            factory(global, true) :
            function(w) {
                if (!w.document) {
                    throw new Error("jQuery requires a window with a document");
                }
                return factory(w);
            };
    } else {
        factory(global);
    }

    // Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function(window, noGlobal) {

    // Support: Firefox 18+
    // Can't be in strict mode, several libs including ASP.NET trace
    // the stack via arguments.caller.callee and Firefox dies if
    // you try to trace through "use strict" call chains. (#13335)
    //"use strict";
    var deletedIds = [];

    var document = window.document;

    var slice = deletedIds.slice;

    var concat = deletedIds.concat;

    var push = deletedIds.push;

    var indexOf = deletedIds.indexOf;

    var class2type = {};

    var toString = class2type.toString;

    var hasOwn = class2type.hasOwnProperty;

    var support = {};



    var
        version = "1.12.0",

        // Define a local copy of jQuery
        jQuery = function(selector, context) {

            // The jQuery object is actually just the init constructor 'enhanced'
            // Need init if jQuery is called (just allow error to be thrown if not included)
            return new jQuery.fn.init(selector, context);
        },

        // Support: Android<4.1, IE<9
        // Make sure we trim BOM and NBSP
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

        // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,

        // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function(all, letter) {
            return letter.toUpperCase();
        };

    jQuery.fn = jQuery.prototype = {

        // The current version of jQuery being used
        jquery: version,

        constructor: jQuery,

        // Start with an empty selector
        selector: "",

        // The default length of a jQuery object is 0
        length: 0,

        toArray: function() {
            return slice.call(this);
        },

        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function(num) {
            return num != null ?

                // Return just the one element from the set
                (num < 0 ? this[num + this.length] : this[num]) :

                // Return all the elements in a clean array
                slice.call(this);
        },

        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function(elems) {

            // Build a new jQuery matched element set
            var ret = jQuery.merge(this.constructor(), elems);

            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            ret.context = this.context;

            // Return the newly-formed element set
            return ret;
        },

        // Execute a callback for every element in the matched set.
        each: function(callback) {
            return jQuery.each(this, callback);
        },

        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },

        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },

        first: function() {
            return this.eq(0);
        },

        last: function() {
            return this.eq(-1);
        },

        eq: function(i) {
            var len = this.length,
                j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },

        end: function() {
            return this.prevObject || this.constructor();
        },

        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: deletedIds.sort,
        splice: deletedIds.splice
    };

    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;

            // skip the boolean and the target
            target = arguments[i] || {};
            i++;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }

        // extend jQuery itself if only one argument is passed
        if (i === length) {
            target = this;
            i--;
        }

        for (; i < length; i++) {

            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {

                // Extend the base object
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    // Prevent never-ending loop
                    if (target === copy) {
                        continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (jQuery.isPlainObject(copy) ||
                            (copyIsArray = jQuery.isArray(copy)))) {

                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];

                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }

                        // Never move original objects, clone them
                        target[name] = jQuery.extend(deep, clone, copy);

                        // Don't bring in undefined values
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        // Return the modified object
        return target;
    };

    jQuery.extend({

        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

        // Assume jQuery is ready without the ready module
        isReady: true,

        error: function(msg) {
            throw new Error(msg);
        },

        noop: function() {},

        // See test/unit/core.js for details concerning isFunction.
        // Since version 1.3, DOM methods and functions like alert
        // aren't supported. They return false on IE (#2968).
        isFunction: function(obj) {
            return jQuery.type(obj) === "function";
        },

        isArray: Array.isArray || function(obj) {
            return jQuery.type(obj) === "array";
        },

        isWindow: function(obj) {
            /* jshint eqeqeq: false */
            return obj != null && obj == obj.window;
        },

        isNumeric: function(obj) {

            // parseFloat NaNs numeric-cast false positives (null|true|false|"")
            // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
            // subtraction forces infinities to NaN
            // adding 1 corrects loss of precision from parseFloat (#15100)
            var realStringObj = obj && obj.toString();
            return !jQuery.isArray(obj) && (realStringObj - parseFloat(realStringObj) + 1) >= 0;
        },

        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },

        isPlainObject: function(obj) {
            var key;

            // Must be an Object.
            // Because of IE, we also have to check the presence of the constructor property.
            // Make sure that DOM nodes and window objects don't pass through, as well
            if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }

            try {

                // Not own constructor property must be Object
                if (obj.constructor &&
                    !hasOwn.call(obj, "constructor") &&
                    !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                    return false;
                }
            } catch (e) {

                // IE8,9 Will throw exceptions on certain host objects #9897
                return false;
            }

            // Support: IE<9
            // Handle iteration over inherited properties before own properties.
            if (!support.ownFirst) {
                for (key in obj) {
                    return hasOwn.call(obj, key);
                }
            }

            // Own properties are enumerated firstly, so to speed up,
            // if last one is own, then all properties are own.
            for (key in obj) {}

            return key === undefined || hasOwn.call(obj, key);
        },

        type: function(obj) {
            if (obj == null) {
                return obj + "";
            }
            return typeof obj === "object" || typeof obj === "function" ?
                class2type[toString.call(obj)] || "object" :
                typeof obj;
        },

        // Workarounds based on findings by Jim Driscoll
        // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
        globalEval: function(data) {
            if (data && jQuery.trim(data)) {

                // We use execScript on Internet Explorer
                // We use an anonymous function so that context is window
                // rather than jQuery in Firefox
                (window.execScript || function(data) {
                    window["eval"].call(window, data); // jscs:ignore requireDotNotation
                })(data);
            }
        },

        // Convert dashed to camelCase; used by the css and data modules
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },

        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },

        each: function(obj, callback) {
            var length, i = 0;

            if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }

            return obj;
        },

        // Support: Android<4.1, IE<9
        trim: function(text) {
            return text == null ?
                "" :
                (text + "").replace(rtrim, "");
        },

        // results is for internal usage only
        makeArray: function(arr, results) {
            var ret = results || [];

            if (arr != null) {
                if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret,
                        typeof arr === "string" ? [arr] : arr
                    );
                } else {
                    push.call(ret, arr);
                }
            }

            return ret;
        },

        inArray: function(elem, arr, i) {
            var len;

            if (arr) {
                if (indexOf) {
                    return indexOf.call(arr, elem, i);
                }

                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

                for (; i < len; i++) {

                    // Skip accessing in sparse arrays
                    if (i in arr && arr[i] === elem) {
                        return i;
                    }
                }
            }

            return -1;
        },

        merge: function(first, second) {
            var len = +second.length,
                j = 0,
                i = first.length;

            while (j < len) {
                first[i++] = second[j++];
            }

            // Support: IE<9
            // Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
            if (len !== len) {
                while (second[j] !== undefined) {
                    first[i++] = second[j++];
                }
            }

            first.length = i;

            return first;
        },

        grep: function(elems, callback, invert) {
            var callbackInverse,
                matches = [],
                i = 0,
                length = elems.length,
                callbackExpect = !invert;

            // Go through the array, only saving the items
            // that pass the validator function
            for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }

            return matches;
        },

        // arg is for internal usage only
        map: function(elems, callback, arg) {
            var length, value,
                i = 0,
                ret = [];

            // Go through the array, translating each of the items to their new values
            if (isArrayLike(elems)) {
                length = elems.length;
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret.push(value);
                    }
                }

                // Go through every key on the object,
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret.push(value);
                    }
                }
            }

            // Flatten any nested arrays
            return concat.apply([], ret);
        },

        // A global GUID counter for objects
        guid: 1,

        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function(fn, context) {
            var args, proxy, tmp;

            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }

            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }

            // Simulated bind
            args = slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
            };

            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;

            return proxy;
        },

        now: function() {
            return +(new Date());
        },

        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
    });

    // JSHint would error on this code due to the Symbol not being defined in ES5.
    // Defining this global in .jshintrc would create a danger of using the global
    // unguarded in another place, it seems safer to just disable JSHint for these
    // three lines.
    /* jshint ignore: start */
    if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = deletedIds[Symbol.iterator];
    }
    /* jshint ignore: end */

    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
        function(i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
        });

    function isArrayLike(obj) {

        // Support: iOS 8.2 (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length,
            type = jQuery.type(obj);

        if (type === "function" || jQuery.isWindow(obj)) {
            return false;
        }

        return type === "array" || length === 0 ||
            typeof length === "number" && length > 0 && (length - 1) in obj;
    }
    var Sizzle =
        /*!
         * Sizzle CSS Selector Engine v2.2.1
         * http://sizzlejs.com/
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license
         * http://jquery.org/license
         *
         * Date: 2015-10-17
         */
        (function(window) {

            var i,
                support,
                Expr,
                getText,
                isXML,
                tokenize,
                compile,
                select,
                outermostContext,
                sortInput,
                hasDuplicate,

                // Local document vars
                setDocument,
                document,
                docElem,
                documentIsHTML,
                rbuggyQSA,
                rbuggyMatches,
                matches,
                contains,

                // Instance-specific data
                expando = "sizzle" + 1 * new Date(),
                preferredDoc = window.document,
                dirruns = 0,
                done = 0,
                classCache = createCache(),
                tokenCache = createCache(),
                compilerCache = createCache(),
                sortOrder = function(a, b) {
                    if (a === b) {
                        hasDuplicate = true;
                    }
                    return 0;
                },

                // General-purpose constants
                MAX_NEGATIVE = 1 << 31,

                // Instance methods
                hasOwn = ({}).hasOwnProperty,
                arr = [],
                pop = arr.pop,
                push_native = arr.push,
                push = arr.push,
                slice = arr.slice,
                // Use a stripped-down indexOf as it's faster than native
                // http://jsperf.com/thor-indexof-vs-for/5
                indexOf = function(list, elem) {
                    var i = 0,
                        len = list.length;
                    for (; i < len; i++) {
                        if (list[i] === elem) {
                            return i;
                        }
                    }
                    return -1;
                },

                booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

                // Regular expressions

                // http://www.w3.org/TR/css3-selectors/#whitespace
                whitespace = "[\\x20\\t\\r\\n\\f]",

                // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
                identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

                // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
                attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
                // Operator (capture 2)
                "*([*^$|!~]?=)" + whitespace +
                // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
                "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
                "*\\]",

                pseudos = ":(" + identifier + ")(?:\\((" +
                // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                // 1. quoted (capture 3; capture 4 or capture 5)
                "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                // 2. simple (capture 6)
                "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
                // 3. anything else (capture 2)
                ".*" +
                ")\\)|)",

                // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                rwhitespace = new RegExp(whitespace + "+", "g"),
                rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

                rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),

                rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),

                rpseudo = new RegExp(pseudos),
                ridentifier = new RegExp("^" + identifier + "$"),

                matchExpr = {
                    "ID": new RegExp("^#(" + identifier + ")"),
                    "CLASS": new RegExp("^\\.(" + identifier + ")"),
                    "TAG": new RegExp("^(" + identifier + "|[*])"),
                    "ATTR": new RegExp("^" + attributes),
                    "PSEUDO": new RegExp("^" + pseudos),
                    "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                        "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                        "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                    "bool": new RegExp("^(?:" + booleans + ")$", "i"),
                    // For use in libraries implementing .is()
                    // We use this for POS matching in `select`
                    "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                        whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
                },

                rinputs = /^(?:input|select|textarea|button)$/i,
                rheader = /^h\d$/i,

                rnative = /^[^{]+\{\s*\[native \w/,

                // Easily-parseable/retrievable ID or TAG or CLASS selectors
                rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

                rsibling = /[+~]/,
                rescape = /'|\\/g,

                // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
                funescape = function(_, escaped, escapedWhitespace) {
                    var high = "0x" + escaped - 0x10000;
                    // NaN means non-codepoint
                    // Support: Firefox<24
                    // Workaround erroneous numeric interpretation of +"0x"
                    return high !== high || escapedWhitespace ?
                        escaped :
                        high < 0 ?
                        // BMP codepoint
                        String.fromCharCode(high + 0x10000) :
                        // Supplemental Plane codepoint (surrogate pair)
                        String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
                },

                // Used for iframes
                // See setDocument()
                // Removing the function wrapper causes a "Permission Denied"
                // error in IE
                unloadHandler = function() {
                    setDocument();
                };

            // Optimize for push.apply( _, NodeList )
            try {
                push.apply(
                    (arr = slice.call(preferredDoc.childNodes)),
                    preferredDoc.childNodes
                );
                // Support: Android<4.0
                // Detect silently failing push.apply
                arr[preferredDoc.childNodes.length].nodeType;
            } catch (e) {
                push = {
                    apply: arr.length ?

                        // Leverage slice if possible
                        function(target, els) {
                            push_native.apply(target, slice.call(els));
                        } :

                        // Support: IE<9
                        // Otherwise append directly
                        function(target, els) {
                            var j = target.length,
                                i = 0;
                            // Can't trust NodeList.length
                            while ((target[j++] = els[i++])) {}
                            target.length = j - 1;
                        }
                };
            }

            function Sizzle(selector, context, results, seed) {
                var m, i, elem, nid, nidselect, match, groups, newSelector,
                    newContext = context && context.ownerDocument,

                    // nodeType defaults to 9, since context defaults to document
                    nodeType = context ? context.nodeType : 9;

                results = results || [];

                // Return early from calls with invalid selector or context
                if (typeof selector !== "string" || !selector ||
                    nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

                    return results;
                }

                // Try to shortcut find operations (as opposed to filters) in HTML documents
                if (!seed) {

                    if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                        setDocument(context);
                    }
                    context = context || document;

                    if (documentIsHTML) {

                        // If the selector is sufficiently simple, try using a "get*By*" DOM method
                        // (excepting DocumentFragment context, where the methods don't exist)
                        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

                            // ID selector
                            if ((m = match[1])) {

                                // Document context
                                if (nodeType === 9) {
                                    if ((elem = context.getElementById(m))) {

                                        // Support: IE, Opera, Webkit
                                        // TODO: identify versions
                                        // getElementById can match elements by name instead of ID
                                        if (elem.id === m) {
                                            results.push(elem);
                                            return results;
                                        }
                                    } else {
                                        return results;
                                    }

                                    // Element context
                                } else {

                                    // Support: IE, Opera, Webkit
                                    // TODO: identify versions
                                    // getElementById can match elements by name instead of ID
                                    if (newContext && (elem = newContext.getElementById(m)) &&
                                        contains(context, elem) &&
                                        elem.id === m) {

                                        results.push(elem);
                                        return results;
                                    }
                                }

                                // Type selector
                            } else if (match[2]) {
                                push.apply(results, context.getElementsByTagName(selector));
                                return results;

                                // Class selector
                            } else if ((m = match[3]) && support.getElementsByClassName &&
                                context.getElementsByClassName) {

                                push.apply(results, context.getElementsByClassName(m));
                                return results;
                            }
                        }

                        // Take advantage of querySelectorAll
                        if (support.qsa &&
                            !compilerCache[selector + " "] &&
                            (!rbuggyQSA || !rbuggyQSA.test(selector))) {

                            if (nodeType !== 1) {
                                newContext = context;
                                newSelector = selector;

                                // qSA looks outside Element context, which is not what we want
                                // Thanks to Andrew Dupont for this workaround technique
                                // Support: IE <=8
                                // Exclude object elements
                            } else if (context.nodeName.toLowerCase() !== "object") {

                                // Capture the context ID, setting it first if necessary
                                if ((nid = context.getAttribute("id"))) {
                                    nid = nid.replace(rescape, "\\$&");
                                } else {
                                    context.setAttribute("id", (nid = expando));
                                }

                                // Prefix every selector in the list
                                groups = tokenize(selector);
                                i = groups.length;
                                nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";
                                while (i--) {
                                    groups[i] = nidselect + " " + toSelector(groups[i]);
                                }
                                newSelector = groups.join(",");

                                // Expand context for sibling selectors
                                newContext = rsibling.test(selector) && testContext(context.parentNode) ||
                                    context;
                            }

                            if (newSelector) {
                                try {
                                    push.apply(results,
                                        newContext.querySelectorAll(newSelector)
                                    );
                                    return results;
                                } catch (qsaError) {} finally {
                                    if (nid === expando) {
                                        context.removeAttribute("id");
                                    }
                                }
                            }
                        }
                    }
                }

                // All others
                return select(selector.replace(rtrim, "$1"), context, results, seed);
            }

            /**
             * Create key-value caches of limited size
             * @returns {function(string, object)} Returns the Object data after storing it on itself with
             *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
             *	deleting the oldest entry
             */
            function createCache() {
                var keys = [];

                function cache(key, value) {
                    // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                    if (keys.push(key + " ") > Expr.cacheLength) {
                        // Only keep the most recent entries
                        delete cache[keys.shift()];
                    }
                    return (cache[key + " "] = value);
                }
                return cache;
            }

            /**
             * Mark a function for special use by Sizzle
             * @param {Function} fn The function to mark
             */
            function markFunction(fn) {
                fn[expando] = true;
                return fn;
            }

            /**
             * Support testing using an element
             * @param {Function} fn Passed the created div and expects a boolean result
             */
            function assert(fn) {
                var div = document.createElement("div");

                try {
                    return !!fn(div);
                } catch (e) {
                    return false;
                } finally {
                    // Remove from its parent by default
                    if (div.parentNode) {
                        div.parentNode.removeChild(div);
                    }
                    // release memory in IE
                    div = null;
                }
            }

            /**
             * Adds the same handler for all of the specified attrs
             * @param {String} attrs Pipe-separated list of attributes
             * @param {Function} handler The method that will be applied
             */
            function addHandle(attrs, handler) {
                var arr = attrs.split("|"),
                    i = arr.length;

                while (i--) {
                    Expr.attrHandle[arr[i]] = handler;
                }
            }

            /**
             * Checks document order of two siblings
             * @param {Element} a
             * @param {Element} b
             * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
             */
            function siblingCheck(a, b) {
                var cur = b && a,
                    diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
                    (~b.sourceIndex || MAX_NEGATIVE) -
                    (~a.sourceIndex || MAX_NEGATIVE);

                // Use IE sourceIndex if available on both nodes
                if (diff) {
                    return diff;
                }

                // Check if b follows a
                if (cur) {
                    while ((cur = cur.nextSibling)) {
                        if (cur === b) {
                            return -1;
                        }
                    }
                }

                return a ? 1 : -1;
            }

            /**
             * Returns a function to use in pseudos for input types
             * @param {String} type
             */
            function createInputPseudo(type) {
                return function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === type;
                };
            }

            /**
             * Returns a function to use in pseudos for buttons
             * @param {String} type
             */
            function createButtonPseudo(type) {
                return function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (name === "input" || name === "button") && elem.type === type;
                };
            }

            /**
             * Returns a function to use in pseudos for positionals
             * @param {Function} fn
             */
            function createPositionalPseudo(fn) {
                return markFunction(function(argument) {
                    argument = +argument;
                    return markFunction(function(seed, matches) {
                        var j,
                            matchIndexes = fn([], seed.length, argument),
                            i = matchIndexes.length;

                        // Match elements found at the specified indexes
                        while (i--) {
                            if (seed[(j = matchIndexes[i])]) {
                                seed[j] = !(matches[j] = seed[j]);
                            }
                        }
                    });
                });
            }

            /**
             * Checks a node for validity as a Sizzle context
             * @param {Element|Object=} context
             * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
             */
            function testContext(context) {
                return context && typeof context.getElementsByTagName !== "undefined" && context;
            }

            // Expose support vars for convenience
            support = Sizzle.support = {};

            /**
             * Detects XML nodes
             * @param {Element|Object} elem An element or a document
             * @returns {Boolean} True iff elem is a non-HTML XML node
             */
            isXML = Sizzle.isXML = function(elem) {
                // documentElement is verified for cases where it doesn't yet exist
                // (such as loading iframes in IE - #4833)
                var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                return documentElement ? documentElement.nodeName !== "HTML" : false;
            };

            /**
             * Sets document-related variables once based on the current document
             * @param {Element|Object} [doc] An element or document object to use to set the document
             * @returns {Object} Returns the current document
             */
            setDocument = Sizzle.setDocument = function(node) {
                var hasCompare, parent,
                    doc = node ? node.ownerDocument || node : preferredDoc;

                // Return early if doc is invalid or already selected
                if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                    return document;
                }

                // Update global variables
                document = doc;
                docElem = document.documentElement;
                documentIsHTML = !isXML(document);

                // Support: IE 9-11, Edge
                // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
                if ((parent = document.defaultView) && parent.top !== parent) {
                    // Support: IE 11
                    if (parent.addEventListener) {
                        parent.addEventListener("unload", unloadHandler, false);

                        // Support: IE 9 - 10 only
                    } else if (parent.attachEvent) {
                        parent.attachEvent("onunload", unloadHandler);
                    }
                }

                /* Attributes
                ---------------------------------------------------------------------- */

                // Support: IE<8
                // Verify that getAttribute really returns attributes and not properties
                // (excepting IE8 booleans)
                support.attributes = assert(function(div) {
                    div.className = "i";
                    return !div.getAttribute("className");
                });

                /* getElement(s)By*
                ---------------------------------------------------------------------- */

                // Check if getElementsByTagName("*") returns only elements
                support.getElementsByTagName = assert(function(div) {
                    div.appendChild(document.createComment(""));
                    return !div.getElementsByTagName("*").length;
                });

                // Support: IE<9
                support.getElementsByClassName = rnative.test(document.getElementsByClassName);

                // Support: IE<10
                // Check if getElementById returns elements by name
                // The broken getElementById methods don't pick up programatically-set names,
                // so use a roundabout getElementsByName test
                support.getById = assert(function(div) {
                    docElem.appendChild(div).id = expando;
                    return !document.getElementsByName || !document.getElementsByName(expando).length;
                });

                // ID find and filter
                if (support.getById) {
                    Expr.find["ID"] = function(id, context) {
                        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                            var m = context.getElementById(id);
                            return m ? [m] : [];
                        }
                    };
                    Expr.filter["ID"] = function(id) {
                        var attrId = id.replace(runescape, funescape);
                        return function(elem) {
                            return elem.getAttribute("id") === attrId;
                        };
                    };
                } else {
                    // Support: IE6/7
                    // getElementById is not reliable as a find shortcut
                    delete Expr.find["ID"];

                    Expr.filter["ID"] = function(id) {
                        var attrId = id.replace(runescape, funescape);
                        return function(elem) {
                            var node = typeof elem.getAttributeNode !== "undefined" &&
                                elem.getAttributeNode("id");
                            return node && node.value === attrId;
                        };
                    };
                }

                // Tag
                Expr.find["TAG"] = support.getElementsByTagName ?
                    function(tag, context) {
                        if (typeof context.getElementsByTagName !== "undefined") {
                            return context.getElementsByTagName(tag);

                            // DocumentFragment nodes don't have gEBTN
                        } else if (support.qsa) {
                            return context.querySelectorAll(tag);
                        }
                    } :

                    function(tag, context) {
                        var elem,
                            tmp = [],
                            i = 0,
                            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                            results = context.getElementsByTagName(tag);

                        // Filter out possible comments
                        if (tag === "*") {
                            while ((elem = results[i++])) {
                                if (elem.nodeType === 1) {
                                    tmp.push(elem);
                                }
                            }

                            return tmp;
                        }
                        return results;
                    };

                // Class
                Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                    if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                        return context.getElementsByClassName(className);
                    }
                };

                /* QSA/matchesSelector
                ---------------------------------------------------------------------- */

                // QSA and matchesSelector support

                // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                rbuggyMatches = [];

                // qSa(:focus) reports false when true (Chrome 21)
                // We allow this because of a bug in IE8/9 that throws an error
                // whenever `document.activeElement` is accessed on an iframe
                // So, we allow :focus to pass through QSA all the time to avoid the IE error
                // See http://bugs.jquery.com/ticket/13378
                rbuggyQSA = [];

                if ((support.qsa = rnative.test(document.querySelectorAll))) {
                    // Build QSA regex
                    // Regex strategy adopted from Diego Perini
                    assert(function(div) {
                        // Select is set to empty string on purpose
                        // This is to test IE's treatment of not explicitly
                        // setting a boolean content attribute,
                        // since its presence should be enough
                        // http://bugs.jquery.com/ticket/12359
                        docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" +
                            "<select id='" + expando + "-\r\\' msallowcapture=''>" +
                            "<option selected=''></option></select>";

                        // Support: IE8, Opera 11-12.16
                        // Nothing should be selected when empty strings follow ^= or $= or *=
                        // The test attribute must be unknown in Opera but "safe" for WinRT
                        // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                        if (div.querySelectorAll("[msallowcapture^='']").length) {
                            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                        }

                        // Support: IE8
                        // Boolean attributes and "value" are not treated correctly
                        if (!div.querySelectorAll("[selected]").length) {
                            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                        }

                        // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                        if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
                            rbuggyQSA.push("~=");
                        }

                        // Webkit/Opera - :checked should return selected option elements
                        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                        // IE8 throws error here and will not see later tests
                        if (!div.querySelectorAll(":checked").length) {
                            rbuggyQSA.push(":checked");
                        }

                        // Support: Safari 8+, iOS 8+
                        // https://bugs.webkit.org/show_bug.cgi?id=136851
                        // In-page `selector#id sibing-combinator selector` fails
                        if (!div.querySelectorAll("a#" + expando + "+*").length) {
                            rbuggyQSA.push(".#.+[+~]");
                        }
                    });

                    assert(function(div) {
                        // Support: Windows 8 Native Apps
                        // The type and name attributes are restricted during .innerHTML assignment
                        var input = document.createElement("input");
                        input.setAttribute("type", "hidden");
                        div.appendChild(input).setAttribute("name", "D");

                        // Support: IE8
                        // Enforce case-sensitivity of name attribute
                        if (div.querySelectorAll("[name=d]").length) {
                            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                        }

                        // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                        // IE8 throws error here and will not see later tests
                        if (!div.querySelectorAll(":enabled").length) {
                            rbuggyQSA.push(":enabled", ":disabled");
                        }

                        // Opera 10-11 does not throw on post-comma invalid pseudos
                        div.querySelectorAll("*,:x");
                        rbuggyQSA.push(",.*:");
                    });
                }

                if ((support.matchesSelector = rnative.test((matches = docElem.matches ||
                        docElem.webkitMatchesSelector ||
                        docElem.mozMatchesSelector ||
                        docElem.oMatchesSelector ||
                        docElem.msMatchesSelector)))) {

                    assert(function(div) {
                        // Check to see if it's possible to do matchesSelector
                        // on a disconnected node (IE 9)
                        support.disconnectedMatch = matches.call(div, "div");

                        // This should fail with an exception
                        // Gecko does not error, returns false instead
                        matches.call(div, "[s!='']:x");
                        rbuggyMatches.push("!=", pseudos);
                    });
                }

                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

                /* Contains
                ---------------------------------------------------------------------- */
                hasCompare = rnative.test(docElem.compareDocumentPosition);

                // Element contains another
                // Purposefully self-exclusive
                // As in, an element does not contain itself
                contains = hasCompare || rnative.test(docElem.contains) ?
                    function(a, b) {
                        var adown = a.nodeType === 9 ? a.documentElement : a,
                            bup = b && b.parentNode;
                        return a === bup || !!(bup && bup.nodeType === 1 && (
                            adown.contains ?
                            adown.contains(bup) :
                            a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
                        ));
                    } :
                    function(a, b) {
                        if (b) {
                            while ((b = b.parentNode)) {
                                if (b === a) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    };

                /* Sorting
                ---------------------------------------------------------------------- */

                // Document order sorting
                sortOrder = hasCompare ?
                    function(a, b) {

                        // Flag for duplicate removal
                        if (a === b) {
                            hasDuplicate = true;
                            return 0;
                        }

                        // Sort on method existence if only one input has compareDocumentPosition
                        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                        if (compare) {
                            return compare;
                        }

                        // Calculate position if both inputs belong to the same document
                        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ?
                            a.compareDocumentPosition(b) :

                            // Otherwise we know they are disconnected
                            1;

                        // Disconnected nodes
                        if (compare & 1 ||
                            (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {

                            // Choose the first element that is related to our preferred document
                            if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                                return -1;
                            }
                            if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                                return 1;
                            }

                            // Maintain original order
                            return sortInput ?
                                (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                                0;
                        }

                        return compare & 4 ? -1 : 1;
                    } :
                    function(a, b) {
                        // Exit early if the nodes are identical
                        if (a === b) {
                            hasDuplicate = true;
                            return 0;
                        }

                        var cur,
                            i = 0,
                            aup = a.parentNode,
                            bup = b.parentNode,
                            ap = [a],
                            bp = [b];

                        // Parentless nodes are either documents or disconnected
                        if (!aup || !bup) {
                            return a === document ? -1 :
                                b === document ? 1 :
                                aup ? -1 :
                                bup ? 1 :
                                sortInput ?
                                (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                                0;

                            // If the nodes are siblings, we can do a quick check
                        } else if (aup === bup) {
                            return siblingCheck(a, b);
                        }

                        // Otherwise we need full lists of their ancestors for comparison
                        cur = a;
                        while ((cur = cur.parentNode)) {
                            ap.unshift(cur);
                        }
                        cur = b;
                        while ((cur = cur.parentNode)) {
                            bp.unshift(cur);
                        }

                        // Walk down the tree looking for a discrepancy
                        while (ap[i] === bp[i]) {
                            i++;
                        }

                        return i ?
                            // Do a sibling check if the nodes have a common ancestor
                            siblingCheck(ap[i], bp[i]) :

                            // Otherwise nodes in our document sort first
                            ap[i] === preferredDoc ? -1 :
                            bp[i] === preferredDoc ? 1 :
                            0;
                    };

                return document;
            };

            Sizzle.matches = function(expr, elements) {
                return Sizzle(expr, null, null, elements);
            };

            Sizzle.matchesSelector = function(elem, expr) {
                // Set document vars if needed
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }

                // Make sure that attribute selectors are quoted
                expr = expr.replace(rattributeQuotes, "='$1']");

                if (support.matchesSelector && documentIsHTML &&
                    !compilerCache[expr + " "] &&
                    (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
                    (!rbuggyQSA || !rbuggyQSA.test(expr))) {

                    try {
                        var ret = matches.call(elem, expr);

                        // IE 9's matchesSelector returns false on disconnected nodes
                        if (ret || support.disconnectedMatch ||
                            // As well, disconnected nodes are said to be in a document
                            // fragment in IE 9
                            elem.document && elem.document.nodeType !== 11) {
                            return ret;
                        }
                    } catch (e) {}
                }

                return Sizzle(expr, document, null, [elem]).length > 0;
            };

            Sizzle.contains = function(context, elem) {
                // Set document vars if needed
                if ((context.ownerDocument || context) !== document) {
                    setDocument(context);
                }
                return contains(context, elem);
            };

            Sizzle.attr = function(elem, name) {
                // Set document vars if needed
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }

                var fn = Expr.attrHandle[name.toLowerCase()],
                    // Don't get fooled by Object.prototype properties (jQuery #13807)
                    val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ?
                    fn(elem, name, !documentIsHTML) :
                    undefined;

                return val !== undefined ?
                    val :
                    support.attributes || !documentIsHTML ?
                    elem.getAttribute(name) :
                    (val = elem.getAttributeNode(name)) && val.specified ?
                    val.value :
                    null;
            };

            Sizzle.error = function(msg) {
                throw new Error("Syntax error, unrecognized expression: " + msg);
            };

            /**
             * Document sorting and removing duplicates
             * @param {ArrayLike} results
             */
            Sizzle.uniqueSort = function(results) {
                var elem,
                    duplicates = [],
                    j = 0,
                    i = 0;

                // Unless we *know* we can detect duplicates, assume their presence
                hasDuplicate = !support.detectDuplicates;
                sortInput = !support.sortStable && results.slice(0);
                results.sort(sortOrder);

                if (hasDuplicate) {
                    while ((elem = results[i++])) {
                        if (elem === results[i]) {
                            j = duplicates.push(i);
                        }
                    }
                    while (j--) {
                        results.splice(duplicates[j], 1);
                    }
                }

                // Clear input after sorting to release objects
                // See https://github.com/jquery/sizzle/pull/225
                sortInput = null;

                return results;
            };

            /**
             * Utility function for retrieving the text value of an array of DOM nodes
             * @param {Array|Element} elem
             */
            getText = Sizzle.getText = function(elem) {
                var node,
                    ret = "",
                    i = 0,
                    nodeType = elem.nodeType;

                if (!nodeType) {
                    // If no nodeType, this is expected to be an array
                    while ((node = elem[i++])) {
                        // Do not traverse comment nodes
                        ret += getText(node);
                    }
                } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                    // Use textContent for elements
                    // innerText usage removed for consistency of new lines (jQuery #11153)
                    if (typeof elem.textContent === "string") {
                        return elem.textContent;
                    } else {
                        // Traverse its children
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            ret += getText(elem);
                        }
                    }
                } else if (nodeType === 3 || nodeType === 4) {
                    return elem.nodeValue;
                }
                // Do not include comment or processing instruction nodes

                return ret;
            };

            Expr = Sizzle.selectors = {

                // Can be adjusted by the user
                cacheLength: 50,

                createPseudo: markFunction,

                match: matchExpr,

                attrHandle: {},

                find: {},

                relative: {
                    ">": {
                        dir: "parentNode",
                        first: true
                    },
                    " ": {
                        dir: "parentNode"
                    },
                    "+": {
                        dir: "previousSibling",
                        first: true
                    },
                    "~": {
                        dir: "previousSibling"
                    }
                },

                preFilter: {
                    "ATTR": function(match) {
                        match[1] = match[1].replace(runescape, funescape);

                        // Move the given value to match[3] whether quoted or unquoted
                        match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

                        if (match[2] === "~=") {
                            match[3] = " " + match[3] + " ";
                        }

                        return match.slice(0, 4);
                    },

                    "CHILD": function(match) {
                        /* matches from matchExpr["CHILD"]
                        	1 type (only|nth|...)
                        	2 what (child|of-type)
                        	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                        	4 xn-component of xn+y argument ([+-]?\d*n|)
                        	5 sign of xn-component
                        	6 x of xn-component
                        	7 sign of y-component
                        	8 y of y-component
                        */
                        match[1] = match[1].toLowerCase();

                        if (match[1].slice(0, 3) === "nth") {
                            // nth-* requires argument
                            if (!match[3]) {
                                Sizzle.error(match[0]);
                            }

                            // numeric x and y parameters for Expr.filter.CHILD
                            // remember that false/true cast respectively to 0/1
                            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                            match[5] = +((match[7] + match[8]) || match[3] === "odd");

                            // other types prohibit arguments
                        } else if (match[3]) {
                            Sizzle.error(match[0]);
                        }

                        return match;
                    },

                    "PSEUDO": function(match) {
                        var excess,
                            unquoted = !match[6] && match[2];

                        if (matchExpr["CHILD"].test(match[0])) {
                            return null;
                        }

                        // Accept quoted arguments as-is
                        if (match[3]) {
                            match[2] = match[4] || match[5] || "";

                            // Strip excess characters from unquoted arguments
                        } else if (unquoted && rpseudo.test(unquoted) &&
                            // Get excess from tokenize (recursively)
                            (excess = tokenize(unquoted, true)) &&
                            // advance to the next closing parenthesis
                            (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

                            // excess is a negative index
                            match[0] = match[0].slice(0, excess);
                            match[2] = unquoted.slice(0, excess);
                        }

                        // Return only captures needed by the pseudo filter method (type and argument)
                        return match.slice(0, 3);
                    }
                },

                filter: {

                    "TAG": function(nodeNameSelector) {
                        var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                        return nodeNameSelector === "*" ?
                            function() {
                                return true;
                            } :
                            function(elem) {
                                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                            };
                    },

                    "CLASS": function(className) {
                        var pattern = classCache[className + " "];

                        return pattern ||
                            (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
                            classCache(className, function(elem) {
                                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                            });
                    },

                    "ATTR": function(name, operator, check) {
                        return function(elem) {
                            var result = Sizzle.attr(elem, name);

                            if (result == null) {
                                return operator === "!=";
                            }
                            if (!operator) {
                                return true;
                            }

                            result += "";

                            return operator === "=" ? result === check :
                                operator === "!=" ? result !== check :
                                operator === "^=" ? check && result.indexOf(check) === 0 :
                                operator === "*=" ? check && result.indexOf(check) > -1 :
                                operator === "$=" ? check && result.slice(-check.length) === check :
                                operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 :
                                operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
                                false;
                        };
                    },

                    "CHILD": function(type, what, argument, first, last) {
                        var simple = type.slice(0, 3) !== "nth",
                            forward = type.slice(-4) !== "last",
                            ofType = what === "of-type";

                        return first === 1 && last === 0 ?

                            // Shortcut for :nth-*(n)
                            function(elem) {
                                return !!elem.parentNode;
                            } :

                            function(elem, context, xml) {
                                var cache, uniqueCache, outerCache, node, nodeIndex, start,
                                    dir = simple !== forward ? "nextSibling" : "previousSibling",
                                    parent = elem.parentNode,
                                    name = ofType && elem.nodeName.toLowerCase(),
                                    useCache = !xml && !ofType,
                                    diff = false;

                                if (parent) {

                                    // :(first|last|only)-(child|of-type)
                                    if (simple) {
                                        while (dir) {
                                            node = elem;
                                            while ((node = node[dir])) {
                                                if (ofType ?
                                                    node.nodeName.toLowerCase() === name :
                                                    node.nodeType === 1) {

                                                    return false;
                                                }
                                            }
                                            // Reverse direction for :only-* (if we haven't yet done so)
                                            start = dir = type === "only" && !start && "nextSibling";
                                        }
                                        return true;
                                    }

                                    start = [forward ? parent.firstChild : parent.lastChild];

                                    // non-xml :nth-child(...) stores cache data on `parent`
                                    if (forward && useCache) {

                                        // Seek `elem` from a previously-cached index

                                        // ...in a gzip-friendly way
                                        node = parent;
                                        outerCache = node[expando] || (node[expando] = {});

                                        // Support: IE <9 only
                                        // Defend against cloned attroperties (jQuery gh-1709)
                                        uniqueCache = outerCache[node.uniqueID] ||
                                            (outerCache[node.uniqueID] = {});

                                        cache = uniqueCache[type] || [];
                                        nodeIndex = cache[0] === dirruns && cache[1];
                                        diff = nodeIndex && cache[2];
                                        node = nodeIndex && parent.childNodes[nodeIndex];

                                        while ((node = ++nodeIndex && node && node[dir] ||

                                                // Fallback to seeking `elem` from the start
                                                (diff = nodeIndex = 0) || start.pop())) {

                                            // When found, cache indexes on `parent` and break
                                            if (node.nodeType === 1 && ++diff && node === elem) {
                                                uniqueCache[type] = [dirruns, nodeIndex, diff];
                                                break;
                                            }
                                        }

                                    } else {
                                        // Use previously-cached element index if available
                                        if (useCache) {
                                            // ...in a gzip-friendly way
                                            node = elem;
                                            outerCache = node[expando] || (node[expando] = {});

                                            // Support: IE <9 only
                                            // Defend against cloned attroperties (jQuery gh-1709)
                                            uniqueCache = outerCache[node.uniqueID] ||
                                                (outerCache[node.uniqueID] = {});

                                            cache = uniqueCache[type] || [];
                                            nodeIndex = cache[0] === dirruns && cache[1];
                                            diff = nodeIndex;
                                        }

                                        // xml :nth-child(...)
                                        // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                        if (diff === false) {
                                            // Use the same loop as above to seek `elem` from the start
                                            while ((node = ++nodeIndex && node && node[dir] ||
                                                    (diff = nodeIndex = 0) || start.pop())) {

                                                if ((ofType ?
                                                        node.nodeName.toLowerCase() === name :
                                                        node.nodeType === 1) &&
                                                    ++diff) {

                                                    // Cache the index of each encountered element
                                                    if (useCache) {
                                                        outerCache = node[expando] || (node[expando] = {});

                                                        // Support: IE <9 only
                                                        // Defend against cloned attroperties (jQuery gh-1709)
                                                        uniqueCache = outerCache[node.uniqueID] ||
                                                            (outerCache[node.uniqueID] = {});

                                                        uniqueCache[type] = [dirruns, diff];
                                                    }

                                                    if (node === elem) {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    // Incorporate the offset, then check against cycle size
                                    diff -= last;
                                    return diff === first || (diff % first === 0 && diff / first >= 0);
                                }
                            };
                    },

                    "PSEUDO": function(pseudo, argument) {
                        // pseudo-class names are case-insensitive
                        // http://www.w3.org/TR/selectors/#pseudo-classes
                        // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                        // Remember that setFilters inherits from pseudos
                        var args,
                            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
                            Sizzle.error("unsupported pseudo: " + pseudo);

                        // The user may use createPseudo to indicate that
                        // arguments are needed to create the filter function
                        // just as Sizzle does
                        if (fn[expando]) {
                            return fn(argument);
                        }

                        // But maintain support for old signatures
                        if (fn.length > 1) {
                            args = [pseudo, pseudo, "", argument];
                            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
                                markFunction(function(seed, matches) {
                                    var idx,
                                        matched = fn(seed, argument),
                                        i = matched.length;
                                    while (i--) {
                                        idx = indexOf(seed, matched[i]);
                                        seed[idx] = !(matches[idx] = matched[i]);
                                    }
                                }) :
                                function(elem) {
                                    return fn(elem, 0, args);
                                };
                        }

                        return fn;
                    }
                },

                pseudos: {
                    // Potentially complex pseudos
                    "not": markFunction(function(selector) {
                        // Trim the selector passed to compile
                        // to avoid treating leading and trailing
                        // spaces as combinators
                        var input = [],
                            results = [],
                            matcher = compile(selector.replace(rtrim, "$1"));

                        return matcher[expando] ?
                            markFunction(function(seed, matches, context, xml) {
                                var elem,
                                    unmatched = matcher(seed, null, xml, []),
                                    i = seed.length;

                                // Match elements unmatched by `matcher`
                                while (i--) {
                                    if ((elem = unmatched[i])) {
                                        seed[i] = !(matches[i] = elem);
                                    }
                                }
                            }) :
                            function(elem, context, xml) {
                                input[0] = elem;
                                matcher(input, null, xml, results);
                                // Don't keep the element (issue #299)
                                input[0] = null;
                                return !results.pop();
                            };
                    }),

                    "has": markFunction(function(selector) {
                        return function(elem) {
                            return Sizzle(selector, elem).length > 0;
                        };
                    }),

                    "contains": markFunction(function(text) {
                        text = text.replace(runescape, funescape);
                        return function(elem) {
                            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                        };
                    }),

                    // "Whether an element is represented by a :lang() selector
                    // is based solely on the element's language value
                    // being equal to the identifier C,
                    // or beginning with the identifier C immediately followed by "-".
                    // The matching of C against the element's language value is performed case-insensitively.
                    // The identifier C does not have to be a valid language name."
                    // http://www.w3.org/TR/selectors/#lang-pseudo
                    "lang": markFunction(function(lang) {
                        // lang value must be a valid identifier
                        if (!ridentifier.test(lang || "")) {
                            Sizzle.error("unsupported lang: " + lang);
                        }
                        lang = lang.replace(runescape, funescape).toLowerCase();
                        return function(elem) {
                            var elemLang;
                            do {
                                if ((elemLang = documentIsHTML ?
                                        elem.lang :
                                        elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {

                                    elemLang = elemLang.toLowerCase();
                                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                                }
                            } while ((elem = elem.parentNode) && elem.nodeType === 1);
                            return false;
                        };
                    }),

                    // Miscellaneous
                    "target": function(elem) {
                        var hash = window.location && window.location.hash;
                        return hash && hash.slice(1) === elem.id;
                    },

                    "root": function(elem) {
                        return elem === docElem;
                    },

                    "focus": function(elem) {
                        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                    },

                    // Boolean properties
                    "enabled": function(elem) {
                        return elem.disabled === false;
                    },

                    "disabled": function(elem) {
                        return elem.disabled === true;
                    },

                    "checked": function(elem) {
                        // In CSS3, :checked should return both checked and selected elements
                        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                        var nodeName = elem.nodeName.toLowerCase();
                        return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                    },

                    "selected": function(elem) {
                        // Accessing this property makes selected-by-default
                        // options in Safari work properly
                        if (elem.parentNode) {
                            elem.parentNode.selectedIndex;
                        }

                        return elem.selected === true;
                    },

                    // Contents
                    "empty": function(elem) {
                        // http://www.w3.org/TR/selectors/#empty-pseudo
                        // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                        //   but not by others (comment: 8; processing instruction: 7; etc.)
                        // nodeType < 6 works because attributes (2) do not appear as children
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            if (elem.nodeType < 6) {
                                return false;
                            }
                        }
                        return true;
                    },

                    "parent": function(elem) {
                        return !Expr.pseudos["empty"](elem);
                    },

                    // Element/input types
                    "header": function(elem) {
                        return rheader.test(elem.nodeName);
                    },

                    "input": function(elem) {
                        return rinputs.test(elem.nodeName);
                    },

                    "button": function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === "button" || name === "button";
                    },

                    "text": function(elem) {
                        var attr;
                        return elem.nodeName.toLowerCase() === "input" &&
                            elem.type === "text" &&

                            // Support: IE<8
                            // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                            ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                    },

                    // Position-in-collection
                    "first": createPositionalPseudo(function() {
                        return [0];
                    }),

                    "last": createPositionalPseudo(function(matchIndexes, length) {
                        return [length - 1];
                    }),

                    "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
                        return [argument < 0 ? argument + length : argument];
                    }),

                    "even": createPositionalPseudo(function(matchIndexes, length) {
                        var i = 0;
                        for (; i < length; i += 2) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),

                    "odd": createPositionalPseudo(function(matchIndexes, length) {
                        var i = 1;
                        for (; i < length; i += 2) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),

                    "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;
                        for (; --i >= 0;) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),

                    "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;
                        for (; ++i < length;) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    })
                }
            };

            Expr.pseudos["nth"] = Expr.pseudos["eq"];

            // Add button/input type pseudos
            for (i in {
                    radio: true,
                    checkbox: true,
                    file: true,
                    password: true,
                    image: true
                }) {
                Expr.pseudos[i] = createInputPseudo(i);
            }
            for (i in {
                    submit: true,
                    reset: true
                }) {
                Expr.pseudos[i] = createButtonPseudo(i);
            }

            // Easy API for creating new setFilters
            function setFilters() {}
            setFilters.prototype = Expr.filters = Expr.pseudos;
            Expr.setFilters = new setFilters();

            tokenize = Sizzle.tokenize = function(selector, parseOnly) {
                var matched, match, tokens, type,
                    soFar, groups, preFilters,
                    cached = tokenCache[selector + " "];

                if (cached) {
                    return parseOnly ? 0 : cached.slice(0);
                }

                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;

                while (soFar) {

                    // Comma and first run
                    if (!matched || (match = rcomma.exec(soFar))) {
                        if (match) {
                            // Don't consume trailing commas as valid
                            soFar = soFar.slice(match[0].length) || soFar;
                        }
                        groups.push((tokens = []));
                    }

                    matched = false;

                    // Combinators
                    if ((match = rcombinators.exec(soFar))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            // Cast descendant combinators to space
                            type: match[0].replace(rtrim, " ")
                        });
                        soFar = soFar.slice(matched.length);
                    }

                    // Filters
                    for (type in Expr.filter) {
                        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
                                (match = preFilters[type](match)))) {
                            matched = match.shift();
                            tokens.push({
                                value: matched,
                                type: type,
                                matches: match
                            });
                            soFar = soFar.slice(matched.length);
                        }
                    }

                    if (!matched) {
                        break;
                    }
                }

                // Return the length of the invalid excess
                // if we're just parsing
                // Otherwise, throw an error or return tokens
                return parseOnly ?
                    soFar.length :
                    soFar ?
                    Sizzle.error(selector) :
                    // Cache the tokens
                    tokenCache(selector, groups).slice(0);
            };

            function toSelector(tokens) {
                var i = 0,
                    len = tokens.length,
                    selector = "";
                for (; i < len; i++) {
                    selector += tokens[i].value;
                }
                return selector;
            }

            function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir,
                    checkNonElements = base && dir === "parentNode",
                    doneName = done++;

                return combinator.first ?
                    // Check against closest ancestor/preceding element
                    function(elem, context, xml) {
                        while ((elem = elem[dir])) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                return matcher(elem, context, xml);
                            }
                        }
                    } :

                    // Check against all ancestor/preceding elements
                    function(elem, context, xml) {
                        var oldCache, uniqueCache, outerCache,
                            newCache = [dirruns, doneName];

                        // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                        if (xml) {
                            while ((elem = elem[dir])) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    if (matcher(elem, context, xml)) {
                                        return true;
                                    }
                                }
                            }
                        } else {
                            while ((elem = elem[dir])) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    outerCache = elem[expando] || (elem[expando] = {});

                                    // Support: IE <9 only
                                    // Defend against cloned attroperties (jQuery gh-1709)
                                    uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

                                    if ((oldCache = uniqueCache[dir]) &&
                                        oldCache[0] === dirruns && oldCache[1] === doneName) {

                                        // Assign to newCache so results back-propagate to previous elements
                                        return (newCache[2] = oldCache[2]);
                                    } else {
                                        // Reuse newcache so results back-propagate to previous elements
                                        uniqueCache[dir] = newCache;

                                        // A match means we're done; a fail means we have to keep checking
                                        if ((newCache[2] = matcher(elem, context, xml))) {
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    };
            }

            function elementMatcher(matchers) {
                return matchers.length > 1 ?
                    function(elem, context, xml) {
                        var i = matchers.length;
                        while (i--) {
                            if (!matchers[i](elem, context, xml)) {
                                return false;
                            }
                        }
                        return true;
                    } :
                    matchers[0];
            }

            function multipleContexts(selector, contexts, results) {
                var i = 0,
                    len = contexts.length;
                for (; i < len; i++) {
                    Sizzle(selector, contexts[i], results);
                }
                return results;
            }

            function condense(unmatched, map, filter, context, xml) {
                var elem,
                    newUnmatched = [],
                    i = 0,
                    len = unmatched.length,
                    mapped = map != null;

                for (; i < len; i++) {
                    if ((elem = unmatched[i])) {
                        if (!filter || filter(elem, context, xml)) {
                            newUnmatched.push(elem);
                            if (mapped) {
                                map.push(i);
                            }
                        }
                    }
                }

                return newUnmatched;
            }

            function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                if (postFilter && !postFilter[expando]) {
                    postFilter = setMatcher(postFilter);
                }
                if (postFinder && !postFinder[expando]) {
                    postFinder = setMatcher(postFinder, postSelector);
                }
                return markFunction(function(seed, results, context, xml) {
                    var temp, i, elem,
                        preMap = [],
                        postMap = [],
                        preexisting = results.length,

                        // Get initial elements from seed or context
                        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

                        // Prefilter to get matcher input, preserving a map for seed-results synchronization
                        matcherIn = preFilter && (seed || !selector) ?
                        condense(elems, preMap, preFilter, context, xml) :
                        elems,

                        matcherOut = matcher ?
                        // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                        postFinder || (seed ? preFilter : preexisting || postFilter) ?

                        // ...intermediate processing is necessary
                        [] :

                        // ...otherwise use results directly
                        results :
                        matcherIn;

                    // Find primary matches
                    if (matcher) {
                        matcher(matcherIn, matcherOut, context, xml);
                    }

                    // Apply postFilter
                    if (postFilter) {
                        temp = condense(matcherOut, postMap);
                        postFilter(temp, [], context, xml);

                        // Un-match failing elements by moving them back to matcherIn
                        i = temp.length;
                        while (i--) {
                            if ((elem = temp[i])) {
                                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                            }
                        }
                    }

                    if (seed) {
                        if (postFinder || preFilter) {
                            if (postFinder) {
                                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                                temp = [];
                                i = matcherOut.length;
                                while (i--) {
                                    if ((elem = matcherOut[i])) {
                                        // Restore matcherIn since elem is not yet a final match
                                        temp.push((matcherIn[i] = elem));
                                    }
                                }
                                postFinder(null, (matcherOut = []), temp, xml);
                            }

                            // Move matched elements from seed to results to keep them synchronized
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i]) &&
                                    (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

                                    seed[temp] = !(results[temp] = elem);
                                }
                            }
                        }

                        // Add elements to results, through postFinder if defined
                    } else {
                        matcherOut = condense(
                            matcherOut === results ?
                            matcherOut.splice(preexisting, matcherOut.length) :
                            matcherOut
                        );
                        if (postFinder) {
                            postFinder(null, results, matcherOut, xml);
                        } else {
                            push.apply(results, matcherOut);
                        }
                    }
                });
            }

            function matcherFromTokens(tokens) {
                var checkContext, matcher, j,
                    len = tokens.length,
                    leadingRelative = Expr.relative[tokens[0].type],
                    implicitRelative = leadingRelative || Expr.relative[" "],
                    i = leadingRelative ? 1 : 0,

                    // The foundational matcher ensures that elements are reachable from top-level context(s)
                    matchContext = addCombinator(function(elem) {
                        return elem === checkContext;
                    }, implicitRelative, true),
                    matchAnyContext = addCombinator(function(elem) {
                        return indexOf(checkContext, elem) > -1;
                    }, implicitRelative, true),
                    matchers = [function(elem, context, xml) {
                        var ret = (!leadingRelative && (xml || context !== outermostContext)) || (
                            (checkContext = context).nodeType ?
                            matchContext(elem, context, xml) :
                            matchAnyContext(elem, context, xml));
                        // Avoid hanging onto element (issue #299)
                        checkContext = null;
                        return ret;
                    }];

                for (; i < len; i++) {
                    if ((matcher = Expr.relative[tokens[i].type])) {
                        matchers = [addCombinator(elementMatcher(matchers), matcher)];
                    } else {
                        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                        // Return special upon seeing a positional matcher
                        if (matcher[expando]) {
                            // Find the next relative operator (if any) for proper handling
                            j = ++i;
                            for (; j < len; j++) {
                                if (Expr.relative[tokens[j].type]) {
                                    break;
                                }
                            }
                            return setMatcher(
                                i > 1 && elementMatcher(matchers),
                                i > 1 && toSelector(
                                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                                    tokens.slice(0, i - 1).concat({
                                        value: tokens[i - 2].type === " " ? "*" : ""
                                    })
                                ).replace(rtrim, "$1"),
                                matcher,
                                i < j && matcherFromTokens(tokens.slice(i, j)),
                                j < len && matcherFromTokens((tokens = tokens.slice(j))),
                                j < len && toSelector(tokens)
                            );
                        }
                        matchers.push(matcher);
                    }
                }

                return elementMatcher(matchers);
            }

            function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0,
                    byElement = elementMatchers.length > 0,
                    superMatcher = function(seed, context, xml, results, outermost) {
                        var elem, j, matcher,
                            matchedCount = 0,
                            i = "0",
                            unmatched = seed && [],
                            setMatched = [],
                            contextBackup = outermostContext,
                            // We must always have either seed elements or outermost context
                            elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                            // Use integer dirruns iff this is the outermost matcher
                            dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                            len = elems.length;

                        if (outermost) {
                            outermostContext = context === document || context || outermost;
                        }

                        // Add elements passing elementMatchers directly to results
                        // Support: IE<9, Safari
                        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                        for (; i !== len && (elem = elems[i]) != null; i++) {
                            if (byElement && elem) {
                                j = 0;
                                if (!context && elem.ownerDocument !== document) {
                                    setDocument(elem);
                                    xml = !documentIsHTML;
                                }
                                while ((matcher = elementMatchers[j++])) {
                                    if (matcher(elem, context || document, xml)) {
                                        results.push(elem);
                                        break;
                                    }
                                }
                                if (outermost) {
                                    dirruns = dirrunsUnique;
                                }
                            }

                            // Track unmatched elements for set filters
                            if (bySet) {
                                // They will have gone through all possible matchers
                                if ((elem = !matcher && elem)) {
                                    matchedCount--;
                                }

                                // Lengthen the array for every element, matched or not
                                if (seed) {
                                    unmatched.push(elem);
                                }
                            }
                        }

                        // `i` is now the count of elements visited above, and adding it to `matchedCount`
                        // makes the latter nonnegative.
                        matchedCount += i;

                        // Apply set filters to unmatched elements
                        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                        // no element matchers and no seed.
                        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                        // numerically zero.
                        if (bySet && i !== matchedCount) {
                            j = 0;
                            while ((matcher = setMatchers[j++])) {
                                matcher(unmatched, setMatched, context, xml);
                            }

                            if (seed) {
                                // Reintegrate element matches to eliminate the need for sorting
                                if (matchedCount > 0) {
                                    while (i--) {
                                        if (!(unmatched[i] || setMatched[i])) {
                                            setMatched[i] = pop.call(results);
                                        }
                                    }
                                }

                                // Discard index placeholder values to get only actual matches
                                setMatched = condense(setMatched);
                            }

                            // Add matches to results
                            push.apply(results, setMatched);

                            // Seedless set matches succeeding multiple successful matchers stipulate sorting
                            if (outermost && !seed && setMatched.length > 0 &&
                                (matchedCount + setMatchers.length) > 1) {

                                Sizzle.uniqueSort(results);
                            }
                        }

                        // Override manipulation of globals by nested matchers
                        if (outermost) {
                            dirruns = dirrunsUnique;
                            outermostContext = contextBackup;
                        }

                        return unmatched;
                    };

                return bySet ?
                    markFunction(superMatcher) :
                    superMatcher;
            }

            compile = Sizzle.compile = function(selector, match /* Internal Use Only */ ) {
                var i,
                    setMatchers = [],
                    elementMatchers = [],
                    cached = compilerCache[selector + " "];

                if (!cached) {
                    // Generate a function of recursive functions that can be used to check each element
                    if (!match) {
                        match = tokenize(selector);
                    }
                    i = match.length;
                    while (i--) {
                        cached = matcherFromTokens(match[i]);
                        if (cached[expando]) {
                            setMatchers.push(cached);
                        } else {
                            elementMatchers.push(cached);
                        }
                    }

                    // Cache the compiled function
                    cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

                    // Save selector and tokenization
                    cached.selector = selector;
                }
                return cached;
            };

            /**
             * A low-level selection function that works with Sizzle's compiled
             *  selector functions
             * @param {String|Function} selector A selector or a pre-compiled
             *  selector function built with Sizzle.compile
             * @param {Element} context
             * @param {Array} [results]
             * @param {Array} [seed] A set of elements to match against
             */
            select = Sizzle.select = function(selector, context, results, seed) {
                var i, tokens, token, type, find,
                    compiled = typeof selector === "function" && selector,
                    match = !seed && tokenize((selector = compiled.selector || selector));

                results = results || [];

                // Try to minimize operations if there is only one selector in the list and no seed
                // (the latter of which guarantees us context)
                if (match.length === 1) {

                    // Reduce context if the leading compound selector is an ID
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                        support.getById && context.nodeType === 9 && documentIsHTML &&
                        Expr.relative[tokens[1].type]) {

                        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                        if (!context) {
                            return results;

                            // Precompiled matchers will still verify ancestry, so step up a level
                        } else if (compiled) {
                            context = context.parentNode;
                        }

                        selector = selector.slice(tokens.shift().value.length);
                    }

                    // Fetch a seed set for right-to-left matching
                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];

                        // Abort if we hit a combinator
                        if (Expr.relative[(type = token.type)]) {
                            break;
                        }
                        if ((find = Expr.find[type])) {
                            // Search, expanding context for leading sibling combinators
                            if ((seed = find(
                                    token.matches[0].replace(runescape, funescape),
                                    rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                                ))) {

                                // If seed is empty or no tokens remain, we can return early
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, seed);
                                    return results;
                                }

                                break;
                            }
                        }
                    }
                }

                // Compile and execute a filtering function if one is not provided
                // Provide `match` to avoid retokenization if we modified the selector above
                (compiled || compile(selector, match))(
                    seed,
                    context, !documentIsHTML,
                    results, !context || rsibling.test(selector) && testContext(context.parentNode) || context
                );
                return results;
            };

            // One-time assignments

            // Sort stability
            support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

            // Support: Chrome 14-35+
            // Always assume duplicates if they aren't passed to the comparison function
            support.detectDuplicates = !!hasDuplicate;

            // Initialize against the default document
            setDocument();

            // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
            // Detached nodes confoundingly follow *each other*
            support.sortDetached = assert(function(div1) {
                // Should return 1, but returns 4 (following)
                return div1.compareDocumentPosition(document.createElement("div")) & 1;
            });

            // Support: IE<8
            // Prevent attribute/property "interpolation"
            // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
            if (!assert(function(div) {
                    div.innerHTML = "<a href='#'></a>";
                    return div.firstChild.getAttribute("href") === "#";
                })) {
                addHandle("type|href|height|width", function(elem, name, isXML) {
                    if (!isXML) {
                        return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                    }
                });
            }

            // Support: IE<9
            // Use defaultValue in place of getAttribute("value")
            if (!support.attributes || !assert(function(div) {
                    div.innerHTML = "<input/>";
                    div.firstChild.setAttribute("value", "");
                    return div.firstChild.getAttribute("value") === "";
                })) {
                addHandle("value", function(elem, name, isXML) {
                    if (!isXML && elem.nodeName.toLowerCase() === "input") {
                        return elem.defaultValue;
                    }
                });
            }

            // Support: IE<9
            // Use getAttributeNode to fetch booleans when getAttribute lies
            if (!assert(function(div) {
                    return div.getAttribute("disabled") == null;
                })) {
                addHandle(booleans, function(elem, name, isXML) {
                    var val;
                    if (!isXML) {
                        return elem[name] === true ? name.toLowerCase() :
                            (val = elem.getAttributeNode(name)) && val.specified ?
                            val.value :
                            null;
                    }
                });
            }

            return Sizzle;

        })(window);



    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;



    var dir = function(elem, dir, until) {
        var matched = [],
            truncate = until !== undefined;

        while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                    break;
                }
                matched.push(elem);
            }
        }
        return matched;
    };


    var siblings = function(n, elem) {
        var matched = [];

        for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
            }
        }

        return matched;
    };


    var rneedsContext = jQuery.expr.match.needsContext;

    var rsingleTag = (/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/);



    var risSimple = /^.[^:#\[\.,]*$/;

    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                /* jshint -W018 */
                return !!qualifier.call(elem, i, elem) !== not;
            });

        }

        if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return (elem === qualifier) !== not;
            });

        }

        if (typeof qualifier === "string") {
            if (risSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }

            qualifier = jQuery.filter(qualifier, elements);
        }

        return jQuery.grep(elements, function(elem) {
            return (jQuery.inArray(elem, qualifier) > -1) !== not;
        });
    }

    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];

        if (not) {
            expr = ":not(" + expr + ")";
        }

        return elems.length === 1 && elem.nodeType === 1 ?
            jQuery.find.matchesSelector(elem, expr) ? [elem] : [] :
            jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
                return elem.nodeType === 1;
            }));
    };

    jQuery.fn.extend({
        find: function(selector) {
            var i,
                ret = [],
                self = this,
                len = self.length;

            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }

            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }

            // Needed because $( selector, context ) becomes $( context ).find( selector )
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
            return !!winnow(
                this,

                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                typeof selector === "string" && rneedsContext.test(selector) ?
                jQuery(selector) :
                selector || [],
                false
            ).length;
        }
    });


    // Initialize a jQuery object


    // A central reference to the root jQuery(document)
    var rootjQuery,

        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        // Strict HTML recognition (#11290: must start with <)
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

        init = jQuery.fn.init = function(selector, context, root) {
            var match, elem;

            // HANDLE: $(""), $(null), $(undefined), $(false)
            if (!selector) {
                return this;
            }

            // init accepts an alternate rootjQuery
            // so migrate can support jQuery.sub (gh-2101)
            root = root || rootjQuery;

            // Handle HTML strings
            if (typeof selector === "string") {
                if (selector.charAt(0) === "<" &&
                    selector.charAt(selector.length - 1) === ">" &&
                    selector.length >= 3) {

                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [null, selector, null];

                } else {
                    match = rquickExpr.exec(selector);
                }

                // Match html or make sure no context is specified for #id
                if (match && (match[1] || !context)) {

                    // HANDLE: $(html) -> $(array)
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;

                        // scripts is true for back-compat
                        // Intentionally let the error be thrown if parseHTML is not present
                        jQuery.merge(this, jQuery.parseHTML(
                            match[1],
                            context && context.nodeType ? context.ownerDocument || context : document,
                            true
                        ));

                        // HANDLE: $(html, props)
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {

                                // Properties of context are called as methods if possible
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match]);

                                    // ...and otherwise set as attributes
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }

                        return this;

                        // HANDLE: $(#id)
                    } else {
                        elem = document.getElementById(match[2]);

                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        if (elem && elem.parentNode) {

                            // Handle the case where IE and Opera return items
                            // by name instead of ID
                            if (elem.id !== match[2]) {
                                return rootjQuery.find(selector);
                            }

                            // Otherwise, we inject the element directly into the jQuery object
                            this.length = 1;
                            this[0] = elem;
                        }

                        this.context = document;
                        this.selector = selector;
                        return this;
                    }

                    // HANDLE: $(expr, $(...))
                } else if (!context || context.jquery) {
                    return (context || root).find(selector);

                    // HANDLE: $(expr, context)
                    // (which is just equivalent to: $(context).find(expr)
                } else {
                    return this.constructor(context).find(selector);
                }

                // HANDLE: $(DOMElement)
            } else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;

                // HANDLE: $(function)
                // Shortcut for document ready
            } else if (jQuery.isFunction(selector)) {
                return typeof root.ready !== "undefined" ?
                    root.ready(selector) :

                    // Execute immediately if ready is not present
                    selector(jQuery);
            }

            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }

            return jQuery.makeArray(selector, this);
        };

    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;

    // Initialize central reference
    rootjQuery = jQuery(document);


    var rparentsprev = /^(?:parents|prev(?:Until|All))/,

        // methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };

    jQuery.fn.extend({
        has: function(target) {
            var i,
                targets = jQuery(target, this),
                len = targets.length;

            return this.filter(function() {
                for (i = 0; i < len; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },

        closest: function(selectors, context) {
            var cur,
                i = 0,
                l = this.length,
                matched = [],
                pos = rneedsContext.test(selectors) || typeof selectors !== "string" ?
                jQuery(selectors, context || this.context) :
                0;

            for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

                    // Always skip document fragments
                    if (cur.nodeType < 11 && (pos ?
                            pos.index(cur) > -1 :

                            // Don't pass non-elements to Sizzle
                            cur.nodeType === 1 &&
                            jQuery.find.matchesSelector(cur, selectors))) {

                        matched.push(cur);
                        break;
                    }
                }
            }

            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },

        // Determine the position of an element within
        // the matched set of elements
        index: function(elem) {

            // No argument, return index in parent
            if (!elem) {
                return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
            }

            // index in selector
            if (typeof elem === "string") {
                return jQuery.inArray(this[0], jQuery(elem));
            }

            // Locate the position of the desired element
            return jQuery.inArray(

                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem, this);
        },

        add: function(selector, context) {
            return this.pushStack(
                jQuery.uniqueSort(
                    jQuery.merge(this.get(), jQuery(selector, context))
                )
            );
        },

        addBack: function(selector) {
            return this.add(selector == null ?
                this.prevObject : this.prevObject.filter(selector)
            );
        }
    });

    function sibling(cur, dir) {
        do {
            cur = cur[dir];
        } while (cur && cur.nodeType !== 1);

        return cur;
    }

    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return siblings(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ?
                elem.contentDocument || elem.contentWindow.document :
                jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);

            if (name.slice(-5) !== "Until") {
                selector = until;
            }

            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret);
            }

            if (this.length > 1) {

                // Remove duplicates
                if (!guaranteedUnique[name]) {
                    ret = jQuery.uniqueSort(ret);
                }

                // Reverse order for parents* and prev-derivatives
                if (rparentsprev.test(name)) {
                    ret = ret.reverse();
                }
            }

            return this.pushStack(ret);
        };
    });
    var rnotwhite = (/\S+/g);



    // Convert String-formatted options into Object-formatted ones
    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }

    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function(options) {

        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            createOptions(options) :
            jQuery.extend({}, options);

        var // Flag to know if list is currently firing
            firing,

            // Last fire value for non-forgettable lists
            memory,

            // Flag to know if list was already fired
            fired,

            // Flag to prevent firing
            locked,

            // Actual callback list
            list = [],

            // Queue of execution data for repeatable lists
            queue = [],

            // Index of currently firing callback (modified by add/remove as needed)
            firingIndex = -1,

            // Fire callbacks
            fire = function() {

                // Enforce single-firing
                locked = options.once;

                // Execute callbacks for all pending executions,
                // respecting firingIndex overrides and runtime changes
                fired = firing = true;
                for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();
                    while (++firingIndex < list.length) {

                        // Run callback and check for early termination
                        if (list[firingIndex].apply(memory[0], memory[1]) === false &&
                            options.stopOnFalse) {

                            // Jump to end and forget the data so .add doesn't re-fire
                            firingIndex = list.length;
                            memory = false;
                        }
                    }
                }

                // Forget the data if we're done with it
                if (!options.memory) {
                    memory = false;
                }

                firing = false;

                // Clean up if we're done firing for good
                if (locked) {

                    // Keep an empty list if we have data for future add calls
                    if (memory) {
                        list = [];

                        // Otherwise, this object is spent
                    } else {
                        list = "";
                    }
                }
            },

            // Actual Callbacks object
            self = {

                // Add a callback or a collection of callbacks to the list
                add: function() {
                    if (list) {

                        // If we have memory from a past run, we should fire after adding
                        if (memory && !firing) {
                            firingIndex = list.length - 1;
                            queue.push(memory);
                        }

                        (function add(args) {
                            jQuery.each(args, function(_, arg) {
                                if (jQuery.isFunction(arg)) {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && jQuery.type(arg) !== "string") {

                                    // Inspect recursively
                                    add(arg);
                                }
                            });
                        })(arguments);

                        if (memory && !firing) {
                            fire();
                        }
                    }
                    return this;
                },

                // Remove a callback from the list
                remove: function() {
                    jQuery.each(arguments, function(_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);

                            // Handle firing indexes
                            if (index <= firingIndex) {
                                firingIndex--;
                            }
                        }
                    });
                    return this;
                },

                // Check if a given callback is in the list.
                // If no argument is given, return whether or not list has callbacks attached.
                has: function(fn) {
                    return fn ?
                        jQuery.inArray(fn, list) > -1 :
                        list.length > 0;
                },

                // Remove all callbacks from the list
                empty: function() {
                    if (list) {
                        list = [];
                    }
                    return this;
                },

                // Disable .fire and .add
                // Abort any current/pending executions
                // Clear all callbacks and values
                disable: function() {
                    locked = queue = [];
                    list = memory = "";
                    return this;
                },
                disabled: function() {
                    return !list;
                },

                // Disable .fire
                // Also disable .add unless we have memory (since it would have no effect)
                // Abort any pending executions
                lock: function() {
                    locked = true;
                    if (!memory) {
                        self.disable();
                    }
                    return this;
                },
                locked: function() {
                    return !!locked;
                },

                // Call all callbacks with the given context and arguments
                fireWith: function(context, args) {
                    if (!locked) {
                        args = args || [];
                        args = [context, args.slice ? args.slice() : args];
                        queue.push(args);
                        if (!firing) {
                            fire();
                        }
                    }
                    return this;
                },

                // Call all the callbacks with the given arguments
                fire: function() {
                    self.fireWith(this, arguments);
                    return this;
                },

                // To know if the callbacks have already been called at least once
                fired: function() {
                    return !!fired;
                }
            };

        return self;
    };


    jQuery.extend({

        Deferred: function(func) {
            var tuples = [

                    // action, add listener, listener list, final state
                    ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
                    ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
                    ["notify", "progress", jQuery.Callbacks("memory")]
                ],
                state = "pending",
                promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    then: function( /* fnDone, fnFail, fnProgress */ ) {
                        var fns = arguments;
                        return jQuery.Deferred(function(newDefer) {
                            jQuery.each(tuples, function(i, tuple) {
                                var fn = jQuery.isFunction(fns[i]) && fns[i];

                                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                                deferred[tuple[1]](function() {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && jQuery.isFunction(returned.promise)) {
                                        returned.promise()
                                            .progress(newDefer.notify)
                                            .done(newDefer.resolve)
                                            .fail(newDefer.reject);
                                    } else {
                                        newDefer[tuple[0] + "With"](
                                            this === promise ? newDefer.promise() : this,
                                            fn ? [returned] : arguments
                                        );
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },

                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function(obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                },
                deferred = {};

            // Keep pipe for back-compat
            promise.pipe = promise.then;

            // Add list-specific methods
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2],
                    stateString = tuple[3];

                // promise[ done | fail | progress ] = list.add
                promise[tuple[1]] = list.add;

                // Handle state
                if (stateString) {
                    list.add(function() {

                        // state = [ resolved | rejected ]
                        state = stateString;

                        // [ reject_list | resolve_list ].disable; progress_list.lock
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }

                // deferred[ resolve | reject | notify ]
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });

            // Make the deferred a promise
            promise.promise(deferred);

            // Call given func if any
            if (func) {
                func.call(deferred, deferred);
            }

            // All done!
            return deferred;
        },

        // Deferred helper
        when: function(subordinate /* , ..., subordinateN */ ) {
            var i = 0,
                resolveValues = slice.call(arguments),
                length = resolveValues.length,

                // the count of uncompleted subordinates
                remaining = length !== 1 ||
                (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,

                // the master Deferred.
                // If resolveValues consist of only a single Deferred, just use that.
                deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

                // Update function for both resolve and progress values
                updateFunc = function(i, contexts, values) {
                    return function(value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                        if (values === progressValues) {
                            deferred.notifyWith(contexts, values);

                        } else if (!(--remaining)) {
                            deferred.resolveWith(contexts, values);
                        }
                    };
                },

                progressValues, progressContexts, resolveContexts;

            // add listeners to Deferred subordinates; treat others as resolved
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise()
                            .progress(updateFunc(i, progressContexts, progressValues))
                            .done(updateFunc(i, resolveContexts, resolveValues))
                            .fail(deferred.reject);
                    } else {
                        --remaining;
                    }
                }
            }

            // if we're not waiting on anything, resolve the master
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }

            return deferred.promise();
        }
    });


    // The deferred used on DOM ready
    var readyList;

    jQuery.fn.ready = function(fn) {

        // Add the callback
        jQuery.ready.promise().done(fn);

        return this;
    };

    jQuery.extend({

        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,

        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,

        // Hold (or release) the ready event
        holdReady: function(hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },

        // Handle when the DOM is ready
        ready: function(wait) {

            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }

            // Remember that the DOM is ready
            jQuery.isReady = true;

            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }

            // If there are functions bound, to execute
            readyList.resolveWith(document, [jQuery]);

            // Trigger any bound ready events
            if (jQuery.fn.triggerHandler) {
                jQuery(document).triggerHandler("ready");
                jQuery(document).off("ready");
            }
        }
    });

    /**
     * Clean-up method for dom ready events
     */
    function detach() {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed);
            window.removeEventListener("load", completed);

        } else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed);
        }
    }

    /**
     * The ready event handler and self cleanup method
     */
    function completed() {

        // readyState === "complete" is good enough for us to call the dom ready in oldIE
        if (document.addEventListener ||
            window.event.type === "load" ||
            document.readyState === "complete") {

            detach();
            jQuery.ready();
        }
    }

    jQuery.ready.promise = function(obj) {
        if (!readyList) {

            readyList = jQuery.Deferred();

            // Catch cases where $(document).ready() is called
            // after the browser event has already occurred.
            // we once tried to use readyState "interactive" here,
            // but it caused issues like the one
            // discovered by ChrisS here:
            // http://bugs.jquery.com/ticket/12282#comment:15
            if (document.readyState === "complete") {

                // Handle it asynchronously to allow scripts the opportunity to delay ready
                window.setTimeout(jQuery.ready);

                // Standards-based browsers support DOMContentLoaded
            } else if (document.addEventListener) {

                // Use the handy event callback
                document.addEventListener("DOMContentLoaded", completed);

                // A fallback to window.onload, that will always work
                window.addEventListener("load", completed);

                // If IE event model is used
            } else {

                // Ensure firing before onload, maybe late but safe also for iframes
                document.attachEvent("onreadystatechange", completed);

                // A fallback to window.onload, that will always work
                window.attachEvent("onload", completed);

                // If IE and not a frame
                // continually check to see if the document is ready
                var top = false;

                try {
                    top = window.frameElement == null && document.documentElement;
                } catch (e) {}

                if (top && top.doScroll) {
                    (function doScrollCheck() {
                        if (!jQuery.isReady) {

                            try {

                                // Use the trick by Diego Perini
                                // http://javascript.nwbox.com/IEContentLoaded/
                                top.doScroll("left");
                            } catch (e) {
                                return window.setTimeout(doScrollCheck, 50);
                            }

                            // detach all dom ready events
                            detach();

                            // and execute any waiting functions
                            jQuery.ready();
                        }
                    })();
                }
            }
        }
        return readyList.promise(obj);
    };

    // Kick off the DOM ready check even if the user does not
    jQuery.ready.promise();




    // Support: IE<9
    // Iteration over object's inherited properties before its own
    var i;
    for (i in jQuery(support)) {
        break;
    }
    support.ownFirst = i === "0";

    // Note: most support tests are defined in their respective modules.
    // false until the test is run
    support.inlineBlockNeedsLayout = false;

    // Execute ASAP in case we need to set body.style.zoom
    jQuery(function() {

        // Minified: var a,b,c,d
        var val, div, body, container;

        body = document.getElementsByTagName("body")[0];
        if (!body || !body.style) {

            // Return for frameset docs that don't have a body
            return;
        }

        // Setup
        div = document.createElement("div");
        container = document.createElement("div");
        container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
        body.appendChild(container).appendChild(div);

        if (typeof div.style.zoom !== "undefined") {

            // Support: IE<8
            // Check if natively block-level elements act like inline-block
            // elements when setting their display to 'inline' and giving
            // them layout
            div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

            support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
            if (val) {

                // Prevent IE 6 from affecting layout for positioned elements #11048
                // Prevent IE from shrinking the body in IE 7 mode #12869
                // Support: IE<8
                body.style.zoom = 1;
            }
        }

        body.removeChild(container);
    });


    (function() {
        var div = document.createElement("div");

        // Support: IE<9
        support.deleteExpando = true;
        try {
            delete div.test;
        } catch (e) {
            support.deleteExpando = false;
        }

        // Null elements to avoid leaks in IE.
        div = null;
    })();
    var acceptData = function(elem) {
        var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()],
            nodeType = +elem.nodeType || 1;

        // Do not set data on non-element DOM nodes because it will not be cleared (#8335).
        return nodeType !== 1 && nodeType !== 9 ?
            false :

            // Nodes accept data unless otherwise specified; rejection can be conditional
            !noData || noData !== true && elem.getAttribute("classid") === noData;
    };




    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        rmultiDash = /([A-Z])/g;

    function dataAttr(elem, key, data) {

        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {

            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();

            data = elem.getAttribute(name);

            if (typeof data === "string") {
                try {
                    data = data === "true" ? true :
                        data === "false" ? false :
                        data === "null" ? null :

                        // Only convert to a number if it doesn't change the string
                        +data + "" === data ? +data :
                        rbrace.test(data) ? jQuery.parseJSON(data) :
                        data;
                } catch (e) {}

                // Make sure we set the data so it isn't changed later
                jQuery.data(elem, key, data);

            } else {
                data = undefined;
            }
        }

        return data;
    }

    // checks a cache object for emptiness
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {

            // if the public data object is empty, the private is still empty
            if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                continue;
            }
            if (name !== "toJSON") {
                return false;
            }
        }

        return true;
    }

    function internalData(elem, name, data, pvt /* Internal Use Only */ ) {
        if (!acceptData(elem)) {
            return;
        }

        var ret, thisCache,
            internalKey = jQuery.expando,

            // We have to handle DOM nodes and JS objects differently because IE6-7
            // can't GC object references properly across the DOM-JS boundary
            isNode = elem.nodeType,

            // Only DOM nodes need the global jQuery cache; JS object data is
            // attached directly to the object so GC can occur automatically
            cache = isNode ? jQuery.cache : elem,

            // Only defining an ID for JS objects if its cache already exists allows
            // the code to shortcut on the same path as a DOM node with no cache
            id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;

        // Avoid doing any more work than we need to when trying to get data on an
        // object that has no data at all
        if ((!id || !cache[id] || (!pvt && !cache[id].data)) &&
            data === undefined && typeof name === "string") {
            return;
        }

        if (!id) {

            // Only DOM nodes need a new unique ID for each element since their data
            // ends up in the global cache
            if (isNode) {
                id = elem[internalKey] = deletedIds.pop() || jQuery.guid++;
            } else {
                id = internalKey;
            }
        }

        if (!cache[id]) {

            // Avoid exposing jQuery metadata on plain JS objects when the object
            // is serialized using JSON.stringify
            cache[id] = isNode ? {} : {
                toJSON: jQuery.noop
            };
        }

        // An object can be passed to jQuery.data instead of a key/value pair; this gets
        // shallow copied over onto the existing cache
        if (typeof name === "object" || typeof name === "function") {
            if (pvt) {
                cache[id] = jQuery.extend(cache[id], name);
            } else {
                cache[id].data = jQuery.extend(cache[id].data, name);
            }
        }

        thisCache = cache[id];

        // jQuery data() is stored in a separate object inside the object's internal data
        // cache in order to avoid key collisions between internal data and user-defined
        // data.
        if (!pvt) {
            if (!thisCache.data) {
                thisCache.data = {};
            }

            thisCache = thisCache.data;
        }

        if (data !== undefined) {
            thisCache[jQuery.camelCase(name)] = data;
        }

        // Check for both converted-to-camel and non-converted data property names
        // If a data property was specified
        if (typeof name === "string") {

            // First Try to find as-is property data
            ret = thisCache[name];

            // Test for null|undefined property data
            if (ret == null) {

                // Try to find the camelCased property
                ret = thisCache[jQuery.camelCase(name)];
            }
        } else {
            ret = thisCache;
        }

        return ret;
    }

    function internalRemoveData(elem, name, pvt) {
        if (!acceptData(elem)) {
            return;
        }

        var thisCache, i,
            isNode = elem.nodeType,

            // See jQuery.data for more information
            cache = isNode ? jQuery.cache : elem,
            id = isNode ? elem[jQuery.expando] : jQuery.expando;

        // If there is already no cache entry for this object, there is no
        // purpose in continuing
        if (!cache[id]) {
            return;
        }

        if (name) {

            thisCache = pvt ? cache[id] : cache[id].data;

            if (thisCache) {

                // Support array or space separated string names for data keys
                if (!jQuery.isArray(name)) {

                    // try the string as a key before any manipulation
                    if (name in thisCache) {
                        name = [name];
                    } else {

                        // split the camel cased version by spaces unless a key with the spaces exists
                        name = jQuery.camelCase(name);
                        if (name in thisCache) {
                            name = [name];
                        } else {
                            name = name.split(" ");
                        }
                    }
                } else {

                    // If "name" is an array of keys...
                    // When data is initially created, via ("key", "val") signature,
                    // keys will be converted to camelCase.
                    // Since there is no way to tell _how_ a key was added, remove
                    // both plain key and camelCase key. #12786
                    // This will only penalize the array argument path.
                    name = name.concat(jQuery.map(name, jQuery.camelCase));
                }

                i = name.length;
                while (i--) {
                    delete thisCache[name[i]];
                }

                // If there is no data left in the cache, we want to continue
                // and let the cache object itself get destroyed
                if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
                    return;
                }
            }
        }

        // See jQuery.data for more information
        if (!pvt) {
            delete cache[id].data;

            // Don't destroy the parent cache unless the internal data object
            // had been the only thing left in it
            if (!isEmptyDataObject(cache[id])) {
                return;
            }
        }

        // Destroy the cache
        if (isNode) {
            jQuery.cleanData([elem], true);

            // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
            /* jshint eqeqeq: false */
        } else if (support.deleteExpando || cache != cache.window) {
            /* jshint eqeqeq: true */
            delete cache[id];

            // When all else fails, undefined
        } else {
            cache[id] = undefined;
        }
    }

    jQuery.extend({
        cache: {},

        // The following elements (space-suffixed to avoid Object.prototype collisions)
        // throw uncatchable exceptions if you attempt to set expando properties
        noData: {
            "applet ": true,
            "embed ": true,

            // ...but Flash objects (which have this classid) *can* handle expandos
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },

        hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },

        data: function(elem, name, data) {
            return internalData(elem, name, data);
        },

        removeData: function(elem, name) {
            return internalRemoveData(elem, name);
        },

        // For internal use only.
        _data: function(elem, name, data) {
            return internalData(elem, name, data, true);
        },

        _removeData: function(elem, name) {
            return internalRemoveData(elem, name, true);
        }
    });

    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data,
                elem = this[0],
                attrs = elem && elem.attributes;

            // Special expections of .data basically thwart jQuery.access,
            // so implement the relevant behavior ourselves

            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data = jQuery.data(elem);

                    if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                        i = attrs.length;
                        while (i--) {

                            // Support: IE11+
                            // The attrs elements can be null (#14894)
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf("data-") === 0) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", true);
                    }
                }

                return data;
            }

            // Sets multiple values
            if (typeof key === "object") {
                return this.each(function() {
                    jQuery.data(this, key);
                });
            }

            return arguments.length > 1 ?

                // Sets one value
                this.each(function() {
                    jQuery.data(this, key, value);
                }) :

                // Gets one value
                // Try to fetch any internally stored data first
                elem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined;
        },

        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });


    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;

            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);

                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = jQuery._data(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },

        dequeue: function(elem, type) {
            type = type || "fx";

            var queue = jQuery.queue(elem, type),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks(elem, type),
                next = function() {
                    jQuery.dequeue(elem, type);
                };

            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }

            if (fn) {

                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") {
                    queue.unshift("inprogress");
                }

                // clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }

            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },

        // not intended for public consumption - generates a queueHooks object,
        // or returns the current one
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });

    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;

            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }

            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }

            return data === undefined ?
                this :
                this.each(function() {
                    var queue = jQuery.queue(this, type, data);

                    // ensure a hooks for this queue
                    jQuery._queueHooks(this, type);

                    if (type === "fx" && queue[0] !== "inprogress") {
                        jQuery.dequeue(this, type);
                    }
                });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },

        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function(type, obj) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                    if (!(--count)) {
                        defer.resolveWith(elements, [elements]);
                    }
                };

            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";

            while (i--) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });


    (function() {
        var shrinkWrapBlocksVal;

        support.shrinkWrapBlocks = function() {
            if (shrinkWrapBlocksVal != null) {
                return shrinkWrapBlocksVal;
            }

            // Will be changed later if needed.
            shrinkWrapBlocksVal = false;

            // Minified: var b,c,d
            var div, body, container;

            body = document.getElementsByTagName("body")[0];
            if (!body || !body.style) {

                // Test fired too early or in an unsupported environment, exit.
                return;
            }

            // Setup
            div = document.createElement("div");
            container = document.createElement("div");
            container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
            body.appendChild(container).appendChild(div);

            // Support: IE6
            // Check if elements with layout shrink-wrap their children
            if (typeof div.style.zoom !== "undefined") {

                // Reset CSS: box-sizing; display; margin; border
                div.style.cssText =

                    // Support: Firefox<29, Android 2.3
                    // Vendor-prefix box-sizing
                    "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
                    "box-sizing:content-box;display:block;margin:0;border:0;" +
                    "padding:1px;width:1px;zoom:1";
                div.appendChild(document.createElement("div")).style.width = "5px";
                shrinkWrapBlocksVal = div.offsetWidth !== 3;
            }

            body.removeChild(container);

            return shrinkWrapBlocksVal;
        };

    })();
    var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

    var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");


    var cssExpand = ["Top", "Right", "Bottom", "Left"];

    var isHidden = function(elem, el) {

        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" ||
            !jQuery.contains(elem.ownerDocument, elem);
    };



    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted,
            scale = 1,
            maxIterations = 20,
            currentValue = tween ?
            function() {
                return tween.cur();
            } :
            function() {
                return jQuery.css(elem, prop, "");
            },
            initial = currentValue(),
            unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),

            // Starting value computation is required for potential unit mismatches
            initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) &&
            rcssNum.exec(jQuery.css(elem, prop));

        if (initialInUnit && initialInUnit[3] !== unit) {

            // Trust units reported by jQuery.css
            unit = unit || initialInUnit[3];

            // Make sure we update the tween properties later on
            valueParts = valueParts || [];

            // Iteratively approximate from a nonzero starting point
            initialInUnit = +initial || 1;

            do {

                // If previous iteration zeroed out, double until we get *something*.
                // Use string for doubling so we don't accidentally see scale as unchanged below
                scale = scale || ".5";

                // Adjust and apply
                initialInUnit = initialInUnit / scale;
                jQuery.style(elem, prop, initialInUnit + unit);

                // Update scale, tolerating zero or NaN from tween.cur()
                // Break the loop if scale is unchanged or perfect, or if we've just had enough.
            } while (
                scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations
            );
        }

        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;

            // Apply relative offset (+=/-=) if specified
            adjusted = valueParts[1] ?
                initialInUnit + (valueParts[1] + 1) * valueParts[2] :
                +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }


    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0,
            length = elems.length,
            bulk = key == null;

        // Sets many values
        if (jQuery.type(key) === "object") {
            chainable = true;
            for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
            }

            // Sets one value
        } else if (value !== undefined) {
            chainable = true;

            if (!jQuery.isFunction(value)) {
                raw = true;
            }

            if (bulk) {

                // Bulk operations run against the entire set
                if (raw) {
                    fn.call(elems, value);
                    fn = null;

                    // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }

            if (fn) {
                for (; i < length; i++) {
                    fn(
                        elems[i],
                        key,
                        raw ? value : value.call(elems[i], i, fn(elems[i], key))
                    );
                }
            }
        }

        return chainable ?
            elems :

            // Gets
            bulk ?
            fn.call(elems) :
            length ? fn(elems[0], key) : emptyGet;
    };
    var rcheckableType = (/^(?:checkbox|radio)$/i);

    var rtagName = (/<([\w:-]+)/);

    var rscriptType = (/^$|\/(?:java|ecma)script/i);

    var rleadingWhitespace = (/^\s+/);

    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
        "details|dialog|figcaption|figure|footer|header|hgroup|main|" +
        "mark|meter|nav|output|picture|progress|section|summary|template|time|video";



    function createSafeFragment(document) {
        var list = nodeNames.split("|"),
            safeFrag = document.createDocumentFragment();

        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(
                    list.pop()
                );
            }
        }
        return safeFrag;
    }


    (function() {
        var div = document.createElement("div"),
            fragment = document.createDocumentFragment(),
            input = document.createElement("input");

        // Setup
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

        // IE strips leading whitespace when .innerHTML is used
        support.leadingWhitespace = div.firstChild.nodeType === 3;

        // Make sure that tbody elements aren't automatically inserted
        // IE will insert them into empty tables
        support.tbody = !div.getElementsByTagName("tbody").length;

        // Make sure that link elements get serialized correctly by innerHTML
        // This requires a wrapper element in IE
        support.htmlSerialize = !!div.getElementsByTagName("link").length;

        // Makes sure cloning an html5 element does not cause problems
        // Where outerHTML is undefined, this still works
        support.html5Clone =
            document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";

        // Check if a disconnected checkbox will retain its checked
        // value of true after appended to the DOM (IE6/7)
        input.type = "checkbox";
        input.checked = true;
        fragment.appendChild(input);
        support.appendChecked = input.checked;

        // Make sure textarea (and checkbox) defaultValue is properly cloned
        // Support: IE6-IE11+
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

        // #11217 - WebKit loses check when the name is after the checked attribute
        fragment.appendChild(div);

        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input = document.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");

        div.appendChild(input);

        // Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
        // old WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

        // Support: IE<9
        // Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
        support.noCloneEvent = !!div.addEventListener;

        // Support: IE<9
        // Since attributes and properties are the same in IE,
        // cleanData must set properties to undefined rather than use removeAttribute
        div[jQuery.expando] = 1;
        support.attributes = !div.getAttribute(jQuery.expando);
    })();


    // We have to close these tags to support XHTML (#13200)
    var wrapMap = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        legend: [1, "<fieldset>", "</fieldset>"],
        area: [1, "<map>", "</map>"],

        // Support: IE8
        param: [1, "<object>", "</object>"],
        thead: [1, "<table>", "</table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

        // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
        // unless wrapped in a div with non-breaking characters in front of it.
        _default: support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
    };

    // Support: IE8-IE9
    wrapMap.optgroup = wrapMap.option;

    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;


    function getAll(context, tag) {
        var elems, elem,
            i = 0,
            found = typeof context.getElementsByTagName !== "undefined" ?
            context.getElementsByTagName(tag || "*") :
            typeof context.querySelectorAll !== "undefined" ?
            context.querySelectorAll(tag || "*") :
            undefined;

        if (!found) {
            for (found = [], elems = context.childNodes || context;
                (elem = elems[i]) != null; i++
            ) {
                if (!tag || jQuery.nodeName(elem, tag)) {
                    found.push(elem);
                } else {
                    jQuery.merge(found, getAll(elem, tag));
                }
            }
        }

        return tag === undefined || tag && jQuery.nodeName(context, tag) ?
            jQuery.merge([context], found) :
            found;
    }


    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var elem,
            i = 0;
        for (;
            (elem = elems[i]) != null; i++) {
            jQuery._data(
                elem,
                "globalEval", !refElements || jQuery._data(refElements[i], "globalEval")
            );
        }
    }


    var rhtml = /<|&#?\w+;/,
        rtbody = /<tbody/i;

    function fixDefaultChecked(elem) {
        if (rcheckableType.test(elem.type)) {
            elem.defaultChecked = elem.checked;
        }
    }

    function buildFragment(elems, context, scripts, selection, ignored) {
        var j, elem, contains,
            tmp, tag, tbody, wrap,
            l = elems.length,

            // Ensure a safe fragment
            safe = createSafeFragment(context),

            nodes = [],
            i = 0;

        for (; i < l; i++) {
            elem = elems[i];

            if (elem || elem === 0) {

                // Add nodes directly
                if (jQuery.type(elem) === "object") {
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                    // Convert non-html into a text node
                } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));

                    // Convert html into DOM nodes
                } else {
                    tmp = tmp || safe.appendChild(context.createElement("div"));

                    // Deserialize a standard representation
                    tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;

                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while (j--) {
                        tmp = tmp.lastChild;
                    }

                    // Manually add leading whitespace removed by IE
                    if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                        nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                    }

                    // Remove IE's autoinserted <tbody> from table fragments
                    if (!support.tbody) {

                        // String was a <table>, *may* have spurious <tbody>
                        elem = tag === "table" && !rtbody.test(elem) ?
                            tmp.firstChild :

                            // String was a bare <thead> or <tfoot>
                            wrap[1] === "<table>" && !rtbody.test(elem) ?
                            tmp :
                            0;

                        j = elem && elem.childNodes.length;
                        while (j--) {
                            if (jQuery.nodeName((tbody = elem.childNodes[j]), "tbody") &&
                                !tbody.childNodes.length) {

                                elem.removeChild(tbody);
                            }
                        }
                    }

                    jQuery.merge(nodes, tmp.childNodes);

                    // Fix #12392 for WebKit and IE > 9
                    tmp.textContent = "";

                    // Fix #12392 for oldIE
                    while (tmp.firstChild) {
                        tmp.removeChild(tmp.firstChild);
                    }

                    // Remember the top-level container for proper cleanup
                    tmp = safe.lastChild;
                }
            }
        }

        // Fix #11356: Clear elements from fragment
        if (tmp) {
            safe.removeChild(tmp);
        }

        // Reset defaultChecked for any radios and checkboxes
        // about to be appended to the DOM in IE 6/7 (#8060)
        if (!support.appendChecked) {
            jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
        }

        i = 0;
        while ((elem = nodes[i++])) {

            // Skip elements already in the context collection (trac-4087)
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                    ignored.push(elem);
                }

                continue;
            }

            contains = jQuery.contains(elem.ownerDocument, elem);

            // Append to fragment
            tmp = getAll(safe.appendChild(elem), "script");

            // Preserve script evaluation history
            if (contains) {
                setGlobalEval(tmp);
            }

            // Capture executables
            if (scripts) {
                j = 0;
                while ((elem = tmp[j++])) {
                    if (rscriptType.test(elem.type || "")) {
                        scripts.push(elem);
                    }
                }
            }
        }

        tmp = null;

        return safe;
    }


    (function() {
        var i, eventName,
            div = document.createElement("div");

        // Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
        for (i in {
                submit: true,
                change: true,
                focusin: true
            }) {
            eventName = "on" + i;

            if (!(support[i] = eventName in window)) {

                // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
                div.setAttribute(eventName, "t");
                support[i] = div.attributes[eventName].expando === false;
            }
        }

        // Null elements to avoid leaks in IE.
        div = null;
    })();


    var rformElems = /^(?:input|select|textarea)$/i,
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

    function returnTrue() {
        return true;
    }

    function returnFalse() {
        return false;
    }

    // Support: IE9
    // See #13393 for more info
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }

    function on(elem, types, selector, data, fn, one) {
        var origFn, type;

        // Types can be a map of types/handlers
        if (typeof types === "object") {

            // ( types-Object, selector, data )
            if (typeof selector !== "string") {

                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for (type in types) {
                on(elem, type, selector, data, types[type], one);
            }
            return elem;
        }

        if (data == null && fn == null) {

            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === "string") {

                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {

                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) {
            fn = returnFalse;
        } else if (!fn) {
            return elem;
        }

        if (one === 1) {
            origFn = fn;
            fn = function(event) {

                // Can use an empty set, since event contains the info
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };

            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }

    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {

        global: {},

        add: function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn,
                special, eventHandle, handleObj,
                handlers, type, namespaces, origType,
                elemData = jQuery._data(elem);

            // Don't attach events to noData or text/comment nodes (but allow plain objects)
            if (!elemData) {
                return;
            }

            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }

            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }

            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {

                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== "undefined" &&
                        (!e || jQuery.event.triggered !== e.type) ?
                        jQuery.event.dispatch.apply(eventHandle.elem, arguments) :
                        undefined;
                };

                // Add elem as a property of the handle fn to prevent a memory leak
                // with IE non-native events
                eventHandle.elem = elem;
            }

            // Handle multiple events separated by a space
            types = (types || "").match(rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // There *must* be a type, no attaching namespace-only handlers
                if (!type) {
                    continue;
                }

                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {};

                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;

                // Update special based on newly reset type
                special = jQuery.event.special[type] || {};

                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);

                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener/attachEvent if the special events handler returns false
                    if (!special.setup ||
                        special.setup.call(elem, data, namespaces, eventHandle) === false) {

                        // Bind the global event handler to the element
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);

                        } else if (elem.attachEvent) {
                            elem.attachEvent("on" + type, eventHandle);
                        }
                    }
                }

                if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }

                // Add to the element's handler list, delegates in front
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }

                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
            }

            // Nullify elem to prevent memory leaks in IE
            elem = null;
        },

        // Detach an event or set of events from an element
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp,
                origCount, t, events,
                special, handlers, type,
                namespaces, origType,
                elemData = jQuery.hasData(elem) && jQuery._data(elem);

            if (!elemData || !(events = elemData.events)) {
                return;
            }

            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }

                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] &&
                    new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

                // Remove matching events
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];

                    if ((mappedTypes || origType === handleObj.origType) &&
                        (!handler || handler.guid === handleObj.guid) &&
                        (!tmp || tmp.test(handleObj.namespace)) &&
                        (!selector || selector === handleObj.selector ||
                            selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);

                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown ||
                        special.teardown.call(elem, namespaces, elemData.handle) === false) {

                        jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    delete events[type];
                }
            }

            // Remove the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;

                // removeData also checks for emptiness and clears the expando if empty
                // so use it instead of delete
                jQuery._removeData(elem, "events");
            }
        },

        trigger: function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur,
                bubbleType, special, tmp, i,
                eventPath = [elem || document],
                type = hasOwn.call(event, "type") ? event.type : event,
                namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

            cur = tmp = elem = elem || document;

            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }

            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }

            if (type.indexOf(".") > -1) {

                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;

            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ?
                event :
                new jQuery.Event(type, typeof event === "object" && event);

            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ?
                new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
                null;

            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }

            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ? [event] :
                jQuery.makeArray(data, [event]);

            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }

            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }

            // Fire handlers on the event path
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;

                // jQuery handler
                handle = (jQuery._data(cur, "events") || {})[event.type] &&
                    jQuery._data(cur, "handle");

                if (handle) {
                    handle.apply(cur, data);
                }

                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;

            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {

                if (
                    (!special._default ||
                        special._default.apply(eventPath.pop(), data) === false
                    ) && acceptData(elem)
                ) {

                    // Call a native DOM method on the target with the same name name as the event.
                    // Can't use an .isFunction() check here because IE6/7 fails that test.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if (ontype && elem[type] && !jQuery.isWindow(elem)) {

                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];

                        if (tmp) {
                            elem[ontype] = null;
                        }

                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        } catch (e) {

                            // IE<9 dies on focus/blur to hidden element (#1486,#12518)
                            // only reproducible on winXP IE8 native, not IE9 in IE8 mode
                        }
                        jQuery.event.triggered = undefined;

                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }

            return event.result;
        },

        dispatch: function(event) {

            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix(event);

            var i, j, ret, matched, handleObj,
                handlerQueue = [],
                args = slice.call(arguments),
                handlers = (jQuery._data(this, "events") || {})[event.type] || [],
                special = jQuery.event.special[event.type] || {};

            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;

            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }

            // Determine handlers
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);

            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;

                j = 0;
                while ((handleObj = matched.handlers[j++]) &&
                    !event.isImmediatePropagationStopped()) {

                    // Triggered event must either 1) have no namespace, or 2) have namespace(s)
                    // a subset or equal to those in the bound event (both can have no namespace).
                    if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

                        event.handleObj = handleObj;
                        event.data = handleObj.data;

                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle ||
                            handleObj.handler).apply(matched.elem, args);

                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }

            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }

            return event.result;
        },

        handlers: function(event, handlers) {
            var i, matches, sel, handleObj,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;

            // Support (at least): Chrome, IE9
            // Find delegate handlers
            // Black-hole SVG <use> instance trees (#13180)
            //
            // Support: Firefox<=42+
            // Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
            if (delegateCount && cur.nodeType &&
                (event.type !== "click" || isNaN(event.button) || event.button < 1)) {

                /* jshint eqeqeq: false */
                for (; cur != this; cur = cur.parentNode || this) {
                    /* jshint eqeqeq: true */

                    // Don't check non-elements (#13208)
                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];

                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + " ";

                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ?
                                    jQuery(sel, this).index(cur) > -1 :
                                    jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }

            // Add the remaining (directly-bound) handlers
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }

            return handlerQueue;
        },

        fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }

            // Create a writable copy of the event object and normalize some properties
            var i, prop, copy,
                type = event.type,
                originalEvent = event,
                fixHook = this.fixHooks[type];

            if (!fixHook) {
                this.fixHooks[type] = fixHook =
                    rmouseEvent.test(type) ? this.mouseHooks :
                    rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

            event = new jQuery.Event(originalEvent);

            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }

            // Support: IE<9
            // Fix target property (#1925)
            if (!event.target) {
                event.target = originalEvent.srcElement || document;
            }

            // Support: Safari 6-8+
            // Target should not be a text node (#504, #13143)
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }

            // Support: IE<9
            // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
            event.metaKey = !!event.metaKey;

            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },

        // Includes some event props shared by KeyEvent and MouseEvent
        props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
            "metaKey relatedTarget shiftKey target timeStamp view which").split(" "),

        fixHooks: {},

        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {

                // Add which for key events
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }

                return event;
            }
        },

        mouseHooks: {
            props: ("button buttons clientX clientY fromElement offsetX offsetY " +
                "pageX pageY screenX screenY toElement").split(" "),
            filter: function(event, original) {
                var body, eventDoc, doc,
                    button = original.button,
                    fromElement = original.fromElement;

                // Calculate pageX/Y if missing and clientX/Y available
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;

                    event.pageX = original.clientX +
                        (doc && doc.scrollLeft || body && body.scrollLeft || 0) -
                        (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY +
                        (doc && doc.scrollTop || body && body.scrollTop || 0) -
                        (doc && doc.clientTop || body && body.clientTop || 0);
                }

                // Add relatedTarget, if necessary
                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ?
                        original.toElement :
                        fromElement;
                }

                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if (!event.which && button !== undefined) {
                    event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
                }

                return event;
            }
        },

        special: {
            load: {

                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            focus: {

                // Fire native event if possible so blur/focus sequence is correct
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) {
                        try {
                            this.focus();
                            return false;
                        } catch (e) {

                            // Support: IE<9
                            // If we error on focus to hidden element (#1486, #12518),
                            // let .trigger() run the handlers
                        }
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {

                // For checkbox, fire native event so checked state will be right
                trigger: function() {
                    if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
                        this.click();
                        return false;
                    }
                },

                // For cross-browser consistency, don't fire native .click() on links
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },

            beforeunload: {
                postDispatch: function(event) {

                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },

        // Piggyback on a donor event to simulate a different one
        simulate: function(type, elem, event) {
            var e = jQuery.extend(
                new jQuery.Event(),
                event, {
                    type: type,
                    isSimulated: true

                    // Previously, `originalEvent: {}` was set here, so stopPropagation call
                    // would not be triggered on donor event, since in our own
                    // jQuery.event.stopPropagation function we had a check for existence of
                    // originalEvent.stopPropagation method, so, consequently it would be a noop.
                    //
                    // Guard for simulated events was moved to jQuery.event.stopPropagation function
                    // since `originalEvent` should point to the original event for the
                    // constancy with other events and for more focused logic
                }
            );

            jQuery.event.trigger(e, null, elem);

            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };

    jQuery.removeEvent = document.removeEventListener ?
        function(elem, type, handle) {

            // This "if" is needed for plain objects
            if (elem.removeEventListener) {
                elem.removeEventListener(type, handle);
            }
        } :
        function(elem, type, handle) {
            var name = "on" + type;

            if (elem.detachEvent) {

                // #8545, #7054, preventing memory leaks for custom events in IE6-8
                // detachEvent needed property on element, by name of that event,
                // to properly expose it to GC
                if (typeof elem[name] === "undefined") {
                    elem[name] = null;
                }

                elem.detachEvent(name, handle);
            }
        };

    jQuery.Event = function(src, props) {

        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }

        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented ||
                src.defaultPrevented === undefined &&

                // Support: IE < 9, Android < 4.0
                src.returnValue === false ?
                returnTrue :
                returnFalse;

            // Event type
        } else {
            this.type = src;
        }

        // Put explicitly provided properties onto the event object
        if (props) {
            jQuery.extend(this, props);
        }

        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();

        // Mark it as fixed
        this[jQuery.expando] = true;
    };

    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,

        preventDefault: function() {
            var e = this.originalEvent;

            this.isDefaultPrevented = returnTrue;
            if (!e) {
                return;
            }

            // If preventDefault exists, run it on the original event
            if (e.preventDefault) {
                e.preventDefault();

                // Support: IE
                // Otherwise set the returnValue property of the original event to false
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;

            this.isPropagationStopped = returnTrue;

            if (!e || this.isSimulated) {
                return;
            }

            // If stopPropagation exists, run it on the original event
            if (e.stopPropagation) {
                e.stopPropagation();
            }

            // Support: IE
            // Set the cancelBubble property of the original event to true
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;

            this.isImmediatePropagationStopped = returnTrue;

            if (e && e.stopImmediatePropagation) {
                e.stopImmediatePropagation();
            }

            this.stopPropagation();
        }
    };

    // Create mouseenter/leave events using mouseover/out and event-time checks
    // so that event delegation works in jQuery.
    // Do the same for pointerenter/pointerleave and pointerover/pointerout
    //
    // Support: Safari 7 only
    // Safari sends mouseenter too often; see:
    // https://code.google.com/p/chromium/issues/detail?id=470258
    // for the description of the bug (it existed in older Chrome versions as well).
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,

            handle: function(event) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;

                // For mouseenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });

    // IE submit delegation
    if (!support.submit) {

        jQuery.event.special.submit = {
            setup: function() {

                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }

                // Lazy-add a submit handler when a descendant form may potentially be submitted
                jQuery.event.add(this, "click._submit keypress._submit", function(e) {

                    // Node name check avoids a VML-related crash in IE (#9807)
                    var elem = e.target,
                        form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ?

                        // Support: IE <=8
                        // We use jQuery.prop instead of elem.form
                        // to allow fixing the IE8 delegated submit issue (gh-2332)
                        // by 3rd party polyfills/workarounds.
                        jQuery.prop(elem, "form") :
                        undefined;

                    if (form && !jQuery._data(form, "submit")) {
                        jQuery.event.add(form, "submit._submit", function(event) {
                            event._submitBubble = true;
                        });
                        jQuery._data(form, "submit", true);
                    }
                });

                // return undefined since we don't need an event listener
            },

            postDispatch: function(event) {

                // If form was submitted by the user, bubble the event up the tree
                if (event._submitBubble) {
                    delete event._submitBubble;
                    if (this.parentNode && !event.isTrigger) {
                        jQuery.event.simulate("submit", this.parentNode, event);
                    }
                }
            },

            teardown: function() {

                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }

                // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                jQuery.event.remove(this, "._submit");
            }
        };
    }

    // IE change delegation and checkbox/radio fix
    if (!support.change) {

        jQuery.event.special.change = {

            setup: function() {

                if (rformElems.test(this.nodeName)) {

                    // IE doesn't fire change on a check/radio until blur; trigger it on click
                    // after a propertychange. Eat the blur-change in special.change.handle.
                    // This still fires onchange a second time for check/radio after blur.
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function(event) {
                            if (event.originalEvent.propertyName === "checked") {
                                this._justChanged = true;
                            }
                        });
                        jQuery.event.add(this, "click._change", function(event) {
                            if (this._justChanged && !event.isTrigger) {
                                this._justChanged = false;
                            }

                            // Allow triggered, simulated change events (#11500)
                            jQuery.event.simulate("change", this, event);
                        });
                    }
                    return false;
                }

                // Delegated event; lazy-add a change handler on descendant inputs
                jQuery.event.add(this, "beforeactivate._change", function(e) {
                    var elem = e.target;

                    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "change")) {
                        jQuery.event.add(elem, "change._change", function(event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate("change", this.parentNode, event);
                            }
                        });
                        jQuery._data(elem, "change", true);
                    }
                });
            },

            handle: function(event) {
                var elem = event.target;

                // Swallow native change events from checkbox/radio, we already triggered them above
                if (this !== elem || event.isSimulated || event.isTrigger ||
                    (elem.type !== "radio" && elem.type !== "checkbox")) {

                    return event.handleObj.handler.apply(this, arguments);
                }
            },

            teardown: function() {
                jQuery.event.remove(this, "._change");

                return !rformElems.test(this.nodeName);
            }
        };
    }

    // Support: Firefox
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome, Safari
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
    if (!support.focusin) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {

            // Attach a single capturing handler on the document while someone wants focusin/focusout
            var handler = function(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };

            jQuery.event.special[fix] = {
                setup: function() {
                    var doc = this.ownerDocument || this,
                        attaches = jQuery._data(doc, fix);

                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    jQuery._data(doc, fix, (attaches || 0) + 1);
                },
                teardown: function() {
                    var doc = this.ownerDocument || this,
                        attaches = jQuery._data(doc, fix) - 1;

                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        jQuery._removeData(doc, fix);
                    } else {
                        jQuery._data(doc, fix, attaches);
                    }
                }
            };
        });
    }

    jQuery.fn.extend({

        on: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {

                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(
                    handleObj.namespace ?
                    handleObj.origType + "." + handleObj.namespace :
                    handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if (typeof types === "object") {

                // ( types-object [, selector] )
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {

                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },

        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });


    var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
        rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

        // Support: IE 10-11, Edge 10240+
        // In IE/Edge using regex groups here causes severe slowdowns.
        // See https://connect.microsoft.com/IE/feedback/details/1736512/
        rnoInnerhtml = /<script|<style|<link/i,

        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
        safeFragment = createSafeFragment(document),
        fragmentDiv = safeFragment.appendChild(document.createElement("div"));

    // Support: IE<8
    // Manipulating tables requires a tbody
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") &&
            jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ?

            elem.getElementsByTagName("tbody")[0] ||
            elem.appendChild(elem.ownerDocument.createElement("tbody")) :
            elem;
    }

    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
        elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
        return elem;
    }

    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }

    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }

        var type, i, l,
            oldData = jQuery._data(src),
            curData = jQuery._data(dest, oldData),
            events = oldData.events;

        if (events) {
            delete curData.handle;
            curData.events = {};

            for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                }
            }
        }

        // make the cloned public data object a copy from the original
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data);
        }
    }

    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;

        // We do not need to do anything for non-Elements
        if (dest.nodeType !== 1) {
            return;
        }

        nodeName = dest.nodeName.toLowerCase();

        // IE6-8 copies events bound via attachEvent when using cloneNode.
        if (!support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);

            for (e in data.events) {
                jQuery.removeEvent(dest, e, data.handle);
            }

            // Event data gets referenced instead of copied if the expando gets copied too
            dest.removeAttribute(jQuery.expando);
        }

        // IE blanks contents when cloning scripts, and tries to evaluate newly-set text
        if (nodeName === "script" && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest);

            // IE6-10 improperly clones children of object elements using classid.
            // IE10 throws NoModificationAllowedError if parent is null, #12132.
        } else if (nodeName === "object") {
            if (dest.parentNode) {
                dest.outerHTML = src.outerHTML;
            }

            // This path appears unavoidable for IE9. When cloning an object
            // element in IE9, the outerHTML strategy above is not sufficient.
            // If the src has innerHTML and the destination does not,
            // copy the src.innerHTML into the dest.innerHTML. #10324
            if (support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
                dest.innerHTML = src.innerHTML;
            }

        } else if (nodeName === "input" && rcheckableType.test(src.type)) {

            // IE6-8 fails to persist the checked state of a cloned checkbox
            // or radio button. Worse, IE6-7 fail to give the cloned element
            // a checked appearance if the defaultChecked value isn't also set

            dest.defaultChecked = dest.checked = src.checked;

            // IE6-7 get confused and end up setting the value of a cloned
            // checkbox/radio button to an empty string instead of "on"
            if (dest.value !== src.value) {
                dest.value = src.value;
            }

            // IE6-8 fails to return the selected option to the default selected
            // state when cloning options
        } else if (nodeName === "option") {
            dest.defaultSelected = dest.selected = src.defaultSelected;

            // IE6-8 fails to set the defaultValue to the correct value when
            // cloning other types of input fields
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }

    function domManip(collection, args, callback, ignored) {

        // Flatten any nested arrays
        args = concat.apply([], args);

        var first, node, hasScripts,
            scripts, doc, fragment,
            i = 0,
            l = collection.length,
            iNoClone = l - 1,
            value = args[0],
            isFunction = jQuery.isFunction(value);

        // We can't cloneNode fragments that contain checked, in WebKit
        if (isFunction ||
            (l > 1 && typeof value === "string" &&
                !support.checkClone && rchecked.test(value))) {
            return collection.each(function(index) {
                var self = collection.eq(index);
                if (isFunction) {
                    args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
            });
        }

        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;

            if (fragment.childNodes.length === 1) {
                fragment = first;
            }

            // Require either new content or an interest in ignored elements to invoke the callback
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;

                // Use the original fragment for the last item
                // instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for (; i < l; i++) {
                    node = fragment;

                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);

                        // Keep references to cloned scripts for later restoration
                        if (hasScripts) {

                            // Support: Android<4.1, PhantomJS<2
                            // push.apply(_, arraylike) throws on ancient WebKit
                            jQuery.merge(scripts, getAll(node, "script"));
                        }
                    }

                    callback.call(collection[i], node, i);
                }

                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;

                    // Reenable scripts
                    jQuery.map(scripts, restoreScript);

                    // Evaluate executable scripts on first document insertion
                    for (i = 0; i < hasScripts; i++) {
                        node = scripts[i];
                        if (rscriptType.test(node.type || "") &&
                            !jQuery._data(node, "globalEval") &&
                            jQuery.contains(doc, node)) {

                            if (node.src) {

                                // Optional AJAX dependency, but won't run scripts if not present
                                if (jQuery._evalUrl) {
                                    jQuery._evalUrl(node.src);
                                }
                            } else {
                                jQuery.globalEval(
                                    (node.text || node.textContent || node.innerHTML || "")
                                    .replace(rcleanScript, "")
                                );
                            }
                        }
                    }
                }

                // Fix #11809: Avoid leaking memory
                fragment = first = null;
            }
        }

        return collection;
    }

    function remove(elem, selector, keepData) {
        var node,
            elems = selector ? jQuery.filter(selector, elem) : elem,
            i = 0;

        for (;
            (node = elems[i]) != null; i++) {

            if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
            }

            if (node.parentNode) {
                if (keepData && jQuery.contains(node.ownerDocument, node)) {
                    setGlobalEval(getAll(node, "script"));
                }
                node.parentNode.removeChild(node);
            }
        }

        return elem;
    }

    jQuery.extend({
        htmlPrefilter: function(html) {
            return html.replace(rxhtmlTag, "<$1></$2>");
        },

        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements,
                inPage = jQuery.contains(elem.ownerDocument, elem);

            if (support.html5Clone || jQuery.isXMLDoc(elem) ||
                !rnoshimcache.test("<" + elem.nodeName + ">")) {

                clone = elem.cloneNode(true);

                // IE<=8 does not properly clone detached, unknown element nodes
            } else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }

            if ((!support.noCloneEvent || !support.noCloneChecked) &&
                (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);

                // Fix all IE cloning issues
                for (i = 0;
                    (node = srcElements[i]) != null; ++i) {

                    // Ensure that the destination node is not null; Fixes #9587
                    if (destElements[i]) {
                        fixCloneNodeIssues(node, destElements[i]);
                    }
                }
            }

            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);

                    for (i = 0;
                        (node = srcElements[i]) != null; i++) {
                        cloneCopyEvent(node, destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }

            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }

            destElements = srcElements = node = null;

            // Return the cloned set
            return clone;
        },

        cleanData: function(elems, /* internal */ forceAcceptData) {
            var elem, type, id, data,
                i = 0,
                internalKey = jQuery.expando,
                cache = jQuery.cache,
                attributes = support.attributes,
                special = jQuery.event.special;

            for (;
                (elem = elems[i]) != null; i++) {
                if (forceAcceptData || acceptData(elem)) {

                    id = elem[internalKey];
                    data = id && cache[id];

                    if (data) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);

                                    // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }

                        // Remove cache only if it was not already removed by jQuery.event.remove
                        if (cache[id]) {

                            delete cache[id];

                            // Support: IE<9
                            // IE does not allow us to delete expando properties from nodes
                            // IE creates expando attributes along with the property
                            // IE does not have a removeAttribute function on Document nodes
                            if (!attributes && typeof elem.removeAttribute !== "undefined") {
                                elem.removeAttribute(internalKey);

                                // Webkit & Blink performance suffers when deleting properties
                                // from DOM nodes, so set to undefined instead
                                // https://code.google.com/p/chromium/issues/detail?id=378607
                            } else {
                                elem[internalKey] = undefined;
                            }

                            deletedIds.push(id);
                        }
                    }
                }
            }
        }
    });

    jQuery.fn.extend({

        // Keep domManip exposed until 3.0 (gh-2225)
        domManip: domManip,

        detach: function(selector) {
            return remove(this, selector, true);
        },

        remove: function(selector) {
            return remove(this, selector);
        },

        text: function(value) {
            return access(this, function(value) {
                return value === undefined ?
                    jQuery.text(this) :
                    this.empty().append(
                        (this[0] && this[0].ownerDocument || document).createTextNode(value)
                    );
            }, null, value, arguments.length);
        },

        append: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },

        prepend: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },

        before: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },

        after: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },

        empty: function() {
            var elem,
                i = 0;

            for (;
                (elem = this[i]) != null; i++) {

                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                }

                // Remove any remaining nodes
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild);
                }

                // If this is a select, ensure that it displays empty (#12336)
                // Support: IE<9
                if (elem.options && jQuery.nodeName(elem, "select")) {
                    elem.options.length = 0;
                }
            }

            return this;
        },

        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },

        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;

                if (value === undefined) {
                    return elem.nodeType === 1 ?
                        elem.innerHTML.replace(rinlinejQuery, "") :
                        undefined;
                }

                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) &&
                    (support.htmlSerialize || !rnoshimcache.test(value)) &&
                    (support.leadingWhitespace || !rleadingWhitespace.test(value)) &&
                    !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

                    value = jQuery.htmlPrefilter(value);

                    try {
                        for (; i < l; i++) {

                            // Remove element nodes and prevent memory leaks
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                    } catch (e) {}
                }

                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },

        replaceWith: function() {
            var ignored = [];

            // Make the changes, replacing each non-ignored context element with the new content
            return domManip(this, arguments, function(elem) {
                var parent = this.parentNode;

                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                        parent.replaceChild(elem, this);
                    }
                }

                // Force callback invocation
            }, ignored);
        }
    });

    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems,
                i = 0,
                ret = [],
                insert = jQuery(selector),
                last = insert.length - 1;

            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);

                // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
                push.apply(ret, elems.get());
            }

            return this.pushStack(ret);
        };
    });


    var iframe,
        elemdisplay = {

            // Support: Firefox
            // We have to pre-define these values for FF (#10227)
            HTML: "block",
            BODY: "block"
        };

    /**
     * Retrieve the actual display of a element
     * @param {String} name nodeName of the element
     * @param {Object} doc Document object
     */

    // Called only from within defaultDisplay
    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body),

            display = jQuery.css(elem[0], "display");

        // We don't have any data stored on the element,
        // so use "detach" method as fast way to get rid of the element
        elem.detach();

        return display;
    }

    /**
     * Try to determine the default display value of an element
     * @param {String} nodeName
     */
    function defaultDisplay(nodeName) {
        var doc = document,
            display = elemdisplay[nodeName];

        if (!display) {
            display = actualDisplay(nodeName, doc);

            // If the simple way fails, read from inside an iframe
            if (display === "none" || !display) {

                // Use the already-created iframe if possible
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>"))
                    .appendTo(doc.documentElement);

                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;

                // Support: IE
                doc.write();
                doc.close();

                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }

            // Store the correct default display
            elemdisplay[nodeName] = display;
        }

        return display;
    }
    var rmargin = (/^margin/);

    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

    var swap = function(elem, options, callback, args) {
        var ret, name,
            old = {};

        // Remember the old values, and insert the new ones
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }

        ret = callback.apply(elem, args || []);

        // Revert the old values
        for (name in options) {
            elem.style[name] = old[name];
        }

        return ret;
    };


    var documentElement = document.documentElement;



    (function() {
        var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
            reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
            container = document.createElement("div"),
            div = document.createElement("div");

        // Finish early in limited (non-browser) environments
        if (!div.style) {
            return;
        }

        div.style.cssText = "float:left;opacity:.5";

        // Support: IE<9
        // Make sure that element opacity exists (as opposed to filter)
        support.opacity = div.style.opacity === "0.5";

        // Verify style float existence
        // (IE uses styleFloat instead of cssFloat)
        support.cssFloat = !!div.style.cssFloat;

        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";

        container = document.createElement("div");
        container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
            "padding:0;margin-top:1px;position:absolute";
        div.innerHTML = "";
        container.appendChild(div);

        // Support: Firefox<29, Android 2.3
        // Vendor-prefix box-sizing
        support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
            div.style.WebkitBoxSizing === "";

        jQuery.extend(support, {
            reliableHiddenOffsets: function() {
                if (pixelPositionVal == null) {
                    computeStyleTests();
                }
                return reliableHiddenOffsetsVal;
            },

            boxSizingReliable: function() {

                // We're checking for pixelPositionVal here instead of boxSizingReliableVal
                // since that compresses better and they're computed together anyway.
                if (pixelPositionVal == null) {
                    computeStyleTests();
                }
                return boxSizingReliableVal;
            },

            pixelMarginRight: function() {

                // Support: Android 4.0-4.3
                if (pixelPositionVal == null) {
                    computeStyleTests();
                }
                return pixelMarginRightVal;
            },

            pixelPosition: function() {
                if (pixelPositionVal == null) {
                    computeStyleTests();
                }
                return pixelPositionVal;
            },

            reliableMarginRight: function() {

                // Support: Android 2.3
                if (pixelPositionVal == null) {
                    computeStyleTests();
                }
                return reliableMarginRightVal;
            },

            reliableMarginLeft: function() {

                // Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
                if (pixelPositionVal == null) {
                    computeStyleTests();
                }
                return reliableMarginLeftVal;
            }
        });

        function computeStyleTests() {
            var contents, divStyle,
                documentElement = document.documentElement;

            // Setup
            documentElement.appendChild(container);

            div.style.cssText =

                // Support: Android 2.3
                // Vendor-prefix box-sizing
                "-webkit-box-sizing:border-box;box-sizing:border-box;" +
                "position:relative;display:block;" +
                "margin:auto;border:1px;padding:1px;" +
                "top:1%;width:50%";

            // Support: IE<9
            // Assume reasonable values in the absence of getComputedStyle
            pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
            pixelMarginRightVal = reliableMarginRightVal = true;

            // Check for getComputedStyle so that this code is not run in IE<9.
            if (window.getComputedStyle) {
                divStyle = window.getComputedStyle(div);
                pixelPositionVal = (divStyle || {}).top !== "1%";
                reliableMarginLeftVal = (divStyle || {}).marginLeft === "2px";
                boxSizingReliableVal = (divStyle || {
                    width: "4px"
                }).width === "4px";

                // Support: Android 4.0 - 4.3 only
                // Some styles come back with percentage values, even though they shouldn't
                div.style.marginRight = "50%";
                pixelMarginRightVal = (divStyle || {
                    marginRight: "4px"
                }).marginRight === "4px";

                // Support: Android 2.3 only
                // Div with explicit width and no margin-right incorrectly
                // gets computed margin-right based on width of container (#3333)
                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                contents = div.appendChild(document.createElement("div"));

                // Reset CSS: box-sizing; display; margin; border; padding
                contents.style.cssText = div.style.cssText =

                    // Support: Android 2.3
                    // Vendor-prefix box-sizing
                    "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
                    "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                contents.style.marginRight = contents.style.width = "0";
                div.style.width = "1px";

                reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents) || {}).marginRight);

                div.removeChild(contents);
            }

            // Support: IE6-8
            // First check that getClientRects works as expected
            // Check if table cells still have offsetWidth/Height when they are set
            // to display:none and there are still other visible table cells in a
            // table row; if so, offsetWidth/Height are not reliable for use when
            // determining if an element has been hidden directly using
            // display:none (it is still safe to use offsets if a parent element is
            // hidden; don safety goggles and see bug #4512 for more information).
            div.style.display = "none";
            reliableHiddenOffsetsVal = div.getClientRects().length === 0;
            if (reliableHiddenOffsetsVal) {
                div.style.display = "";
                div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
                contents = div.getElementsByTagName("td");
                contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
                reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
                if (reliableHiddenOffsetsVal) {
                    contents[0].style.display = "";
                    contents[1].style.display = "none";
                    reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
                }
            }

            // Teardown
            documentElement.removeChild(container);
        }

    })();


    var getStyles, curCSS,
        rposition = /^(top|right|bottom|left)$/;

    if (window.getComputedStyle) {
        getStyles = function(elem) {

            // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
            // IE throws on elements created in popups
            // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
            var view = elem.ownerDocument.defaultView;

            if (!view.opener) {
                view = window;
            }

            return view.getComputedStyle(elem);
        };

        curCSS = function(elem, name, computed) {
            var width, minWidth, maxWidth, ret,
                style = elem.style;

            computed = computed || getStyles(elem);

            // getPropertyValue is only needed for .css('filter') in IE9, see #12537
            ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;

            if (computed) {

                if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                    ret = jQuery.style(elem, name);
                }

                // A tribute to the "awesome hack by Dean Edwards"
                // Chrome < 17 and Safari 5.0 uses "computed value"
                // instead of "used value" for margin-right
                // Safari 5.1.7 (at least) returns percentage for a larger set of values,
                // but width seems to be reliably pixels
                // this is against the CSSOM draft spec:
                // http://dev.w3.org/csswg/cssom/#resolved-values
                if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

                    // Remember the original values
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;

                    // Put in the new values to get a computed value out
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;

                    // Revert the changed values
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }

            // Support: IE
            // IE returns zIndex value as an integer.
            return ret === undefined ?
                ret :
                ret + "";
        };
    } else if (documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };

        curCSS = function(elem, name, computed) {
            var left, rs, rsLeft, ret,
                style = elem.style;

            computed = computed || getStyles(elem);
            ret = computed ? computed[name] : undefined;

            // Avoid setting ret to empty string here
            // so we don't default to auto
            if (ret == null && style && style[name]) {
                ret = style[name];
            }

            // From the awesome hack by Dean Edwards
            // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

            // If we're not dealing with a regular pixel number
            // but a number that has a weird ending, we need to convert it to pixels
            // but not position css attributes, as those are
            // proportional to the parent element instead
            // and we can't measure the parent instead because it
            // might trigger a "stacking dolls" problem
            if (rnumnonpx.test(ret) && !rposition.test(name)) {

                // Remember the original values
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;

                // Put in the new values to get a computed value out
                if (rsLeft) {
                    rs.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret;
                ret = style.pixelLeft + "px";

                // Revert the changed values
                style.left = left;
                if (rsLeft) {
                    rs.left = rsLeft;
                }
            }

            // Support: IE
            // IE returns zIndex value as an integer.
            return ret === undefined ?
                ret :
                ret + "" || "auto";
        };
    }




    function addGetHookIf(conditionFn, hookFn) {

        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function() {
                if (conditionFn()) {

                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }

                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }


    var

        ralpha = /alpha\([^)]*\)/i,
        ropacity = /opacity\s*=\s*([^)]*)/i,

        // swappable if display is none or starts with table except
        // "table", "table-cell", or "table-caption"
        // see here for display values:
        // https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),

        cssShow = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        cssNormalTransform = {
            letterSpacing: "0",
            fontWeight: "400"
        },

        cssPrefixes = ["Webkit", "O", "Moz", "ms"],
        emptyStyle = document.createElement("div").style;


    // return a css property mapped to a potentially vendor prefixed property
    function vendorPropName(name) {

        // shortcut for names that are not vendor prefixed
        if (name in emptyStyle) {
            return name;
        }

        // check for vendor prefixed names
        var capName = name.charAt(0).toUpperCase() + name.slice(1),
            i = cssPrefixes.length;

        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
                return name;
            }
        }
    }

    function showHide(elements, show) {
        var display, elem, hidden,
            values = [],
            index = 0,
            length = elements.length;

        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }

            values[index] = jQuery._data(elem, "olddisplay");
            display = elem.style.display;
            if (show) {

                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                if (!values[index] && display === "none") {
                    elem.style.display = "";
                }

                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] =
                        jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
                }
            } else {
                hidden = isHidden(elem);

                if (display && display !== "none" || !hidden) {
                    jQuery._data(
                        elem,
                        "olddisplay",
                        hidden ? display : jQuery.css(elem, "display")
                    );
                }
            }
        }

        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none";
            }
        }

        return elements;
    }

    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ?

            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") :
            value;
    }

    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ?

            // If we already have the right measurement, avoid augmentation
            4 :

            // Otherwise initialize for horizontal or vertical properties
            name === "width" ? 1 : 0,

            val = 0;

        for (; i < 4; i += 2) {

            // both box models exclude margin, so add it if we want it
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }

            if (isBorderBox) {

                // border-box includes padding, so remove it if we want content
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }

                // at this point, extra isn't border nor margin, so remove border
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {

                // at this point, extra isn't content, so add padding
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

                // at this point, extra isn't content nor padding, so add border
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }

        return val;
    }

    function getWidthOrHeight(elem, name, extra) {

        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            styles = getStyles(elem),
            isBorderBox = support.boxSizing &&
            jQuery.css(elem, "boxSizing", false, styles) === "border-box";

        // Support: IE11 only
        // In IE 11 fullscreen elements inside of an iframe have
        // 100x too small dimensions (gh-1764).
        if (document.msFullscreenElement && window.top !== window) {

            // Support: IE11 only
            // Running getBoundingClientRect on a disconnected node
            // in IE throws an error.
            if (elem.getClientRects().length) {
                val = Math.round(elem.getBoundingClientRect()[name] * 100);
            }
        }

        // some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {

            // Fall back to computed then uncomputed css if necessary
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }

            // Computed unit is not pixels. Stop here and return.
            if (rnumnonpx.test(val)) {
                return val;
            }

            // we need the check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox &&
                (support.boxSizingReliable() || val === elem.style[name]);

            // Normalize "", auto, and prepare for extra
            val = parseFloat(val) || 0;
        }

        // use the active box-sizing model to add/subtract irrelevant styles
        return (val +
            augmentWidthOrHeight(
                elem,
                name,
                extra || (isBorderBox ? "border" : "content"),
                valueIsBorderBox,
                styles
            )
        ) + "px";
    }

    jQuery.extend({

        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {

                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },

        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },

        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {

            // normalize float css property
            "float": support.cssFloat ? "cssFloat" : "styleFloat"
        },

        // Get and set the style property on a DOM Node
        style: function(elem, name, value, extra) {

            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }

            // Make sure that we're working with the right name
            var ret, type, hooks,
                origName = jQuery.camelCase(name),
                style = elem.style;

            name = jQuery.cssProps[origName] ||
                (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value;

                // Convert "+=" or "-=" to relative numbers (#7345)
                if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);

                    // Fixes bug #9237
                    type = "number";
                }

                // Make sure that null and NaN values aren't set. See: #7116
                if (value == null || value !== value) {
                    return;
                }

                // If a number was passed in, add the unit (except for certain CSS properties)
                if (type === "number") {
                    value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                }

                // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
                // but it would mean to define eight
                // (for every problematic property) identical functions
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }

                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) ||
                    (value = hooks.set(elem, value, extra)) !== undefined) {

                    // Support: IE
                    // Swallow errors from 'invalid' CSS values (#5509)
                    try {
                        style[name] = value;
                    } catch (e) {}
                }

            } else {

                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks &&
                    (ret = hooks.get(elem, false, extra)) !== undefined) {

                    return ret;
                }

                // Otherwise just get the value from the style object
                return style[name];
            }
        },

        css: function(elem, name, extra, styles) {
            var num, val, hooks,
                origName = jQuery.camelCase(name);

            // Make sure that we're working with the right name
            name = jQuery.cssProps[origName] ||
                (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }

            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }

            //convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }

            // Return, converting to number if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });

    jQuery.each(["height", "width"], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) {

                    // certain elements can have dimension info if we invisibly show them
                    // however, it must have a current display style that would benefit from this
                    return rdisplayswap.test(jQuery.css(elem, "display")) &&
                        elem.offsetWidth === 0 ?
                        swap(elem, cssShow, function() {
                            return getWidthOrHeight(elem, name, extra);
                        }) :
                        getWidthOrHeight(elem, name, extra);
                }
            },

            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ?
                    augmentWidthOrHeight(
                        elem,
                        name,
                        extra,
                        support.boxSizing &&
                        jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                        styles
                    ) : 0
                );
            }
        };
    });

    if (!support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function(elem, computed) {

                // IE uses filters for opacity
                return ropacity.test((computed && elem.currentStyle ?
                        elem.currentStyle.filter :
                        elem.style.filter) || "") ?
                    (0.01 * parseFloat(RegExp.$1)) + "" :
                    computed ? "1" : "";
            },

            set: function(elem, value) {
                var style = elem.style,
                    currentStyle = elem.currentStyle,
                    opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
                    filter = currentStyle && currentStyle.filter || style.filter || "";

                // IE has trouble with opacity if it does not have layout
                // Force it by setting the zoom level
                style.zoom = 1;

                // if setting opacity to 1, and no other filters exist -
                // attempt to remove filter attribute #6652
                // if value === "", then remove inline opacity #12685
                if ((value >= 1 || value === "") &&
                    jQuery.trim(filter.replace(ralpha, "")) === "" &&
                    style.removeAttribute) {

                    // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                    // if "filter:" is present at all, clearType is disabled, we want to avoid this
                    // style.removeAttribute is IE Only, but so apparently is this code path...
                    style.removeAttribute("filter");

                    // if there is no filter style applied in a css rule
                    // or unset inline opacity, we are done
                    if (value === "" || currentStyle && !currentStyle.filter) {
                        return;
                    }
                }

                // otherwise, set new filter values
                style.filter = ralpha.test(filter) ?
                    filter.replace(ralpha, opacity) :
                    filter + " " + opacity;
            }
        };
    }

    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight,
        function(elem, computed) {
            if (computed) {
                return swap(elem, {
                        "display": "inline-block"
                    },
                    curCSS, [elem, "marginRight"]);
            }
        }
    );

    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft,
        function(elem, computed) {
            if (computed) {
                return (
                    parseFloat(curCSS(elem, "marginLeft")) ||

                    // Support: IE<=11+
                    // Running getBoundingClientRect on a disconnected node in IE throws an error
                    // Support: IE8 only
                    // getClientRects() errors on disconnected elems
                    (jQuery.contains(elem.ownerDocument, elem) ?
                        elem.getBoundingClientRect().left -
                        swap(elem, {
                            marginLeft: 0
                        }, function() {
                            return elem.getBoundingClientRect().left;
                        }) :
                        0
                    )
                ) + "px";
            }
        }
    );

    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0,
                    expanded = {},

                    // assumes a single number if not a string
                    parts = typeof value === "string" ? value.split(" ") : [value];

                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] =
                        parts[i] || parts[i - 2] || parts[0];
                }

                return expanded;
            }
        };

        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });

    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len,
                    map = {},
                    i = 0;

                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;

                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }

                    return map;
                }

                return value !== undefined ?
                    jQuery.style(elem, name, value) :
                    jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }

            return this.each(function() {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });


    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;

    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];

            return hooks && hooks.get ?
                hooks.get(this) :
                Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased,
                hooks = Tween.propHooks[this.prop];

            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](
                    percent, this.options.duration * percent, 0, 1, this.options.duration
                );
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;

            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }

            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };

    Tween.prototype.init.prototype = Tween.prototype;

    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;

                // Use a property on the element directly when it is not a DOM element,
                // or when there is no matching style property that exists.
                if (tween.elem.nodeType !== 1 ||
                    tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                    return tween.elem[tween.prop];
                }

                // passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails
                // so, simple values such as "10px" are parsed to Float.
                // complex values such as "rotate(1rad)" are returned as is.
                result = jQuery.css(tween.elem, tween.prop, "");

                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {

                // use step hook for back compat - use cssHook if its there - use .style if its
                // available and use plain properties where available
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 &&
                    (tween.elem.style[jQuery.cssProps[tween.prop]] != null ||
                        jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };

    // Support: IE <=9
    // Panic based approach to setting things on disconnected nodes

    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };

    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
    };

    jQuery.fx = Tween.prototype.init;

    // Back Compat <1.8 extension point
    jQuery.fx.step = {};




    var
        fxNow, timerId,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rrun = /queueHooks$/;

    // Animations created synchronously will run synchronously
    function createFxNow() {
        window.setTimeout(function() {
            fxNow = undefined;
        });
        return (fxNow = jQuery.now());
    }

    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
        var which,
            attrs = {
                height: type
            },
            i = 0;

        // if we include width, step value is 1 to do all cssExpand values,
        // if we don't include width, step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }

        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }

        return attrs;
    }

    function createTween(value, prop, animation) {
        var tween,
            collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
            index = 0,
            length = collection.length;
        for (; index < length; index++) {
            if ((tween = collection[index].call(animation, prop, value))) {

                // we're done with this property
                return tween;
            }
        }
    }

    function defaultPrefilter(elem, props, opts) {
        /* jshint validthis: true */
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHidden(elem),
            dataShow = jQuery._data(elem, "fxshow");

        // handle queue: false promises
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;

            anim.always(function() {

                // doing this makes sure that the complete handler will be called
                // before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }

        // height/width overflow pass
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {

            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE does not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];

            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            display = jQuery.css(elem, "display");

            // Test default display if display is currently "none"
            checkDisplay = display === "none" ?
                jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

            if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {

                // inline-level elements accept inline-block;
                // block-level elements need to be inline with layout
                if (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline") {
                    style.display = "inline-block";
                } else {
                    style.zoom = 1;
                }
            }
        }

        if (opts.overflow) {
            style.overflow = "hidden";
            if (!support.shrinkWrapBlocks()) {
                anim.always(function() {
                    style.overflow = opts.overflow[0];
                    style.overflowX = opts.overflow[1];
                    style.overflowY = opts.overflow[2];
                });
            }
        }

        // show/hide pass
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {

                    // If there is dataShow left over from a stopped hide or show
                    // and we are going to proceed with show, we should pretend to be hidden
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

                // Any non-fx value stops us from restoring the original display value
            } else {
                display = undefined;
            }
        }

        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = jQuery._data(elem, "fxshow", {});
            }

            // store state if its toggle - enables .stop().toggle() to "reverse"
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function() {
                    jQuery(elem).hide();
                });
            }
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }

            // If this is a noop like .hide().hide(), restore an overwritten display value
        } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
            style.display = display;
        }
    }

    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;

        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }

            if (index !== name) {
                props[name] = value;
                delete props[index];
            }

            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];

                // not quite $.extend, this wont overwrite keys already present.
                // also - reusing 'index' from above because we have the correct "name"
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }

    function Animation(elem, properties, options) {
        var result,
            stopped,
            index = 0,
            length = Animation.prefilters.length,
            deferred = jQuery.Deferred().always(function() {

                // don't match elem in the :animated selector
                delete tick.elem;
            }),
            tick = function() {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),

                    // Support: Android 2.3
                    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;

                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }

                deferred.notifyWith(elem, [animation, percent, remaining]);

                if (percent < 1 && length) {
                    return remaining;
                } else {
                    deferred.resolveWith(elem, [animation]);
                    return false;
                }
            },
            animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {},
                    easing: jQuery.easing._default
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function(prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end,
                        animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function(gotoEnd) {
                    var index = 0,

                        // if we are going to the end, we want to run all the tweens
                        // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }

                    // resolve when we played the last frame
                    // otherwise, reject
                    if (gotoEnd) {
                        deferred.notifyWith(elem, [animation, 1, 0]);
                        deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                        deferred.rejectWith(elem, [animation, gotoEnd]);
                    }
                    return this;
                }
            }),
            props = animation.props;

        propFilter(props, animation.opts.specialEasing);

        for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                if (jQuery.isFunction(result.stop)) {
                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop =
                        jQuery.proxy(result.stop, result);
                }
                return result;
            }
        }

        jQuery.map(props, createTween, animation);

        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }

        jQuery.fx.timer(
            jQuery.extend(tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            })
        );

        // attach callbacks from options
        return animation.progress(animation.opts.progress)
            .done(animation.opts.done, animation.opts.complete)
            .fail(animation.opts.fail)
            .always(animation.opts.always);
    }

    jQuery.Animation = jQuery.extend(Animation, {

        tweeners: {
            "*": [function(prop, value) {
                var tween = this.createTween(prop, value);
                adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                return tween;
            }]
        },

        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ["*"];
            } else {
                props = props.match(rnotwhite);
            }

            var prop,
                index = 0,
                length = props.length;

            for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },

        prefilters: [defaultPrefilter],

        prefilter: function(callback, prepend) {
            if (prepend) {
                Animation.prefilters.unshift(callback);
            } else {
                Animation.prefilters.push(callback);
            }
        }
    });

    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing ||
                jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };

        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
            opt.duration in jQuery.fx.speeds ?
            jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

        // normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }

        // Queueing
        opt.old = opt.complete;

        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }

            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };

        return opt;
    };

    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {

            // show any hidden elements after setting opacity to 0
            return this.filter(isHidden).css("opacity", 0).show()

                // animate to the value specified
                .end().animate({
                    opacity: to
                }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop),
                optall = jQuery.speed(speed, easing, callback),
                doAnimation = function() {

                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation(this, jQuery.extend({}, prop), optall);

                    // Empty animations, or finishing resolves immediately
                    if (empty || jQuery._data(this, "finish")) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;

            return empty || optall.queue === false ?
                this.each(doAnimation) :
                this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };

            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }

            return this.each(function() {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = jQuery._data(this);

                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }

                for (index = timers.length; index--;) {
                    if (timers[index].elem === this &&
                        (type == null || timers[index].queue === type)) {

                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }

                // start the next in the queue if the last step wasn't forced
                // timers currently will call their complete callbacks, which will dequeue
                // but only if they were gotoEnd
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index,
                    data = jQuery._data(this),
                    queue = data[type + "queue"],
                    hooks = data[type + "queueHooks"],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                // enable finishing flag on private data
                data.finish = true;

                // empty the queue first
                jQuery.queue(this, type, []);

                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }

                // look for any active animations, and finish them
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }

                // look for any animations in the old queue and finish them
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }

                // turn off finishing flag
                delete data.finish;
            });
        }
    });

    jQuery.each(["toggle", "show", "hide"], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ?
                cssFn.apply(this, arguments) :
                this.animate(genFx(name, true), speed, easing, callback);
        };
    });

    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });

    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer,
            timers = jQuery.timers,
            i = 0;

        fxNow = jQuery.now();

        for (; i < timers.length; i++) {
            timer = timers[i];

            // Checks the timer has not already been removed
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }

        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };

    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        if (timer()) {
            jQuery.fx.start();
        } else {
            jQuery.timers.pop();
        }
    };

    jQuery.fx.interval = 13;

    jQuery.fx.start = function() {
        if (!timerId) {
            timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };

    jQuery.fx.stop = function() {
        window.clearInterval(timerId);
        timerId = null;
    };

    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,

        // Default speed
        _default: 400
    };


    // Based off of the plugin by Clint Helfers, with permission.
    // http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";

        return this.queue(type, function(next, hooks) {
            var timeout = window.setTimeout(next, time);
            hooks.stop = function() {
                window.clearTimeout(timeout);
            };
        });
    };


    (function() {
        var a,
            input = document.createElement("input"),
            div = document.createElement("div"),
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));

        // Setup
        div = document.createElement("div");
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];

        // Support: Windows Web Apps (WWA)
        // `type` must use .setAttribute for WWA (#14901)
        input.setAttribute("type", "checkbox");
        div.appendChild(input);

        a = div.getElementsByTagName("a")[0];

        // First batch of tests.
        a.style.cssText = "top:1px";

        // Test setAttribute on camelCase class.
        // If it works, we need attrFixes when doing get/setAttribute (ie6/7)
        support.getSetAttribute = div.className !== "t";

        // Get the style information from getAttribute
        // (IE uses .cssText instead)
        support.style = /top/.test(a.getAttribute("style"));

        // Make sure that URLs aren't manipulated
        // (IE normalizes it by default)
        support.hrefNormalized = a.getAttribute("href") === "/a";

        // Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
        support.checkOn = !!input.value;

        // Make sure that a selected-by-default option has a working selected property.
        // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
        support.optSelected = opt.selected;

        // Tests for enctype support on a form (#6743)
        support.enctype = !!document.createElement("form").enctype;

        // Make sure that the options inside disabled selects aren't marked as disabled
        // (WebKit marks them as disabled)
        select.disabled = true;
        support.optDisabled = !opt.disabled;

        // Support: IE8 only
        // Check if we can trust getAttribute("value")
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = input.getAttribute("value") === "";

        // Check if an input maintains its value after becoming a radio
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = input.value === "t";
    })();


    var rreturn = /\r/g;

    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, isFunction,
                elem = this[0];

            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] ||
                        jQuery.valHooks[elem.nodeName.toLowerCase()];

                    if (
                        hooks &&
                        "get" in hooks &&
                        (ret = hooks.get(elem, "value")) !== undefined
                    ) {
                        return ret;
                    }

                    ret = elem.value;

                    return typeof ret === "string" ?

                        // handle most common string cases
                        ret.replace(rreturn, "") :

                        // handle cases where value is null/undef or number
                        ret == null ? "" : ret;
                }

                return;
            }

            isFunction = jQuery.isFunction(value);

            return this.each(function(i) {
                var val;

                if (this.nodeType !== 1) {
                    return;
                }

                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }

                // Treat null/undefined as ""; convert numbers to string
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }

                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });

    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ?
                        val :

                        // Support: IE10-11+
                        // option.text throws exceptions (#14686, #14858)
                        jQuery.trim(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    var value, option,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one" || index < 0,
                        values = one ? null : [],
                        max = one ? index + 1 : options.length,
                        i = index < 0 ?
                        max :
                        one ? index : 0;

                    // Loop through all the selected options
                    for (; i < max; i++) {
                        option = options[i];

                        // oldIE doesn't update selected after form reset (#2551)
                        if ((option.selected || i === index) &&

                            // Don't return options that are disabled or in a disabled optgroup
                            (support.optDisabled ?
                                !option.disabled :
                                option.getAttribute("disabled") === null) &&
                            (!option.parentNode.disabled ||
                                !jQuery.nodeName(option.parentNode, "optgroup"))) {

                            // Get the specific value for the option
                            value = jQuery(option).val();

                            // We don't need an array for one selects
                            if (one) {
                                return value;
                            }

                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }

                    return values;
                },

                set: function(elem, value) {
                    var optionSet, option,
                        options = elem.options,
                        values = jQuery.makeArray(value),
                        i = options.length;

                    while (i--) {
                        option = options[i];

                        if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) {

                            // Support: IE6
                            // When new option element is added to select box we need to
                            // force reflow of newly added node in order to workaround delay
                            // of initialization properties
                            try {
                                option.selected = optionSet = true;

                            } catch (_) {

                                // Will be executed only in IE6
                                option.scrollHeight;
                            }

                        } else {
                            option.selected = false;
                        }
                    }

                    // Force browsers to behave consistently when non-matching value is set
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }

                    return options;
                }
            }
        }
    });

    // Radios and checkboxes getter/setter
    jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (jQuery.isArray(value)) {
                    return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1);
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });




    var nodeHook, boolHook,
        attrHandle = jQuery.expr.attrHandle,
        ruseDefault = /^(?:checked|selected)$/i,
        getSetAttribute = support.getSetAttribute,
        getSetInput = support.input;

    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },

        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });

    jQuery.extend({
        attr: function(elem, name, value) {
            var ret, hooks,
                nType = elem.nodeType;

            // Don't get/set attributes on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
            }

            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] ||
                    (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }

            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }

                if (hooks && "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }

                elem.setAttribute(name, value + "");
                return value;
            }

            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }

            ret = jQuery.find.attr(elem, name);

            // Non-existent attributes return null, we normalize to undefined
            return ret == null ? undefined : ret;
        },

        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && value === "radio" &&
                        jQuery.nodeName(elem, "input")) {

                        // Setting the type on a radio button after the value resets the value in IE8-9
                        // Reset value to default in case type is set after value during creation
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },

        removeAttr: function(elem, value) {
            var name, propName,
                i = 0,
                attrNames = value && value.match(rnotwhite);

            if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                    propName = jQuery.propFix[name] || name;

                    // Boolean attributes get special treatment (#10870)
                    if (jQuery.expr.match.bool.test(name)) {

                        // Set corresponding property to false
                        if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                            elem[propName] = false;

                            // Support: IE<9
                            // Also clear defaultChecked/defaultSelected (if appropriate)
                        } else {
                            elem[jQuery.camelCase("default-" + name)] =
                                elem[propName] = false;
                        }

                        // See #9699 for explanation of this approach (setting first, then removal)
                    } else {
                        jQuery.attr(elem, name, "");
                    }

                    elem.removeAttribute(getSetAttribute ? name : propName);
                }
            }
        }
    });

    // Hooks for boolean attributes
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) {

                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
            } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {

                // IE<8 needs the *property* name
                elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);

            } else {

                // Support: IE<9
                // Use defaultChecked and defaultSelected for oldIE
                elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
            }
            return name;
        }
    };

    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;

        if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
            attrHandle[name] = function(elem, name, isXML) {
                var ret, handle;
                if (!isXML) {

                    // Avoid an infinite loop by temporarily removing this function from the getter
                    handle = attrHandle[name];
                    attrHandle[name] = ret;
                    ret = getter(elem, name, isXML) != null ?
                        name.toLowerCase() :
                        null;
                    attrHandle[name] = handle;
                }
                return ret;
            };
        } else {
            attrHandle[name] = function(elem, name, isXML) {
                if (!isXML) {
                    return elem[jQuery.camelCase("default-" + name)] ?
                        name.toLowerCase() :
                        null;
                }
            };
        }
    });

    // fix oldIE attroperties
    if (!getSetInput || !getSetAttribute) {
        jQuery.attrHooks.value = {
            set: function(elem, value, name) {
                if (jQuery.nodeName(elem, "input")) {

                    // Does not return so that setAttribute is also used
                    elem.defaultValue = value;
                } else {

                    // Use nodeHook if defined (#1954); otherwise setAttribute is fine
                    return nodeHook && nodeHook.set(elem, value, name);
                }
            }
        };
    }

    // IE6/7 do not support getting/setting some attributes with get/setAttribute
    if (!getSetAttribute) {

        // Use this for any attribute in IE6/7
        // This fixes almost every IE6/7 issue
        nodeHook = {
            set: function(elem, value, name) {

                // Set the existing or create a new attribute node
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    elem.setAttributeNode(
                        (ret = elem.ownerDocument.createAttribute(name))
                    );
                }

                ret.value = value += "";

                // Break association with cloned elements by also using setAttribute (#9646)
                if (name === "value" || value === elem.getAttribute(name)) {
                    return value;
                }
            }
        };

        // Some attributes are constructed with empty-string values when not defined
        attrHandle.id = attrHandle.name = attrHandle.coords =
            function(elem, name, isXML) {
                var ret;
                if (!isXML) {
                    return (ret = elem.getAttributeNode(name)) && ret.value !== "" ?
                        ret.value :
                        null;
                }
            };

        // Fixing value retrieval on a button requires this module
        jQuery.valHooks.button = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                if (ret && ret.specified) {
                    return ret.value;
                }
            },
            set: nodeHook.set
        };

        // Set contenteditable to false on removals(#10429)
        // Setting to empty string throws an error as an invalid value
        jQuery.attrHooks.contenteditable = {
            set: function(elem, value, name) {
                nodeHook.set(elem, value === "" ? false : value, name);
            }
        };

        // Set width and height to auto instead of 0 on empty string( Bug #8150 )
        // This is for removals
        jQuery.each(["width", "height"], function(i, name) {
            jQuery.attrHooks[name] = {
                set: function(elem, value) {
                    if (value === "") {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            };
        });
    }

    if (!support.style) {
        jQuery.attrHooks.style = {
            get: function(elem) {

                // Return undefined in the case of empty string
                // Note: IE uppercases css property names, but if we were to .toLowerCase()
                // .cssText, that would destroy case sensitivity in URL's, like in "background"
                return elem.style.cssText || undefined;
            },
            set: function(elem, value) {
                return (elem.style.cssText = value + "");
            }
        };
    }




    var rfocusable = /^(?:input|select|textarea|button|object)$/i,
        rclickable = /^(?:a|area)$/i;

    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },

        removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {

                // try/catch handles cases where IE balks (such as removing a property on window)
                try {
                    this[name] = undefined;
                    delete this[name];
                } catch (e) {}
            });
        }
    });

    jQuery.extend({
        prop: function(elem, name, value) {
            var ret, hooks,
                nType = elem.nodeType;

            // Don't get/set properties on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }

            if (value !== undefined) {
                if (hooks && "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }

                return (elem[name] = value);
            }

            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }

            return elem[name];
        },

        propHooks: {
            tabIndex: {
                get: function(elem) {

                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    // Use proper attribute retrieval(#12072)
                    var tabindex = jQuery.find.attr(elem, "tabindex");

                    return tabindex ?
                        parseInt(tabindex, 10) :
                        rfocusable.test(elem.nodeName) ||
                        rclickable.test(elem.nodeName) && elem.href ?
                        0 :
                        -1;
                }
            }
        },

        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    });

    // Some attributes require a special call on IE
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if (!support.hrefNormalized) {

        // href/src property should get the full normalized URL (#10299/#12915)
        jQuery.each(["href", "src"], function(i, name) {
            jQuery.propHooks[name] = {
                get: function(elem) {
                    return elem.getAttribute(name, 4);
                }
            };
        });
    }

    // Support: Safari, IE9+
    // mis-reports the default selected property of an option
    // Accessing the parent's selectedIndex property fixes it
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function(elem) {
                var parent = elem.parentNode;

                if (parent) {
                    parent.selectedIndex;

                    // Make sure that it also works with optgroups, see #5701
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        };
    }

    jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });

    // IE6/7 call enctype encoding
    if (!support.enctype) {
        jQuery.propFix.enctype = "encoding";
    }




    var rclass = /[\t\r\n\f]/g;

    function getClass(elem) {
        return jQuery.attr(elem, "class") || "";
    }

    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue,
                i = 0;

            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
            }

            if (typeof value === "string" && value) {
                classes = value.match(rnotwhite) || [];

                while ((elem = this[i++])) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 &&
                        (" " + curValue + " ").replace(rclass, " ");

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }

                        // only assign if different to avoid unneeded rendering.
                        finalValue = jQuery.trim(cur);
                        if (curValue !== finalValue) {
                            jQuery.attr(elem, "class", finalValue);
                        }
                    }
                }
            }

            return this;
        },

        removeClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue,
                i = 0;

            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
            }

            if (!arguments.length) {
                return this.attr("class", "");
            }

            if (typeof value === "string" && value) {
                classes = value.match(rnotwhite) || [];

                while ((elem = this[i++])) {
                    curValue = getClass(elem);

                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 &&
                        (" " + curValue + " ").replace(rclass, " ");

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {

                            // Remove *all* instances
                            while (cur.indexOf(" " + clazz + " ") > -1) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }

                        // Only assign if different to avoid unneeded rendering.
                        finalValue = jQuery.trim(cur);
                        if (curValue !== finalValue) {
                            jQuery.attr(elem, "class", finalValue);
                        }
                    }
                }
            }

            return this;
        },

        toggleClass: function(value, stateVal) {
            var type = typeof value;

            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }

            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(
                        value.call(this, i, getClass(this), stateVal),
                        stateVal
                    );
                });
            }

            return this.each(function() {
                var className, i, self, classNames;

                if (type === "string") {

                    // Toggle individual class names
                    i = 0;
                    self = jQuery(this);
                    classNames = value.match(rnotwhite) || [];

                    while ((className = classNames[i++])) {

                        // Check each className given, space separated list
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }

                    // Toggle whole class name
                } else if (value === undefined || type === "boolean") {
                    className = getClass(this);
                    if (className) {

                        // store className if set
                        jQuery._data(this, "__className__", className);
                    }

                    // If the element has a class name or if we're passed "false",
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    jQuery.attr(this, "class",
                        className || value === false ?
                        "" :
                        jQuery._data(this, "__className__") || ""
                    );
                }
            });
        },

        hasClass: function(selector) {
            var className, elem,
                i = 0;

            className = " " + selector + " ";
            while ((elem = this[i++])) {
                if (elem.nodeType === 1 &&
                    (" " + getClass(elem) + " ").replace(rclass, " ")
                    .indexOf(className) > -1
                ) {
                    return true;
                }
            }

            return false;
        }
    });




    // Return jQuery for attributes-only inclusion


    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
            "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
            "change select submit keydown keypress keyup error contextmenu").split(" "),
        function(i, name) {

            // Handle event binding
            jQuery.fn[name] = function(data, fn) {
                return arguments.length > 0 ?
                    this.on(name, null, data, fn) :
                    this.trigger(name);
            };
        });

    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });


    var location = window.location;

    var nonce = jQuery.now();

    var rquery = (/\?/);



    var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

    jQuery.parseJSON = function(data) {

        // Attempt to parse using the native JSON parser first
        if (window.JSON && window.JSON.parse) {

            // Support: Android 2.3
            // Workaround failure to string-cast null input
            return window.JSON.parse(data + "");
        }

        var requireNonComma,
            depth = null,
            str = jQuery.trim(data + "");

        // Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
        // after removing valid tokens
        return str && !jQuery.trim(str.replace(rvalidtokens, function(token, comma, open, close) {

                // Force termination if we see a misplaced comma
                if (requireNonComma && comma) {
                    depth = 0;
                }

                // Perform no more replacements after returning to outermost depth
                if (depth === 0) {
                    return token;
                }

                // Commas must not follow "[", "{", or ","
                requireNonComma = open || comma;

                // Determine new depth
                // array/object open ("[" or "{"): depth += true - false (increment)
                // array/object close ("]" or "}"): depth += false - true (decrement)
                // other cases ("," or primitive): depth += true - true (numeric cast)
                depth += !close - !open;

                // Remove this token
                return "";
            })) ?
            (Function("return " + str))() :
            jQuery.error("Invalid JSON: " + data);
    };


    // Cross-browser xml parsing
    jQuery.parseXML = function(data) {
        var xml, tmp;
        if (!data || typeof data !== "string") {
            return null;
        }
        try {
            if (window.DOMParser) { // Standard
                tmp = new window.DOMParser();
                xml = tmp.parseFromString(data, "text/xml");
            } else { // IE
                xml = new window.ActiveXObject("Microsoft.XMLDOM");
                xml.async = "false";
                xml.loadXML(data);
            }
        } catch (e) {
            xml = undefined;
        }
        if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }
        return xml;
    };


    var
        rhash = /#.*$/,
        rts = /([?&])_=[^&]*/,

        // IE leaves an \r character at EOL
        rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

        /* Prefilters
         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
         * 2) These are called:
         *    - BEFORE asking for a transport
         *    - AFTER param serialization (s.data is a string if s.processData is true)
         * 3) key is the dataType
         * 4) the catchall symbol "*" can be used
         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
         */
        prefilters = {},

        /* Transports bindings
         * 1) key is the dataType
         * 2) the catchall symbol "*" can be used
         * 3) selection will start with transport dataType and THEN go to "*" if needed
         */
        transports = {},

        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = "*/".concat("*"),

        // Document location
        ajaxLocation = location.href,

        // Segment location into parts
        ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {

        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {

            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

            if (jQuery.isFunction(func)) {

                // For each dataType in the dataTypeExpression
                while ((dataType = dataTypes[i++])) {

                    // Prepend if requested
                    if (dataType.charAt(0) === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);

                        // Otherwise append
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }

    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

        var inspected = {},
            seekingTransport = (structure === transports);

        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" &&
                    !seekingTransport && !inspected[dataTypeOrTransport]) {

                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }

    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var deep, key,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }

        return target;
    }

    /* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type,
            contents = s.contents,
            dataTypes = s.dataTypes;

        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }

        // Check if we're dealing with a known content-type
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }

        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {

            // Try convertible dataTypes
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }

            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }

        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }

    /* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev,
            converters = {},

            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice();

        // Create converters map with lowercased keys
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }

        current = dataTypes.shift();

        // Convert to each sequential dataType
        while (current) {

            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }

            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }

            prev = current;
            current = dataTypes.shift();

            if (current) {

                // There's only work to do if current dataType is non-auto
                if (current === "*") {

                    current = prev;

                    // Convert response if prev dataType is non-auto and differs from current
                } else if (prev !== "*" && prev !== current) {

                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];

                    // If none found, seek a pair
                    if (!conv) {
                        for (conv2 in converters) {

                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {

                                // If prev can be converted to accepted input
                                conv = converters[prev + " " + tmp[0]] ||
                                    converters["* " + tmp[0]];
                                if (conv) {

                                    // Condense equivalence converters
                                    if (conv === true) {
                                        conv = converters[conv2];

                                        // Otherwise, insert the intermediate dataType
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }

                    // Apply converter (if not an equivalence)
                    if (conv !== true) {

                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s["throws"]) { // jscs:ignore requireDotNotation
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }

        return {
            state: "success",
            data: response
        };
    }

    jQuery.extend({

        // Counter for holding the number of active queries
        active: 0,

        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},

        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */

            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },

            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },

            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },

            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {

                // Convert anything to text
                "* text": String,

                // Text to html (true = no transformation)
                "text html": true,

                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,

                // Parse text as xml
                "text xml": jQuery.parseXML
            },

            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },

        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function(target, settings) {
            return settings ?

                // Building a settings object
                ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

                // Extending ajaxSettings
                ajaxExtend(jQuery.ajaxSettings, target);
        },

        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),

        // Main method
        ajax: function(url, options) {

            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }

            // Force options to be an object
            options = options || {};

            var

                // Cross-domain detection vars
                parts,

                // Loop variable
                i,

                // URL without anti-cache param
                cacheURL,

                // Response headers as string
                responseHeadersString,

                // timeout handle
                timeoutTimer,

                // To know if global events are to be dispatched
                fireGlobals,

                transport,

                // Response headers
                responseHeaders,

                // Create the final options object
                s = jQuery.ajaxSetup({}, options),

                // Callbacks context
                callbackContext = s.context || s,

                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext = s.context &&
                (callbackContext.nodeType || callbackContext.jquery) ?
                jQuery(callbackContext) :
                jQuery.event,

                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),

                // Status-dependent callbacks
                statusCode = s.statusCode || {},

                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},

                // The jqXHR state
                state = 0,

                // Default abort message
                strAbort = "canceled",

                // Fake xhr
                jqXHR = {
                    readyState: 0,

                    // Builds headers hashtable if needed
                    getResponseHeader: function(key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while ((match = rheaders.exec(responseHeadersString))) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match == null ? null : match;
                    },

                    // Raw string
                    getAllResponseHeaders: function() {
                        return state === 2 ? responseHeadersString : null;
                    },

                    // Caches the header
                    setRequestHeader: function(name, value) {
                        var lname = name.toLowerCase();
                        if (!state) {
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },

                    // Overrides response content-type header
                    overrideMimeType: function(type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },

                    // Status-dependent callbacks
                    statusCode: function(map) {
                        var code;
                        if (map) {
                            if (state < 2) {
                                for (code in map) {

                                    // Lazy-add the new callback in a way that preserves old ones
                                    statusCode[code] = [statusCode[code], map[code]];
                                }
                            } else {

                                // Execute the appropriate callbacks
                                jqXHR.always(map[jqXHR.status]);
                            }
                        }
                        return this;
                    },

                    // Cancel the request
                    abort: function(statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };

            // Attach deferreds
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;

            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || ajaxLocation) + "")
                .replace(rhash, "")
                .replace(rprotocol, ajaxLocParts[1] + "//");

            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;

            // Extract dataTypes list
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

            // A cross-domain request is in order when we have a protocol:host:port mismatch
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts &&
                    (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] ||
                        (parts[3] || (parts[1] === "http:" ? "80" : "443")) !==
                        (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443")))
                );
            }

            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }

            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

            // If request was aborted inside a prefilter, stop there
            if (state === 2) {
                return jqXHR;
            }

            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
            fireGlobals = jQuery.event && s.global;

            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }

            // Uppercase the type
            s.type = s.type.toUpperCase();

            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);

            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            cacheURL = s.url;

            // More options handling for requests with no content
            if (!s.hasContent) {

                // If data is available, append data to url
                if (s.data) {
                    cacheURL = (s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data);

                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }

                // Add anti-cache in url if needed
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ?

                        // If there is already a '_' parameter, set its value
                        cacheURL.replace(rts, "$1_=" + nonce++) :

                        // Otherwise add one to the end
                        cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
                }
            }

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }

            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }

            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
                s.accepts[s.dataTypes[0]] +
                (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
                s.accepts["*"]
            );

            // Check for headers option
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }

            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend &&
                (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {

                // Abort if not done already and return
                return jqXHR.abort();
            }

            // aborting is no longer a cancellation
            strAbort = "abort";

            // Install callbacks on deferreds
            for (i in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) {
                jqXHR[i](s[i]);
            }

            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

            // If no transport, we auto-abort
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;

                // Send global event
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }

                // If request was aborted inside ajaxSend, stop there
                if (state === 2) {
                    return jqXHR;
                }

                // Timeout
                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }

                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {

                    // Propagate exception as error if not done
                    if (state < 2) {
                        done(-1, e);

                        // Simply rethrow otherwise
                    } else {
                        throw e;
                    }
                }
            }

            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;

                // Called once
                if (state === 2) {
                    return;
                }

                // State is "done" now
                state = 2;

                // Clear timeout if it exists
                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;

                // Cache response headers
                responseHeadersString = headers || "";

                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;

                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;

                // Get response data
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }

                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);

                // If successful, handle type chaining
                if (isSuccess) {

                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }

                    // if no content
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";

                        // if not modified
                    } else if (status === 304) {
                        statusText = "notmodified";

                        // If we have data, let's convert it
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {

                    // We extract error from statusText
                    // then normalize statusText and status for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }

                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                // Success/Error
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }

                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                }

                // Complete
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                    // Handle the global AJAX counter
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }

            return jqXHR;
        },

        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },

        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });

    jQuery.each(["get", "post"], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {

            // shift arguments if data argument was omitted
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            // The url can be an options object (which then must have .url)
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });


    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,

            // Make this explicit, since user can override this through ajaxSetup (#11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            "throws": true
        });
    };


    jQuery.fn.extend({
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }

            if (this[0]) {

                // The elements to wrap the target around
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }

                wrap.map(function() {
                    var elem = this;

                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }

                    return elem;
                }).append(this);
            }

            return this;
        },

        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }

            return this.each(function() {
                var self = jQuery(this),
                    contents = self.contents();

                if (contents.length) {
                    contents.wrapAll(html);

                } else {
                    self.append(html);
                }
            });
        },

        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);

            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },

        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });


    function getDisplay(elem) {
        return elem.style && elem.style.display || jQuery.css(elem, "display");
    }

    function filterHidden(elem) {
        while (elem && elem.nodeType === 1) {
            if (getDisplay(elem) === "none" || elem.type === "hidden") {
                return true;
            }
            elem = elem.parentNode;
        }
        return false;
    }

    jQuery.expr.filters.hidden = function(elem) {

        // Support: Opera <= 12.12
        // Opera reports offsetWidths and offsetHeights less than zero on some elements
        return support.reliableHiddenOffsets() ?
            (elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
                !elem.getClientRects().length) :
            filterHidden(elem);
    };

    jQuery.expr.filters.visible = function(elem) {
        return !jQuery.expr.filters.hidden(elem);
    };




    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;

    function buildParams(prefix, obj, traditional, add) {
        var name;

        if (jQuery.isArray(obj)) {

            // Serialize array item.
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {

                    // Treat each array item as a scalar.
                    add(prefix, v);

                } else {

                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(
                        prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
                        v,
                        traditional,
                        add
                    );
                }
            });

        } else if (!traditional && jQuery.type(obj) === "object") {

            // Serialize object item.
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }

        } else {

            // Serialize scalar item.
            add(prefix, obj);
        }
    }

    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function(a, traditional) {
        var prefix,
            s = [],
            add = function(key, value) {

                // If value is a function, invoke it and return its value
                value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
            };

        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }

        // If an array was passed in, assume that it is an array of form elements.
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {

            // Serialize the form elements
            jQuery.each(a, function() {
                add(this.name, this.value);
            });

        } else {

            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }

        // Return the resulting serialization
        return s.join("&").replace(r20, "+");
    };

    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {

                    // Can add propHook for "elements" to filter or add form elements
                    var elements = jQuery.prop(this, "elements");
                    return elements ? jQuery.makeArray(elements) : this;
                })
                .filter(function() {
                    var type = this.type;

                    // Use .is(":disabled") so that fieldset[disabled] works
                    return this.name && !jQuery(this).is(":disabled") &&
                        rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
                        (this.checked || !rcheckableType.test(type));
                })
                .map(function(i, elem) {
                    var val = jQuery(this).val();

                    return val == null ?
                        null :
                        jQuery.isArray(val) ?
                        jQuery.map(val, function(val) {
                            return {
                                name: elem.name,
                                value: val.replace(rCRLF, "\r\n")
                            };
                        }) : {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        };
                }).get();
        }
    });


    // Create the request object
    // (This is still attached to ajaxSettings for backward compatibility)
    jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

        // Support: IE6-IE8
        function() {

            // XHR cannot access local files, always use ActiveX for that case
            if (this.isLocal) {
                return createActiveXHR();
            }

            // Support: IE 9-11
            // IE seems to error on cross-domain PATCH requests when ActiveX XHR
            // is used. In IE 9+ always use the native XHR.
            // Note: this condition won't catch Edge as it doesn't define
            // document.documentMode but it also doesn't support ActiveX so it won't
            // reach this code.
            if (document.documentMode > 8) {
                return createStandardXHR();
            }

            // Support: IE<9
            // oldIE XHR does not support non-RFC2616 methods (#13240)
            // See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
            // and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
            // Although this check for six methods instead of eight
            // since IE also does not support "trace" and "connect"
            return /^(get|post|head|put|delete|options)$/i.test(this.type) &&
                createStandardXHR() || createActiveXHR();
        } :

        // For all other browsers, use the standard XMLHttpRequest object
        createStandardXHR;

    var xhrId = 0,
        xhrCallbacks = {},
        xhrSupported = jQuery.ajaxSettings.xhr();

    // Support: IE<10
    // Open requests must be manually aborted on unload (#5280)
    // See https://support.microsoft.com/kb/2856746 for more info
    if (window.attachEvent) {
        window.attachEvent("onunload", function() {
            for (var key in xhrCallbacks) {
                xhrCallbacks[key](undefined, true);
            }
        });
    }

    // Determine support properties
    support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
    xhrSupported = support.ajax = !!xhrSupported;

    // Create transport if the browser can provide an xhr
    if (xhrSupported) {

        jQuery.ajaxTransport(function(options) {

            // Cross domain only allowed if supported through XMLHttpRequest
            if (!options.crossDomain || support.cors) {

                var callback;

                return {
                    send: function(headers, complete) {
                        var i,
                            xhr = options.xhr(),
                            id = ++xhrId;

                        // Open the socket
                        xhr.open(
                            options.type,
                            options.url,
                            options.async,
                            options.username,
                            options.password
                        );

                        // Apply custom fields if provided
                        if (options.xhrFields) {
                            for (i in options.xhrFields) {
                                xhr[i] = options.xhrFields[i];
                            }
                        }

                        // Override mime type if needed
                        if (options.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(options.mimeType);
                        }

                        // X-Requested-With header
                        // For cross-domain requests, seeing as conditions for a preflight are
                        // akin to a jigsaw puzzle, we simply never set it to be sure.
                        // (it can always be set on a per-request basis or even using ajaxSetup)
                        // For same-domain requests, won't change header if already provided.
                        if (!options.crossDomain && !headers["X-Requested-With"]) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }

                        // Set headers
                        for (i in headers) {

                            // Support: IE<9
                            // IE's ActiveXObject throws a 'Type Mismatch' exception when setting
                            // request header to a null-value.
                            //
                            // To keep consistent with other XHR implementations, cast the value
                            // to string and ignore `undefined`.
                            if (headers[i] !== undefined) {
                                xhr.setRequestHeader(i, headers[i] + "");
                            }
                        }

                        // Do send the request
                        // This may raise an exception which is actually
                        // handled in jQuery.ajax (so no try/catch here)
                        xhr.send((options.hasContent && options.data) || null);

                        // Listener
                        callback = function(_, isAbort) {
                            var status, statusText, responses;

                            // Was never called and is aborted or complete
                            if (callback && (isAbort || xhr.readyState === 4)) {

                                // Clean up
                                delete xhrCallbacks[id];
                                callback = undefined;
                                xhr.onreadystatechange = jQuery.noop;

                                // Abort manually if needed
                                if (isAbort) {
                                    if (xhr.readyState !== 4) {
                                        xhr.abort();
                                    }
                                } else {
                                    responses = {};
                                    status = xhr.status;

                                    // Support: IE<10
                                    // Accessing binary-data responseText throws an exception
                                    // (#11426)
                                    if (typeof xhr.responseText === "string") {
                                        responses.text = xhr.responseText;
                                    }

                                    // Firefox throws an exception when accessing
                                    // statusText for faulty cross-domain requests
                                    try {
                                        statusText = xhr.statusText;
                                    } catch (e) {

                                        // We normalize with Webkit giving an empty statusText
                                        statusText = "";
                                    }

                                    // Filter status for non standard behaviors

                                    // If the request is local and we have data: assume a success
                                    // (success with no data won't get notified, that's the best we
                                    // can do given current implementations)
                                    if (!status && options.isLocal && !options.crossDomain) {
                                        status = responses.text ? 200 : 404;

                                        // IE - #1450: sometimes returns 1223 when it should be 204
                                    } else if (status === 1223) {
                                        status = 204;
                                    }
                                }
                            }

                            // Call complete if needed
                            if (responses) {
                                complete(status, statusText, responses, xhr.getAllResponseHeaders());
                            }
                        };

                        // Do send the request
                        // `xhr.send` may raise an exception, but it will be
                        // handled in jQuery.ajax (so no try/catch here)
                        if (!options.async) {

                            // If we're in sync mode we fire the callback
                            callback();
                        } else if (xhr.readyState === 4) {

                            // (IE6 & IE7) if it's in cache and has been
                            // retrieved directly we need to fire the callback
                            window.setTimeout(callback);
                        } else {

                            // Register the callback, but delay it in case `xhr.send` throws
                            // Add to the list of active xhr callbacks
                            xhr.onreadystatechange = xhrCallbacks[id] = callback;
                        }
                    },

                    abort: function() {
                        if (callback) {
                            callback(undefined, true);
                        }
                    }
                };
            }
        });
    }

    // Functions to create xhrs
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }

    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
    }




    // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
    jQuery.ajaxPrefilter(function(s) {
        if (s.crossDomain) {
            s.contents.script = false;
        }
    });

    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, " +
                "application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });

    // Handle cache's special case and global
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });

    // Bind script tag hack transport
    jQuery.ajaxTransport("script", function(s) {

        // This transport only deals with cross domain requests
        if (s.crossDomain) {

            var script,
                head = document.head || jQuery("head")[0] || document.documentElement;

            return {

                send: function(_, callback) {

                    script = document.createElement("script");

                    script.async = true;

                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }

                    script.src = s.url;

                    // Attach handlers for all browsers
                    script.onload = script.onreadystatechange = function(_, isAbort) {

                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {

                            // Handle memory leak in IE
                            script.onload = script.onreadystatechange = null;

                            // Remove the script
                            if (script.parentNode) {
                                script.parentNode.removeChild(script);
                            }

                            // Dereference the script
                            script = null;

                            // Callback if not abort
                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };

                    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    head.insertBefore(script, head.firstChild);
                },

                abort: function() {
                    if (script) {
                        script.onload(undefined, true);
                    }
                }
            };
        }
    });




    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;

    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
            this[callback] = true;
            return callback;
        }
    });

    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {

        var callbackName, overwritten, responseContainer,
            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
                "url" :
                typeof s.data === "string" &&
                (s.contentType || "")
                .indexOf("application/x-www-form-urlencoded") === 0 &&
                rjsonp.test(s.data) && "data"
            );

        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {

            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
                s.jsonpCallback() :
                s.jsonpCallback;

            // Insert callback into url or form data
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }

            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };

            // force json dataType
            s.dataTypes[0] = "json";

            // Install callback
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };

            // Clean-up function (fires after converters)
            jqXHR.always(function() {

                // If previous value didn't exist - remove it
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);

                    // Otherwise restore preexisting value
                } else {
                    window[callbackName] = overwritten;
                }

                // Save back as free
                if (s[callbackName]) {

                    // make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    // save the callback name for future use
                    oldCallbacks.push(callbackName);
                }

                // Call if it was a function and we have a response
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }

                responseContainer = overwritten = undefined;
            });

            // Delegate to script
            return "script";
        }
    });




    // Support: Safari 8+
    // In Safari 8 documents created via document.implementation.createHTMLDocument
    // collapse sibling forms: the second one becomes a child of the first one.
    // Because of that, this security measure has to be disabled in Safari 8.
    // https://bugs.webkit.org/show_bug.cgi?id=137337
    support.createHTMLDocument = (function() {
        if (!document.implementation.createHTMLDocument) {
            return false;
        }
        var doc = document.implementation.createHTMLDocument("");
        doc.body.innerHTML = "<form></form><form></form>";
        return doc.body.childNodes.length === 2;
    })();


    // data: string of html
    // context (optional): If specified, the fragment will be created in this context,
    // defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || typeof data !== "string") {
            return null;
        }
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }

        // document.implementation stops scripts or inline event handlers from
        // being executed immediately
        context = context || (support.createHTMLDocument ?
            document.implementation.createHTMLDocument("") :
            document);

        var parsed = rsingleTag.exec(data),
            scripts = !keepScripts && [];

        // Single tag
        if (parsed) {
            return [context.createElement(parsed[1])];
        }

        parsed = buildFragment([data], context, scripts);

        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }

        return jQuery.merge([], parsed.childNodes);
    };


    // Keep a copy of the old load method
    var _load = jQuery.fn.load;

    /**
     * Load a url into a page
     */
    jQuery.fn.load = function(url, params, callback) {
        if (typeof url !== "string" && _load) {
            return _load.apply(this, arguments);
        }

        var selector, type, response,
            self = this,
            off = url.indexOf(" ");

        if (off > -1) {
            selector = jQuery.trim(url.slice(off, url.length));
            url = url.slice(0, off);
        }

        // If it's a function
        if (jQuery.isFunction(params)) {

            // We assume that it's the callback
            callback = params;
            params = undefined;

            // Otherwise, build a param string
        } else if (params && typeof params === "object") {
            type = "POST";
        }

        // If we have elements to modify, make the request
        if (self.length > 0) {
            jQuery.ajax({
                url: url,

                // If "type" variable is undefined, then "GET" method will be used.
                // Make value of this field explicit since
                // user can override it through ajaxSetup method
                type: type || "GET",
                dataType: "html",
                data: params
            }).done(function(responseText) {

                // Save response for use in complete callback
                response = arguments;

                self.html(selector ?

                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

                    // Otherwise use the full result
                    responseText);

                // If the request succeeds, this function gets "data", "status", "jqXHR"
                // but they are ignored because response was set above.
                // If it fails, this function gets "jqXHR", "status", "error"
            }).always(callback && function(jqXHR, status) {
                self.each(function() {
                    callback.apply(self, response || [jqXHR.responseText, status, jqXHR]);
                });
            });
        }

        return this;
    };




    // Attach a bunch of functions for handling common AJAX events
    jQuery.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
    ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });




    jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };





    /**
     * Gets a window from an element
     */
    function getWindow(elem) {
        return jQuery.isWindow(elem) ?
            elem :
            elem.nodeType === 9 ?
            elem.defaultView || elem.parentWindow :
            false;
    }

    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
                position = jQuery.css(elem, "position"),
                curElem = jQuery(elem),
                props = {};

            // set position first, in-case top/left are set even on static elem
            if (position === "static") {
                elem.style.position = "relative";
            }

            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") &&
                jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1;

            // need to be able to calculate position if either top or left
            // is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }

            if (jQuery.isFunction(options)) {

                // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                options = options.call(elem, i, jQuery.extend({}, curOffset));
            }

            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop;
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft;
            }

            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };

    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) {
                return options === undefined ?
                    this :
                    this.each(function(i) {
                        jQuery.offset.setOffset(this, options, i);
                    });
            }

            var docElem, win,
                box = {
                    top: 0,
                    left: 0
                },
                elem = this[0],
                doc = elem && elem.ownerDocument;

            if (!doc) {
                return;
            }

            docElem = doc.documentElement;

            // Make sure it's not a disconnected DOM node
            if (!jQuery.contains(docElem, elem)) {
                return box;
            }

            // If we don't have gBCR, just use 0,0 rather than error
            // BlackBerry 5, iOS 3 (original iPhone)
            if (typeof elem.getBoundingClientRect !== "undefined") {
                box = elem.getBoundingClientRect();
            }
            win = getWindow(doc);
            return {
                top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
                left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
            };
        },

        position: function() {
            if (!this[0]) {
                return;
            }

            var offsetParent, offset,
                parentOffset = {
                    top: 0,
                    left: 0
                },
                elem = this[0];

            // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
            // because it is its only offset parent
            if (jQuery.css(elem, "position") === "fixed") {

                // we assume that getBoundingClientRect is available when computed position is fixed
                offset = elem.getBoundingClientRect();
            } else {

                // Get *real* offsetParent
                offsetParent = this.offsetParent();

                // Get correct offsets
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }

                // Add offsetParent borders
                // Subtract offsetParent scroll positions
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true) -
                    offsetParent.scrollTop();
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true) -
                    offsetParent.scrollLeft();
            }

            // Subtract parent offsets and element margins
            // note: when an element has margin: auto the offsetLeft and marginLeft
            // are the same in Safari causing offset.left to incorrectly be 0
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },

        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent;

                while (offsetParent && (!jQuery.nodeName(offsetParent, "html") &&
                        jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || documentElement;
            });
        }
    });

    // Create scrollLeft and scrollTop methods
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);

        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);

                if (val === undefined) {
                    return win ? (prop in win) ? win[prop] :
                        win.document.documentElement[method] :
                        elem[method];
                }

                if (win) {
                    win.scrollTo(!top ? val : jQuery(win).scrollLeft(),
                        top ? val : jQuery(win).scrollTop()
                    );

                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });

    // Support: Safari<7-8+, Chrome<37-44+
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // getComputedStyle returns percent when specified for top/left/bottom/right
    // rather than make the css module depend on the offset module, we just check for it here
    jQuery.each(["top", "left"], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,
            function(elem, computed) {
                if (computed) {
                    computed = curCSS(elem, prop);

                    // if curCSS returns percentage, fallback to offset
                    return rnumnonpx.test(computed) ?
                        jQuery(elem).position()[prop] + "px" :
                        computed;
                }
            }
        );
    });


    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
                padding: "inner" + name,
                content: type,
                "": "outer" + name
            },
            function(defaultExtra, funcName) {

                // margin is only for outerHeight, outerWidth
                jQuery.fn[funcName] = function(margin, value) {
                    var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                        extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

                    return access(this, function(elem, type, value) {
                        var doc;

                        if (jQuery.isWindow(elem)) {

                            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                            // isn't a whole lot we can do. See pull request at this URL for discussion:
                            // https://github.com/jquery/jquery/pull/764
                            return elem.document.documentElement["client" + name];
                        }

                        // Get document width or height
                        if (elem.nodeType === 9) {
                            doc = elem.documentElement;

                            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                            // whichever is greatest
                            // unfortunately, this causes bug #3838 in IE6/8 only,
                            // but there is currently no good, small way to fix it.
                            return Math.max(
                                elem.body["scroll" + name], doc["scroll" + name],
                                elem.body["offset" + name], doc["offset" + name],
                                doc["client" + name]
                            );
                        }

                        return value === undefined ?

                            // Get width or height on the element, requesting but not forcing parseFloat
                            jQuery.css(elem, type, extra) :

                            // Set width or height on the element
                            jQuery.style(elem, type, value, extra);
                    }, type, chainable ? margin : undefined, chainable, null);
                };
            });
    });


    jQuery.fn.extend({

        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },

        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {

            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ?
                this.off(selector, "**") :
                this.off(types, selector || "**", fn);
        }
    });

    // The number of elements contained in the matched element set
    jQuery.fn.size = function() {
        return this.length;
    };

    jQuery.fn.andSelf = jQuery.fn.addBack;




    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.

    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

    if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
            return jQuery;
        });
    }



    var

        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,

        // Map over the $ in case of overwrite
        _$ = window.$;

    jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }

        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }

        return jQuery;
    };

    // Expose jQuery and $ identifiers, even in
    // AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }

    return jQuery;
}));
// Camera slideshow v1.3.3 - a jQuery slideshow with many effects, transitions, easy to customize, using canvas and mobile ready, based on jQuery 1.4+
// Copyright (c) 2012 by Manuel Masia - www.pixedelic.com
// Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
;
(function($) {
    $.fn.camera = function(opts, callback) {

        var defaults = {
            alignment: 'center', //topLeft, topCenter, topRight, centerLeft, center, centerRight, bottomLeft, bottomCenter, bottomRight

            autoAdvance: true, //true, false

            mobileAutoAdvance: true, //true, false. Auto-advancing for mobile devices

            barDirection: 'leftToRight', //'leftToRight', 'rightToLeft', 'topToBottom', 'bottomToTop'

            barPosition: 'bottom', //'bottom', 'left', 'top', 'right'

            cols: 6,

            easing: 'easeInOutExpo', //for the complete list http://jqueryui.com/demos/effect/easing.html

            mobileEasing: '', //leave empty if you want to display the same easing on mobile devices and on desktop etc.

            fx: 'random', //'random','simpleFade', 'curtainTopLeft', 'curtainTopRight', 'curtainBottomLeft', 'curtainBottomRight', 'curtainSliceLeft', 'curtainSliceRight', 'blindCurtainTopLeft', 'blindCurtainTopRight', 'blindCurtainBottomLeft', 'blindCurtainBottomRight', 'blindCurtainSliceBottom', 'blindCurtainSliceTop', 'stampede', 'mosaic', 'mosaicReverse', 'mosaicRandom', 'mosaicSpiral', 'mosaicSpiralReverse', 'topLeftBottomRight', 'bottomRightTopLeft', 'bottomLeftTopRight', 'bottomLeftTopRight'
            //you can also use more than one effect, just separate them with commas: 'simpleFade, scrollRight, scrollBottom'

            mobileFx: '', //leave empty if you want to display the same effect on mobile devices and on desktop etc.

            gridDifference: 250, //to make the grid blocks slower than the slices, this value must be smaller than transPeriod

            height: '56.25%', //here you can type pixels (for instance '300px'), a percentage (relative to the width of the slideshow, for instance '50%') or 'auto'

            imagePath: 'images/', //he path to the image folder (it serves for the blank.gif, when you want to display videos)

            hover: true, //true, false. Puase on state hover. Not available for mobile devices

            loader: 'pie', //pie, bar, none (even if you choose "pie", old browsers like IE8- can't display it... they will display always a loading bar)

            loaderColor: '#eeeeee',

            loaderBgColor: '#222222',

            loaderOpacity: .8, //0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1

            loaderPadding: 2, //how many empty pixels you want to display between the loader and its background

            loaderStroke: 7, //the thickness both of the pie loader and of the bar loader. Remember: for the pie, the loader thickness must be less than a half of the pie diameter

            minHeight: '200px', //you can also leave it blank

            navigation: true, //true or false, to display or not the navigation buttons

            navigationHover: true, //if true the navigation button (prev, next and play/stop buttons) will be visible on hover state only, if false they will be visible always

            mobileNavHover: true, //same as above, but only for mobile devices

            opacityOnGrid: false, //true, false. Decide to apply a fade effect to blocks and slices: if your slideshow is fullscreen or simply big, I recommend to set it false to have a smoother effect 

            overlayer: true, //a layer on the images to prevent the users grab them simply by clicking the right button of their mouse (.camera_overlayer)

            pagination: true,

            playPause: true, //true or false, to display or not the play/pause buttons

            pauseOnClick: true, //true, false. It stops the slideshow when you click the sliders.

            pieDiameter: 38,

            piePosition: 'rightTop', //'rightTop', 'leftTop', 'leftBottom', 'rightBottom'

            portrait: false, //true, false. Select true if you don't want that your images are cropped

            rows: 4,

            slicedCols: 12, //if 0 the same value of cols

            slicedRows: 8, //if 0 the same value of rows

            slideOn: 'next', //next, prev, random: decide if the transition effect will be applied to the current (prev) or the next slide

            thumbnails: false,

            time: 3000, //milliseconds between the end of the sliding effect and the start of the nex one

            transPeriod: 700, //length of the sliding effect in milliseconds

            ////////callbacks

            onEndTransition: function() {}, //this callback is invoked when the transition effect ends

            onLoaded: function() {}, //this callback is invoked when the image on a slide has completely loaded

            onStartLoading: function() {}, //this callback is invoked when the image on a slide start loading

            onStartTransition: function() {} //this callback is invoked when the transition effect starts

        };


        function isMobile() {
            if (navigator.userAgent.match(/Android/i) ||
                navigator.userAgent.match(/webOS/i) ||
                navigator.userAgent.match(/iPad/i) ||
                navigator.userAgent.match(/iPhone/i) ||
                navigator.userAgent.match(/iPod/i)
            ) {
                return true;
            }
        }

        var opts = $.extend({}, defaults, opts);

        var wrap = $(this).addClass('camera_wrap');

        wrap.wrapInner(
            '<div class="camera_src" />'
        ).wrapInner(
            '<div class="camera_fakehover" />'
        );

        var fakeHover = $('.camera_fakehover', wrap);

        fakeHover.append(
            '<div class="camera_target"></div>'
        );
        if (opts.overlayer == true) {
            fakeHover.append(
                '<div class="camera_overlayer"></div>'
            )
        }
        fakeHover.append(
            '<div class="camera_target_content"></div>'
        );

        var loader;

        if (opts.loader == 'pie' && $.browser.msie && $.browser.version < 9) {
            loader = 'bar';
        } else {
            loader = opts.loader;
        }

        if (loader == 'pie') {
            fakeHover.append(
                '<div class="camera_pie"></div>'
            )
        } else if (loader == 'bar') {
            fakeHover.append(
                '<div class="camera_bar"></div>'
            )
        } else {
            fakeHover.append(
                '<div class="camera_bar" style="display:none"></div>'
            )
        }

        if (opts.playPause == true) {
            fakeHover.append(
                '<div class="camera_commands"></div>'
            )
        }

        if (opts.navigation == true) {
            fakeHover.append(
                '<div class="camera_prev"><span></span></div>'
            ).append(
                '<div class="camera_next"><span></span></div>'
            );
        }

        if (opts.thumbnails == true) {
            wrap.append(
                '<div class="camera_thumbs_cont" />'
            );
        }

        if (opts.thumbnails == true && opts.pagination != true) {
            $('.camera_thumbs_cont', wrap).wrap(
                '<div />'
            ).wrap(
                '<div class="camera_thumbs" />'
            ).wrap(
                '<div />'
            ).wrap(
                '<div class="camera_command_wrap" />'
            );
        }

        if (opts.pagination == true) {
            wrap.append(
                '<div class="camera_pag"></div>'
            );
        }

        wrap.append(
            '<div class="camera_loader"></div>'
        );

        $('.camera_caption', wrap).each(function() {
            //$(this).wrapInner('<div />');
        });


        var pieID = 'pie_' + wrap.index(),
            elem = $('.camera_src', wrap),
            target = $('.camera_target', wrap),
            content = $('.camera_target_content', wrap),
            pieContainer = $('.camera_pie', wrap),
            barContainer = $('.camera_bar', wrap),
            prevNav = $('.camera_prev', wrap),
            nextNav = $('.camera_next', wrap),
            commands = $('.camera_commands', wrap),
            pagination = $('.camera_pag', wrap),
            thumbs = $('.camera_thumbs_cont', wrap);


        var w,
            h;


        var allImg = new Array();
        $('> div', elem).each(function() {
            //$(this).attr('alt','foo');
            allImg.push($(this).attr('data-src'));
        });

        var allAlt = new Array();
        $('> div', elem).each(function() {
            if ($(this).attr('data-alt')) {
                allAlt.push($(this).attr('data-alt'));
            } else {
                allAlt.push('');
            }
        });

        var allLinks = new Array();
        $('> div', elem).each(function() {
            if ($(this).attr('data-link')) {
                allLinks.push($(this).attr('data-link'));
            } else {
                allLinks.push('');
            }
        });

        var allTargets = new Array();
        $('> div', elem).each(function() {
            if ($(this).attr('data-target')) {
                allTargets.push($(this).attr('data-target'));
            } else {
                allTargets.push('');
            }
        });

        var allPor = new Array();
        $('> div', elem).each(function() {
            if ($(this).attr('data-portrait')) {
                allPor.push($(this).attr('data-portrait'));
            } else {
                allPor.push('');
            }
        });

        var allAlign = new Array();
        $('> div', elem).each(function() {
            if ($(this).attr('data-alignment')) {
                allAlign.push($(this).attr('data-alignment'));
            } else {
                allAlign.push('');
            }
        });


        var allThumbs = new Array();
        $('> div', elem).each(function() {
            if ($(this).attr('data-thumb')) {
                allThumbs.push($(this).attr('data-thumb'));
            } else {
                allThumbs.push('');
            }
        });

        var amountSlide = allImg.length;

        $(content).append('<div class="cameraContents" />');
        var loopMove;
        for (loopMove = 0; loopMove < amountSlide; loopMove++) {
            $('.cameraContents', content).append('<div class="cameraContent" />');
            if (allLinks[loopMove] != '') {
                //only for Wordpress plugin
                var dataBox = $('> div ', elem).eq(loopMove).attr('data-box');
                if (typeof dataBox !== 'undefined' && dataBox !== false && dataBox != '') {
                    dataBox = 'data-box="' + $('> div ', elem).eq(loopMove).attr('data-box') + '"';
                } else {
                    dataBox = '';
                }
                //
                $('.camera_target_content .cameraContent:eq(' + loopMove + ')', wrap).append('<a class="camera_link" href="' + allLinks[loopMove] + '" ' + dataBox + ' target="' + allTargets[loopMove] + '"></a>');
            }

        }
        $('.camera_caption', wrap).each(function() {
            var ind = $(this).parent().index(),
                cont = wrap.find('.cameraContent .container').eq(ind);
            $(this).appendTo(cont);
        });

        target.append('<div class="cameraCont" />');
        var cameraCont = $('.cameraCont', wrap);



        var loop;
        for (loop = 0; loop < amountSlide; loop++) {
            cameraCont.append('<div class="cameraSlide cameraSlide_' + loop + '" />');
            var div = $('> div:eq(' + loop + ')', elem);
            target.find('.cameraSlide_' + loop).clone(div);
        }


        function thumbnailVisible() {
            var wTh = $(thumbs).width();
            $('li', thumbs).removeClass('camera_visThumb');
            $('li', thumbs).each(function() {
                var pos = $(this).position(),
                    ulW = $('ul', thumbs).outerWidth(),
                    offUl = $('ul', thumbs).offset().left,
                    offDiv = $('> div', thumbs).offset().left,
                    ulLeft = offDiv - offUl;
                if (ulLeft > 0) {
                    $('.camera_prevThumbs', camera_thumbs_wrap).removeClass('hideNav');
                } else {
                    $('.camera_prevThumbs', camera_thumbs_wrap).addClass('hideNav');
                }
                if ((ulW - ulLeft) > wTh) {
                    $('.camera_nextThumbs', camera_thumbs_wrap).removeClass('hideNav');
                } else {
                    $('.camera_nextThumbs', camera_thumbs_wrap).addClass('hideNav');
                }
                var left = pos.left,
                    right = pos.left + ($(this).width());
                if (right - ulLeft <= wTh && left - ulLeft >= 0) {
                    $(this).addClass('camera_visThumb');
                }
            });
        }

        $(window).bind('load resize pageshow', function() {
            thumbnailPos();
            thumbnailVisible();
        });


        cameraCont.append('<div class="cameraSlide cameraSlide_' + loop + '" />');


        var started;

        wrap.show();
        var w = target.width();
        var h = target.height();

        var setPause;

        $(window).bind('resize pageshow', function() {
            if (started == true) {
                resizeImage();
            }
            $('ul', thumbs).animate({
                'margin-top': 0
            }, 0, thumbnailPos);
            if (!elem.hasClass('paused')) {
                elem.addClass('paused');
                if ($('.camera_stop', camera_thumbs_wrap).length) {
                    $('.camera_stop', camera_thumbs_wrap).hide()
                    $('.camera_play', camera_thumbs_wrap).show();
                    if (loader != 'none') {
                        $('#' + pieID).hide();
                    }
                } else {
                    if (loader != 'none') {
                        $('#' + pieID).hide();
                    }
                }
                clearTimeout(setPause);
                setPause = setTimeout(function() {
                    elem.removeClass('paused');
                    if ($('.camera_play', camera_thumbs_wrap).length) {
                        $('.camera_play', camera_thumbs_wrap).hide();
                        $('.camera_stop', camera_thumbs_wrap).show();
                        if (loader != 'none') {
                            $('#' + pieID).fadeIn();
                        }
                    } else {
                        if (loader != 'none') {
                            $('#' + pieID).fadeIn();
                        }
                    }
                }, 1500);
            }
        });

        function resizeImage() {
            var res;

            function resizeImageWork() {
                w = wrap.width();
                if (opts.height.indexOf('%') != -1) {
                    var startH = Math.round(w / (100 / parseFloat(opts.height)));
                    if (opts.minHeight != '' && startH < parseFloat(opts.minHeight)) {
                        h = parseFloat(opts.minHeight);
                    } else {
                        h = startH;
                    }
                    wrap.css({
                        height: h
                    });
                } else if (opts.height == 'auto') {
                    h = wrap.height();
                } else {
                    h = parseFloat(opts.height);
                    wrap.css({
                        height: h
                    });
                }
                $('.camerarelative', target).css({
                    'width': w,
                    'height': h
                });
                $('.imgLoaded', target).each(function() {
                    var t = $(this),
                        wT = t.attr('width'),
                        hT = t.attr('height'),
                        imgLoadIn = t.index(),
                        mTop,
                        mLeft,
                        alignment = t.attr('data-alignment'),
                        portrait = t.attr('data-portrait');

                    if (typeof alignment === 'undefined' || alignment === false || alignment === '') {
                        alignment = opts.alignment;
                    }

                    if (typeof portrait === 'undefined' || portrait === false || portrait === '') {
                        portrait = opts.portrait;
                    }

                    if (portrait == false || portrait == 'false') {
                        if ((wT / hT) < (w / h)) {
                            var r = w / wT;
                            var d = (Math.abs(h - (hT * r))) * 0.5;
                            switch (alignment) {
                                case 'topLeft':
                                    mTop = 0;
                                    break;
                                case 'topCenter':
                                    mTop = 0;
                                    break;
                                case 'topRight':
                                    mTop = 0;
                                    break;
                                case 'centerLeft':
                                    mTop = '-' + d + 'px';
                                    break;
                                case 'center':
                                    mTop = '-' + d + 'px';
                                    break;
                                case 'centerRight':
                                    mTop = '-' + d + 'px';
                                    break;
                                case 'bottomLeft':
                                    mTop = '-' + d * 2 + 'px';
                                    break;
                                case 'bottomCenter':
                                    mTop = '-' + d * 2 + 'px';
                                    break;
                                case 'bottomRight':
                                    mTop = '-' + d * 2 + 'px';
                                    break;
                            }
                            t.css({
                                'height': hT * r,
                                'margin-left': 0,
                                'margin-top': mTop,
                                'position': 'absolute',
                                'visibility': 'visible',
                                'width': w
                            });
                        } else {
                            var r = h / hT;
                            var d = (Math.abs(w - (wT * r))) * 0.5;
                            switch (alignment) {
                                case 'topLeft':
                                    mLeft = 0;
                                    break;
                                case 'topCenter':
                                    mLeft = '-' + d + 'px';
                                    break;
                                case 'topRight':
                                    mLeft = '-' + d * 2 + 'px';
                                    break;
                                case 'centerLeft':
                                    mLeft = 0;
                                    break;
                                case 'center':
                                    mLeft = '-' + d + 'px';
                                    break;
                                case 'centerRight':
                                    mLeft = '-' + d * 2 + 'px';
                                    break;
                                case 'bottomLeft':
                                    mLeft = 0;
                                    break;
                                case 'bottomCenter':
                                    mLeft = '-' + d + 'px';
                                    break;
                                case 'bottomRight':
                                    mLeft = '-' + d * 2 + 'px';
                                    break;
                            }
                            t.css({
                                'height': h,
                                'margin-left': mLeft,
                                'margin-top': 0,
                                'position': 'absolute',
                                'visibility': 'visible',
                                'width': wT * r
                            });
                        }
                    } else {
                        if ((wT / hT) < (w / h)) {
                            var r = h / hT;
                            var d = (Math.abs(w - (wT * r))) * 0.5;
                            switch (alignment) {
                                case 'topLeft':
                                    mLeft = 0;
                                    break;
                                case 'topCenter':
                                    mLeft = d + 'px';
                                    break;
                                case 'topRight':
                                    mLeft = d * 2 + 'px';
                                    break;
                                case 'centerLeft':
                                    mLeft = 0;
                                    break;
                                case 'center':
                                    mLeft = d + 'px';
                                    break;
                                case 'centerRight':
                                    mLeft = d * 2 + 'px';
                                    break;
                                case 'bottomLeft':
                                    mLeft = 0;
                                    break;
                                case 'bottomCenter':
                                    mLeft = d + 'px';
                                    break;
                                case 'bottomRight':
                                    mLeft = d * 2 + 'px';
                                    break;
                            }
                            t.css({
                                'height': h,
                                'margin-left': mLeft,
                                'margin-top': 0,
                                'position': 'absolute',
                                'visibility': 'visible',
                                'width': wT * r
                            });
                        } else {
                            var r = w / wT;
                            var d = (Math.abs(h - (hT * r))) * 0.5;
                            switch (alignment) {
                                case 'topLeft':
                                    mTop = 0;
                                    break;
                                case 'topCenter':
                                    mTop = 0;
                                    break;
                                case 'topRight':
                                    mTop = 0;
                                    break;
                                case 'centerLeft':
                                    mTop = d + 'px';
                                    break;
                                case 'center':
                                    mTop = d + 'px';
                                    break;
                                case 'centerRight':
                                    mTop = d + 'px';
                                    break;
                                case 'bottomLeft':
                                    mTop = d * 2 + 'px';
                                    break;
                                case 'bottomCenter':
                                    mTop = d * 2 + 'px';
                                    break;
                                case 'bottomRight':
                                    mTop = d * 2 + 'px';
                                    break;
                            }
                            t.css({
                                'height': hT * r,
                                'margin-left': 0,
                                'margin-top': mTop,
                                'position': 'absolute',
                                'visibility': 'visible',
                                'width': w
                            });
                        }
                    }
                });
            }
            if (started == true) {
                clearTimeout(res);
                res = setTimeout(resizeImageWork, 200);
            } else {
                resizeImageWork();
            }

            started = true;
        }


        var u,
            setT;

        var clickEv,
            autoAdv,
            navHover,
            commands,
            pagination;

        var videoHover,
            videoPresent;

        if (isMobile() && opts.mobileAutoAdvance != '') {
            autoAdv = opts.mobileAutoAdvance;
        } else {
            autoAdv = opts.autoAdvance;
        }

        if (autoAdv == false) {
            elem.addClass('paused');
        }

        if (isMobile() && opts.mobileNavHover != '') {
            navHover = opts.mobileNavHover;
        } else {
            navHover = opts.navigationHover;
        }

        if (elem.length != 0) {

            var selector = $('.cameraSlide', target);
            selector.wrapInner('<div class="camerarelative" />');

            var navSlide;

            var barDirection = opts.barDirection;

            var camera_thumbs_wrap = wrap;


            $('iframe', fakeHover).each(function() {
                var t = $(this);
                var src = t.attr('src');
                t.attr('data-src', src);
                var divInd = t.parent().index('.camera_src > div');
                $('.camera_target_content .cameraContent:eq(' + divInd + ')', wrap).append(t);
            });

            function imgFake() {
                $('iframe', fakeHover).each(function() {
                    $('.camera_caption', fakeHover).show();
                    var t = $(this);
                    var cloneSrc = t.attr('data-src');
                    t.attr('src', cloneSrc);
                    var imgFakeUrl = opts.imagePath + 'blank.gif';
                    var imgFake = new Image();
                    imgFake.src = imgFakeUrl;
                    if (opts.height.indexOf('%') != -1) {
                        var startH = Math.round(w / (100 / parseFloat(opts.height)));
                        if (opts.minHeight != '' && startH < parseFloat(opts.minHeight)) {
                            h = parseFloat(opts.minHeight);
                        } else {
                            h = startH;
                        }
                    } else if (opts.height == 'auto') {
                        h = wrap.height();
                    } else {
                        h = parseFloat(opts.height);
                    }
                    t.after($(imgFake).attr({
                        'class': 'imgFake',
                        'width': w,
                        'height': h
                    }));
                    var clone = t.clone();
                    t.remove();
                    $(imgFake).bind('click', function() {
                        if ($(this).css('position') == 'absolute') {
                            $(this).remove();
                            if (cloneSrc.indexOf('vimeo') != -1 || cloneSrc.indexOf('youtube') != -1) {
                                if (cloneSrc.indexOf('?') != -1) {
                                    autoplay = '&autoplay=1';
                                } else {
                                    autoplay = '?autoplay=1';
                                }
                            } else if (cloneSrc.indexOf('dailymotion') != -1) {
                                if (cloneSrc.indexOf('?') != -1) {
                                    autoplay = '&autoPlay=1';
                                } else {
                                    autoplay = '?autoPlay=1';
                                }
                            }
                            clone.attr('src', cloneSrc + autoplay);
                            videoPresent = true;
                        } else {
                            $(this).css({
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                zIndex: 10
                            }).after(clone);
                            clone.css({
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                zIndex: 9
                            });
                        }
                    });
                });
            }

            imgFake();


            if (opts.hover == true) {
                if (!isMobile()) {
                    fakeHover.hover(function() {
                        elem.addClass('hovered');
                    }, function() {
                        elem.removeClass('hovered');
                    });
                }
            }

            if (navHover == true) {
                $(prevNav, wrap).animate({
                    opacity: 1
                }, 0);
                $(nextNav, wrap).animate({
                    opacity: 1
                }, 0);
                $(commands, wrap).animate({
                    opacity: 1
                }, 0);
                if (isMobile()) {
                    fakeHover.on('vmouseover', function() {
                        $(prevNav, wrap).animate({
                            opacity: 1
                        }, 200);
                        $(nextNav, wrap).animate({
                            opacity: 1
                        }, 200);
                        $(commands, wrap).animate({
                            opacity: 1
                        }, 200);
                    });
                    fakeHover.on('vmouseout', function() {
                        $(prevNav, wrap).delay(500).animate({
                            opacity: 1
                        }, 200);
                        $(nextNav, wrap).delay(500).animate({
                            opacity: 1
                        }, 200);
                        $(commands, wrap).delay(500).animate({
                            opacity: 1
                        }, 200);
                    });
                } else {
                    fakeHover.hover(function() {
                        $(prevNav, wrap).animate({
                            opacity: 1
                        }, 200);
                        $(nextNav, wrap).animate({
                            opacity: 1
                        }, 200);
                        $(commands, wrap).animate({
                            opacity: 1
                        }, 200);
                    }, function() {
                        $(prevNav, wrap).animate({
                            opacity: 1
                        }, 200);
                        $(nextNav, wrap).animate({
                            opacity: 1
                        }, 200);
                        $(commands, wrap).animate({
                            opacity: 1
                        }, 200);
                    });
                }
            }


            $('div', camera_thumbs_wrap).on('click', '.camera_stop', function() {
                autoAdv = false;
                elem.addClass('paused');
                if ($('.camera_stop', camera_thumbs_wrap).length) {
                    $('.camera_stop', camera_thumbs_wrap).hide()
                    $('.camera_play', camera_thumbs_wrap).show();
                    if (loader != 'none') {
                        $('#' + pieID).hide();
                    }
                } else {
                    if (loader != 'none') {
                        $('#' + pieID).hide();
                    }
                }
            });

            $('div', camera_thumbs_wrap).on('click', '.camera_play', function() {
                autoAdv = true;
                elem.removeClass('paused');
                if ($('.camera_play', camera_thumbs_wrap).length) {
                    $('.camera_play', camera_thumbs_wrap).hide();
                    $('.camera_stop', camera_thumbs_wrap).show();
                    if (loader != 'none') {
                        $('#' + pieID).show();
                    }
                } else {
                    if (loader != 'none') {
                        $('#' + pieID).show();
                    }
                }
            });

            if (opts.pauseOnClick == true) {
                $('.camera_target_content', fakeHover).mouseup(function() {
                    autoAdv = false;
                    elem.addClass('paused');
                    $('.camera_stop', camera_thumbs_wrap).hide()
                    $('.camera_play', camera_thumbs_wrap).show();
                    $('#' + pieID).hide();
                });
            }
            $('.cameraContent, .imgFake', fakeHover).hover(function() {
                videoHover = true;
            }, function() {
                videoHover = false;
            });

            $('.cameraContent, .imgFake', fakeHover).bind('click', function() {
                if (videoPresent == true && videoHover == true) {
                    autoAdv = false;
                    $('.camera_caption', fakeHover).hide();
                    elem.addClass('paused');
                    $('.camera_stop', camera_thumbs_wrap).hide()
                    $('.camera_play', camera_thumbs_wrap).show();
                    $('#' + pieID).hide();
                }
            });


        }


        function shuffle(arr) {
            for (
                var j, x, i = arr.length; i; j = parseInt(Math.random() * i),
                x = arr[--i], arr[i] = arr[j], arr[j] = x
            );
            return arr;
        }

        function isInteger(s) {
            return Math.ceil(s) == Math.floor(s);
        }

        if (loader != 'pie') {
            barContainer.append('<span class="camera_bar_cont" />');
            $('.camera_bar_cont', barContainer)
                .animate({
                    opacity: opts.loaderOpacity
                }, 0)
                .css({
                    'position': 'absolute',
                    'left': 0,
                    'right': 0,
                    'top': 0,
                    'bottom': 0,
                    'background-color': opts.loaderBgColor
                })
                .append('<span id="' + pieID + '" />');
            $('#' + pieID).animate({
                opacity: 0
            }, 0);
            var canvas = $('#' + pieID);
            canvas.css({
                'position': 'absolute',
                'background-color': opts.loaderColor
            });
            switch (opts.barPosition) {
                case 'left':
                    barContainer.css({
                        right: 'auto',
                        width: opts.loaderStroke
                    });
                    break;
                case 'right':
                    barContainer.css({
                        left: 'auto',
                        width: opts.loaderStroke
                    });
                    break;
                case 'top':
                    barContainer.css({
                        bottom: 'auto',
                        height: opts.loaderStroke
                    });
                    break;
                case 'bottom':
                    barContainer.css({
                        top: 'auto',
                        height: opts.loaderStroke
                    });
                    break;
            }
            switch (barDirection) {
                case 'leftToRight':
                    canvas.css({
                        'left': 0,
                        'right': 0,
                        'top': opts.loaderPadding,
                        'bottom': opts.loaderPadding
                    });
                    break;
                case 'rightToLeft':
                    canvas.css({
                        'left': 0,
                        'right': 0,
                        'top': opts.loaderPadding,
                        'bottom': opts.loaderPadding
                    });
                    break;
                case 'topToBottom':
                    canvas.css({
                        'left': opts.loaderPadding,
                        'right': opts.loaderPadding,
                        'top': 0,
                        'bottom': 0
                    });
                    break;
                case 'bottomToTop':
                    canvas.css({
                        'left': opts.loaderPadding,
                        'right': opts.loaderPadding,
                        'top': 0,
                        'bottom': 0
                    });
                    break;
            }
        } else {
            pieContainer.append('<canvas id="' + pieID + '"></canvas>');
            var G_vmlCanvasManager;
            var canvas = document.getElementById(pieID);
            canvas.setAttribute("width", opts.pieDiameter);
            canvas.setAttribute("height", opts.pieDiameter);
            var piePosition;
            switch (opts.piePosition) {
                case 'leftTop':
                    piePosition = 'left:0; top:0;';
                    break;
                case 'rightTop':
                    piePosition = 'right:0; top:0;';
                    break;
                case 'leftBottom':
                    piePosition = 'left:0; bottom:0;';
                    break;
                case 'rightBottom':
                    piePosition = 'right:0; bottom:0;';
                    break;
            }
            canvas.setAttribute("style", "position:absolute; z-index:1002; " + piePosition);
            var rad;
            var radNew;

            if (canvas && canvas.getContext) {
                var ctx = canvas.getContext("2d");
                ctx.rotate(Math.PI * (3 / 2));
                ctx.translate(-opts.pieDiameter, 0);
            }

        }
        if (loader == 'none' || autoAdv == false) {
            $('#' + pieID).hide();
            $('.camera_canvas_wrap', camera_thumbs_wrap).hide();
        }

        if ($(pagination).length) {
            $(pagination).append('<ul class="camera_pag_ul" />');
            var li;
            for (li = 0; li < amountSlide; li++) {
                $('.camera_pag_ul', wrap).append('<li class="pag_nav_' + li + '" style="position:relative; z-index:1002"><span><span>' + li + '</span></span></li>');
            }
            $('.camera_pag_ul li', wrap).hover(function() {
                $(this).addClass('camera_hover');
                if ($('.camera_thumb', this).length) {
                    var wTh = $('.camera_thumb', this).outerWidth(),
                        hTh = $('.camera_thumb', this).outerHeight(),
                        wTt = $(this).outerWidth();
                    $('.camera_thumb', this).show().css({
                        'top': '-' + hTh + 'px',
                        'left': '-' + (wTh - wTt) / 2 + 'px'
                    }).animate({
                        'opacity': 1,
                        'margin-top': '-3px'
                    }, 200);
                    $('.thumb_arrow', this).show().animate({
                        'opacity': 1,
                        'margin-top': '-3px'
                    }, 200);
                }
            }, function() {
                $(this).removeClass('camera_hover');
                $('.camera_thumb', this).animate({
                    'margin-top': '-20px',
                    'opacity': 0
                }, 200, function() {
                    $(this).css({
                        marginTop: '5px'
                    }).hide();
                });
                $('.thumb_arrow', this).animate({
                    'margin-top': '-20px',
                    'opacity': 0
                }, 200, function() {
                    $(this).css({
                        marginTop: '5px'
                    }).hide();
                });
            });
        }



        if ($(thumbs).length) {
            var thumbUrl;
            if (!$(pagination).length) {
                $(thumbs).append('<div />');
                $(thumbs).before('<div class="camera_prevThumbs hideNav"><div></div></div>').before('<div class="camera_nextThumbs hideNav"><div></div></div>');
                $('> div', thumbs).append('<ul />');
                $.each(allThumbs, function(i, val) {
                    if ($('> div', elem).eq(i).attr('data-thumb') != '') {
                        var thumbUrl = $('> div', elem).eq(i).attr('data-thumb'),
                            newImg = new Image();
                        newImg.src = thumbUrl;
                        $('ul', thumbs).append('<li class="pix_thumb pix_thumb_' + i + '" />');
                        $('li.pix_thumb_' + i, thumbs).append($(newImg).attr('class', 'camera_thumb'));
                    }
                });
            } else {
                $.each(allThumbs, function(i, val) {
                    if ($('> div', elem).eq(i).attr('data-thumb') != '') {
                        var thumbUrl = $('> div', elem).eq(i).attr('data-thumb'),
                            newImg = new Image();
                        newImg.src = thumbUrl;
                        $('li.pag_nav_' + i, pagination).append($(newImg).attr('class', 'camera_thumb').css({
                            'position': 'absolute'
                        }).animate({
                            opacity: 0
                        }, 0));
                        $('li.pag_nav_' + i + ' > img', pagination).after('<div class="thumb_arrow" />');
                        $('li.pag_nav_' + i + ' > .thumb_arrow', pagination).animate({
                            opacity: 0
                        }, 0);
                    }
                });
                wrap.css({
                    marginBottom: $(pagination).outerHeight()
                });
            }
        } else if (!$(thumbs).length && $(pagination).length) {
            wrap.css({
                marginBottom: $(pagination).outerHeight()
            });
        }


        var firstPos = true;

        function thumbnailPos() {
            if ($(thumbs).length && !$(pagination).length) {
                var wTh = $(thumbs).outerWidth(),
                    owTh = $('ul > li', thumbs).outerWidth(),
                    pos = $('li.cameracurrent', thumbs).length ? $('li.cameracurrent', thumbs).position() : '',
                    ulW = ($('ul > li', thumbs).length * $('ul > li', thumbs).outerWidth()),
                    offUl = $('ul', thumbs).offset().left,
                    offDiv = $('> div', thumbs).offset().left,
                    ulLeft;

                if (offUl < 0) {
                    ulLeft = '-' + (offDiv - offUl);
                } else {
                    ulLeft = offDiv - offUl;
                }



                if (firstPos == true) {
                    $('ul', thumbs).width($('ul > li', thumbs).length * $('ul > li', thumbs).outerWidth());
                    if ($(thumbs).length && !$(pagination).lenght) {
                        wrap.css({
                            marginBottom: $(thumbs).outerHeight()
                        });
                    }
                    thumbnailVisible();
                    /*I repeat this two lines because of a problem with iPhones*/
                    $('ul', thumbs).width($('ul > li', thumbs).length * $('ul > li', thumbs).outerWidth());
                    if ($(thumbs).length && !$(pagination).lenght) {
                        wrap.css({
                            marginBottom: $(thumbs).outerHeight()
                        });
                    }
                    /*...*/
                }
                firstPos = false;

                var left = $('li.cameracurrent', thumbs).length ? pos.left : '',
                    right = $('li.cameracurrent', thumbs).length ? pos.left + ($('li.cameracurrent', thumbs).outerWidth()) : '';
                if (left < $('li.cameracurrent', thumbs).outerWidth()) {
                    left = 0;
                }
                if (right - ulLeft > wTh) {
                    if ((left + wTh) < ulW) {
                        $('ul', thumbs).animate({
                            'margin-left': '-' + (left) + 'px'
                        }, 500, thumbnailVisible);
                    } else {
                        $('ul', thumbs).animate({
                            'margin-left': '-' + ($('ul', thumbs).outerWidth() - wTh) + 'px'
                        }, 500, thumbnailVisible);
                    }
                } else if (left - ulLeft < 0) {
                    $('ul', thumbs).animate({
                        'margin-left': '-' + (left) + 'px'
                    }, 500, thumbnailVisible);
                } else {
                    $('ul', thumbs).css({
                        'margin-left': 'auto',
                        'margin-right': 'auto'
                    });
                    setTimeout(thumbnailVisible, 100);
                }

            }
        }

        if ($(commands).length) {
            $(commands).append('<div class="camera_play"></div>').append('<div class="camera_stop"></div>');
            if (autoAdv == true) {
                $('.camera_play', camera_thumbs_wrap).hide();
                $('.camera_stop', camera_thumbs_wrap).show();
            } else {
                $('.camera_stop', camera_thumbs_wrap).hide();
                $('.camera_play', camera_thumbs_wrap).show();
            }

        }


        function canvasLoader() {
            rad = 0;
            var barWidth = $('.camera_bar_cont', camera_thumbs_wrap).width(),
                barHeight = $('.camera_bar_cont', camera_thumbs_wrap).height();

            if (loader != 'pie') {
                switch (barDirection) {
                    case 'leftToRight':
                        $('#' + pieID).css({
                            'right': barWidth
                        });
                        break;
                    case 'rightToLeft':
                        $('#' + pieID).css({
                            'left': barWidth
                        });
                        break;
                    case 'topToBottom':
                        $('#' + pieID).css({
                            'bottom': barHeight
                        });
                        break;
                    case 'bottomToTop':
                        $('#' + pieID).css({
                            'top': barHeight
                        });
                        break;
                }
            } else {
                ctx.clearRect(0, 0, opts.pieDiameter, opts.pieDiameter);
            }
        }


        canvasLoader();


        $('.moveFromLeft, .moveFromRight, .moveFromTop, .moveFromBottom, .fadeIn, .fadeFromLeft, .fadeFromRight, .fadeFromTop, .fadeFromBottom', fakeHover).each(function() {
            $(this).css('visibility', 'hidden');
        });

        opts.onStartLoading.call(this);

        nextSlide();


        /*************************** FUNCTION nextSlide() ***************************/

        function nextSlide(navSlide) {
            elem.addClass('camerasliding');

            videoPresent = false;
            var vis = parseFloat($('div.cameraSlide.cameracurrent', target).index());

            if (navSlide > 0) {
                var slideI = navSlide - 1;
            } else if (vis == amountSlide - 1) {
                var slideI = 0;
            } else {
                var slideI = vis + 1;
            }


            var slide = $('.cameraSlide:eq(' + slideI + ')', target);
            var slideNext = $('.cameraSlide:eq(' + (slideI + 1) + ')', target).addClass('cameranext');
            if (vis != slideI + 1) {
                slideNext.hide();
            }
            $('.cameraContent', fakeHover).fadeOut(600);
            $('.camera_caption', fakeHover).show();

            $('.camerarelative', slide).append($('> div ', elem).eq(slideI).find('> div.camera_effected'));

            $('.camera_target_content .cameraContent:eq(' + slideI + ')', wrap).append($('> div ', elem).eq(slideI).find('> div'));

            if (!$('.imgLoaded', slide).length) {
                var imgUrl = allImg[slideI];
                var imgAlt = allAlt[slideI];
                var imgLoaded = new Image();
                imgLoaded.src = imgUrl + "?" + new Date().getTime();
                slide.css('visibility', 'hidden');
                slide.prepend($(imgLoaded).attr('class', 'imgLoaded').css('visibility', 'hidden'));
                var wT, hT;
                if (!$(imgLoaded).get(0).complete || wT == '0' || hT == '0' || typeof wT === 'undefined' || wT === false || typeof hT === 'undefined' || hT === false) {
                    $('.camera_loader', wrap).delay(500).fadeIn(400);
                    imgLoaded.onload = function() {
                        wT = imgLoaded.naturalWidth;
                        hT = imgLoaded.naturalHeight;
                        $(imgLoaded).attr('data-alignment', allAlign[slideI]).attr('data-portrait', allPor[slideI]);
                        $(imgLoaded).attr('width', wT);
                        $(imgLoaded).attr('height', hT);
                        $(imgLoaded).attr('alt', imgAlt);
                        target.find('.cameraSlide_' + slideI).hide().css('visibility', 'visible');
                        resizeImage();
                        nextSlide(slideI + 1);
                    };
                }
            } else {
                if (allImg.length > (slideI + 1) && !$('.imgLoaded', slideNext).length) {
                    var imgUrl2 = allImg[(slideI + 1)];
                    var imgLoaded2 = new Image();
                    imgLoaded2.src = imgUrl2 + "?" + new Date().getTime();
                    slideNext.prepend($(imgLoaded2).attr('class', 'imgLoaded').css('visibility', 'hidden'));
                    imgLoaded2.onload = function() {
                        wT = imgLoaded2.naturalWidth;
                        hT = imgLoaded2.naturalHeight;
                        $(imgLoaded2).attr('data-alignment', allAlign[slideI + 1]).attr('data-portrait', allPor[slideI + 1]);
                        $(imgLoaded2).attr('width', wT);
                        $(imgLoaded2).attr('height', hT);
                        resizeImage();
                    };
                }
                opts.onLoaded.call(this);
                if ($('.camera_loader', wrap).is(':visible')) {
                    $('.camera_loader', wrap).fadeOut(400);
                } else {
                    $('.camera_loader', wrap).css({
                        'visibility': 'hidden'
                    });
                    $('.camera_loader', wrap).fadeOut(400, function() {
                        $('.camera_loader', wrap).css({
                            'visibility': 'visible'
                        });
                    });
                }
                var rows = opts.rows,
                    cols = opts.cols,
                    couples = 1,
                    difference = 0,
                    dataSlideOn,
                    time,
                    transPeriod,
                    fx,
                    easing,
                    randomFx = new Array('simpleFade', 'curtainTopLeft', 'curtainTopRight', 'curtainBottomLeft', 'curtainBottomRight', 'curtainSliceLeft', 'curtainSliceRight', 'blindCurtainTopLeft', 'blindCurtainTopRight', 'blindCurtainBottomLeft', 'blindCurtainBottomRight', 'blindCurtainSliceBottom', 'blindCurtainSliceTop', 'stampede', 'mosaic', 'mosaicReverse', 'mosaicRandom', 'mosaicSpiral', 'mosaicSpiralReverse', 'topLeftBottomRight', 'bottomRightTopLeft', 'bottomLeftTopRight', 'topRightBottomLeft', 'scrollLeft', 'scrollRight', 'scrollTop', 'scrollBottom', 'scrollHorz');
                marginLeft = 0,
                    marginTop = 0,
                    opacityOnGrid = 0;

                if (opts.opacityOnGrid == true) {
                    opacityOnGrid = 0;
                } else {
                    opacityOnGrid = 1;
                }



                var dataFx = $(' > div', elem).eq(slideI).attr('data-fx');

                if (isMobile() && opts.mobileFx != '' && opts.mobileFx != 'default') {
                    fx = opts.mobileFx;
                } else {
                    if (typeof dataFx !== 'undefined' && dataFx !== false && dataFx !== 'default') {
                        fx = dataFx;
                    } else {
                        fx = opts.fx;
                    }
                }

                if (fx == 'random') {
                    fx = shuffle(randomFx);
                    fx = fx[0];
                } else {
                    fx = fx;
                    if (fx.indexOf(',') > 0) {
                        fx = fx.replace(/ /g, '');
                        fx = fx.split(',');
                        fx = shuffle(fx);
                        fx = fx[0];
                    }
                }

                dataEasing = $(' > div', elem).eq(slideI).attr('data-easing');
                mobileEasing = $(' > div', elem).eq(slideI).attr('data-mobileEasing');

                if (isMobile() && opts.mobileEasing != '' && opts.mobileEasing != 'default') {
                    if (typeof mobileEasing !== 'undefined' && mobileEasing !== false && mobileEasing !== 'default') {
                        easing = mobileEasing;
                    } else {
                        easing = opts.mobileEasing;
                    }
                } else {
                    if (typeof dataEasing !== 'undefined' && dataEasing !== false && dataEasing !== 'default') {
                        easing = dataEasing;
                    } else {
                        easing = opts.easing;
                    }
                }

                dataSlideOn = $(' > div', elem).eq(slideI).attr('data-slideOn');
                if (typeof dataSlideOn !== 'undefined' && dataSlideOn !== false) {
                    slideOn = dataSlideOn;
                } else {
                    if (opts.slideOn == 'random') {
                        var slideOn = new Array('next', 'prev');
                        slideOn = shuffle(slideOn);
                        slideOn = slideOn[0];
                    } else {
                        slideOn = opts.slideOn;
                    }
                }

                var dataTime = $(' > div', elem).eq(slideI).attr('data-time');
                if (typeof dataTime !== 'undefined' && dataTime !== false && dataTime !== '') {
                    time = parseFloat(dataTime);
                } else {
                    time = opts.time;
                }

                var dataTransPeriod = $(' > div', elem).eq(slideI).attr('data-transPeriod');
                if (typeof dataTransPeriod !== 'undefined' && dataTransPeriod !== false && dataTransPeriod !== '') {
                    transPeriod = parseFloat(dataTransPeriod);
                } else {
                    transPeriod = opts.transPeriod;
                }

                if (!$(elem).hasClass('camerastarted')) {
                    fx = 'simpleFade';
                    slideOn = 'next';
                    easing = '';
                    transPeriod = 400;
                    $(elem).addClass('camerastarted')
                }

                switch (fx) {
                    case 'simpleFade':
                        cols = 1;
                        rows = 1;
                        break;
                    case 'curtainTopLeft':
                        if (opts.slicedCols == 0) {
                            cols = opts.cols;
                        } else {
                            cols = opts.slicedCols;
                        }
                        rows = 1;
                        break;
                    case 'curtainTopRight':
                        if (opts.slicedCols == 0) {
                            cols = opts.cols;
                        } else {
                            cols = opts.slicedCols;
                        }
                        rows = 1;
                        break;
                    case 'curtainBottomLeft':
                        if (opts.slicedCols == 0) {
                            cols = opts.cols;
                        } else {
                            cols = opts.slicedCols;
                        }
                        rows = 1;
                        break;
                    case 'curtainBottomRight':
                        if (opts.slicedCols == 0) {
                            cols = opts.cols;
                        } else {
                            cols = opts.slicedCols;
                        }
                        rows = 1;
                        break;
                    case 'curtainSliceLeft':
                        if (opts.slicedCols == 0) {
                            cols = opts.cols;
                        } else {
                            cols = opts.slicedCols;
                        }
                        rows = 1;
                        break;
                    case 'curtainSliceRight':
                        if (opts.slicedCols == 0) {
                            cols = opts.cols;
                        } else {
                            cols = opts.slicedCols;
                        }
                        rows = 1;
                        break;
                    case 'blindCurtainTopLeft':
                        if (opts.slicedRows == 0) {
                            rows = opts.rows;
                        } else {
                            rows = opts.slicedRows;
                        }
                        cols = 1;
                        break;
                    case 'blindCurtainTopRight':
                        if (opts.slicedRows == 0) {
                            rows = opts.rows;
                        } else {
                            rows = opts.slicedRows;
                        }
                        cols = 1;
                        break;
                    case 'blindCurtainBottomLeft':
                        if (opts.slicedRows == 0) {
                            rows = opts.rows;
                        } else {
                            rows = opts.slicedRows;
                        }
                        cols = 1;
                        break;
                    case 'blindCurtainBottomRight':
                        if (opts.slicedRows == 0) {
                            rows = opts.rows;
                        } else {
                            rows = opts.slicedRows;
                        }
                        cols = 1;
                        break;
                    case 'blindCurtainSliceTop':
                        if (opts.slicedRows == 0) {
                            rows = opts.rows;
                        } else {
                            rows = opts.slicedRows;
                        }
                        cols = 1;
                        break;
                    case 'blindCurtainSliceBottom':
                        if (opts.slicedRows == 0) {
                            rows = opts.rows;
                        } else {
                            rows = opts.slicedRows;
                        }
                        cols = 1;
                        break;
                    case 'stampede':
                        difference = '-' + transPeriod;
                        break;
                    case 'mosaic':
                        difference = opts.gridDifference;
                        break;
                    case 'mosaicReverse':
                        difference = opts.gridDifference;
                        break;
                    case 'mosaicRandom':
                        break;
                    case 'mosaicSpiral':
                        difference = opts.gridDifference;
                        couples = 1.7;
                        break;
                    case 'mosaicSpiralReverse':
                        difference = opts.gridDifference;
                        couples = 1.7;
                        break;
                    case 'topLeftBottomRight':
                        difference = opts.gridDifference;
                        couples = 6;
                        break;
                    case 'bottomRightTopLeft':
                        difference = opts.gridDifference;
                        couples = 6;
                        break;
                    case 'bottomLeftTopRight':
                        difference = opts.gridDifference;
                        couples = 6;
                        break;
                    case 'topRightBottomLeft':
                        difference = opts.gridDifference;
                        couples = 6;
                        break;
                    case 'scrollLeft':
                        cols = 1;
                        rows = 1;
                        break;
                    case 'scrollRight':
                        cols = 1;
                        rows = 1;
                        break;
                    case 'scrollTop':
                        cols = 1;
                        rows = 1;
                        break;
                    case 'scrollBottom':
                        cols = 1;
                        rows = 1;
                        break;
                    case 'scrollHorz':
                        cols = 1;
                        rows = 1;
                        break;
                }

                var cycle = 0;
                var blocks = rows * cols;
                var leftScrap = w - (Math.floor(w / cols) * cols);
                var topScrap = h - (Math.floor(h / rows) * rows);
                var addLeft;
                var addTop;
                var tAppW = 0;
                var tAppH = 0;
                var arr = new Array();
                var delay = new Array();
                var order = new Array();
                while (cycle < blocks) {
                    arr.push(cycle);
                    delay.push(cycle);
                    cameraCont.append('<div class="cameraappended" style="display:none; overflow:hidden; position:absolute; z-index:1000" />');
                    var tApp = $('.cameraappended:eq(' + cycle + ')', target);
                    if (fx == 'scrollLeft' || fx == 'scrollRight' || fx == 'scrollTop' || fx == 'scrollBottom' || fx == 'scrollHorz') {
                        selector.eq(slideI).clone().show().appendTo(tApp);
                    } else {
                        if (slideOn == 'next') {
                            selector.eq(slideI).clone().show().appendTo(tApp);
                        } else {
                            selector.eq(vis).clone().show().appendTo(tApp);
                        }
                    }

                    if (cycle % cols < leftScrap) {
                        addLeft = 1;
                    } else {
                        addLeft = 0;
                    }
                    if (cycle % cols == 0) {
                        tAppW = 0;
                    }
                    if (Math.floor(cycle / cols) < topScrap) {
                        addTop = 1;
                    } else {
                        addTop = 0;
                    }
                    tApp.css({
                        'height': Math.floor((h / rows) + addTop + 1),
                        'left': tAppW,
                        'top': tAppH,
                        'width': Math.floor((w / cols) + addLeft + 1)
                    });
                    $('> .cameraSlide', tApp).css({
                        'height': h,
                        'margin-left': '-' + tAppW + 'px',
                        'margin-top': '-' + tAppH + 'px',
                        'width': w
                    });
                    tAppW = tAppW + tApp.width() - 1;
                    if (cycle % cols == cols - 1) {
                        tAppH = tAppH + tApp.height() - 1;
                    }
                    cycle++;
                }



                switch (fx) {
                    case 'curtainTopLeft':
                        break;
                    case 'curtainBottomLeft':
                        break;
                    case 'curtainSliceLeft':
                        break;
                    case 'curtainTopRight':
                        arr = arr.reverse();
                        break;
                    case 'curtainBottomRight':
                        arr = arr.reverse();
                        break;
                    case 'curtainSliceRight':
                        arr = arr.reverse();
                        break;
                    case 'blindCurtainTopLeft':
                        break;
                    case 'blindCurtainBottomLeft':
                        arr = arr.reverse();
                        break;
                    case 'blindCurtainSliceTop':
                        break;
                    case 'blindCurtainTopRight':
                        break;
                    case 'blindCurtainBottomRight':
                        arr = arr.reverse();
                        break;
                    case 'blindCurtainSliceBottom':
                        arr = arr.reverse();
                        break;
                    case 'stampede':
                        arr = shuffle(arr);
                        break;
                    case 'mosaic':
                        break;
                    case 'mosaicReverse':
                        arr = arr.reverse();
                        break;
                    case 'mosaicRandom':
                        arr = shuffle(arr);
                        break;
                    case 'mosaicSpiral':
                        var rows2 = rows / 2,
                            x, y, z, n = 0;
                        for (z = 0; z < rows2; z++) {
                            y = z;
                            for (x = z; x < cols - z - 1; x++) {
                                order[n++] = y * cols + x;
                            }
                            x = cols - z - 1;
                            for (y = z; y < rows - z - 1; y++) {
                                order[n++] = y * cols + x;
                            }
                            y = rows - z - 1;
                            for (x = cols - z - 1; x > z; x--) {
                                order[n++] = y * cols + x;
                            }
                            x = z;
                            for (y = rows - z - 1; y > z; y--) {
                                order[n++] = y * cols + x;
                            }
                        }

                        arr = order;

                        break;
                    case 'mosaicSpiralReverse':
                        var rows2 = rows / 2,
                            x, y, z, n = blocks - 1;
                        for (z = 0; z < rows2; z++) {
                            y = z;
                            for (x = z; x < cols - z - 1; x++) {
                                order[n--] = y * cols + x;
                            }
                            x = cols - z - 1;
                            for (y = z; y < rows - z - 1; y++) {
                                order[n--] = y * cols + x;
                            }
                            y = rows - z - 1;
                            for (x = cols - z - 1; x > z; x--) {
                                order[n--] = y * cols + x;
                            }
                            x = z;
                            for (y = rows - z - 1; y > z; y--) {
                                order[n--] = y * cols + x;
                            }
                        }

                        arr = order;

                        break;
                    case 'topLeftBottomRight':
                        for (var y = 0; y < rows; y++)
                            for (var x = 0; x < cols; x++) {
                                order.push(x + y);
                            }
                        delay = order;
                        break;
                    case 'bottomRightTopLeft':
                        for (var y = 0; y < rows; y++)
                            for (var x = 0; x < cols; x++) {
                                order.push(x + y);
                            }
                        delay = order.reverse();
                        break;
                    case 'bottomLeftTopRight':
                        for (var y = rows; y > 0; y--)
                            for (var x = 0; x < cols; x++) {
                                order.push(x + y);
                            }
                        delay = order;
                        break;
                    case 'topRightBottomLeft':
                        for (var y = 0; y < rows; y++)
                            for (var x = cols; x > 0; x--) {
                                order.push(x + y);
                            }
                        delay = order;
                        break;
                }



                $.each(arr, function(index, value) {

                    if (value % cols < leftScrap) {
                        addLeft = 1;
                    } else {
                        addLeft = 0;
                    }
                    if (value % cols == 0) {
                        tAppW = 0;
                    }
                    if (Math.floor(value / cols) < topScrap) {
                        addTop = 1;
                    } else {
                        addTop = 0;
                    }

                    switch (fx) {
                        case 'simpleFade':
                            height = h;
                            width = w;
                            opacityOnGrid = 0;
                            break;
                        case 'curtainTopLeft':
                            height = 0,
                                width = Math.floor((w / cols) + addLeft + 1),
                                marginTop = '-' + Math.floor((h / rows) + addTop + 1) + 'px';
                            break;
                        case 'curtainTopRight':
                            height = 0,
                                width = Math.floor((w / cols) + addLeft + 1),
                                marginTop = '-' + Math.floor((h / rows) + addTop + 1) + 'px';
                            break;
                        case 'curtainBottomLeft':
                            height = 0,
                                width = Math.floor((w / cols) + addLeft + 1),
                                marginTop = Math.floor((h / rows) + addTop + 1) + 'px';
                            break;
                        case 'curtainBottomRight':
                            height = 0,
                                width = Math.floor((w / cols) + addLeft + 1),
                                marginTop = Math.floor((h / rows) + addTop + 1) + 'px';
                            break;
                        case 'curtainSliceLeft':
                            height = 0,
                                width = Math.floor((w / cols) + addLeft + 1);
                            if (value % 2 == 0) {
                                marginTop = Math.floor((h / rows) + addTop + 1) + 'px';
                            } else {
                                marginTop = '-' + Math.floor((h / rows) + addTop + 1) + 'px';
                            }
                            break;
                        case 'curtainSliceRight':
                            height = 0,
                                width = Math.floor((w / cols) + addLeft + 1);
                            if (value % 2 == 0) {
                                marginTop = Math.floor((h / rows) + addTop + 1) + 'px';
                            } else {
                                marginTop = '-' + Math.floor((h / rows) + addTop + 1) + 'px';
                            }
                            break;
                        case 'blindCurtainTopLeft':
                            height = Math.floor((h / rows) + addTop + 1),
                                width = 0,
                                marginLeft = '-' + Math.floor((w / cols) + addLeft + 1) + 'px';
                            break;
                        case 'blindCurtainTopRight':
                            height = Math.floor((h / rows) + addTop + 1),
                                width = 0,
                                marginLeft = Math.floor((w / cols) + addLeft + 1) + 'px';
                            break;
                        case 'blindCurtainBottomLeft':
                            height = Math.floor((h / rows) + addTop + 1),
                                width = 0,
                                marginLeft = '-' + Math.floor((w / cols) + addLeft + 1) + 'px';
                            break;
                        case 'blindCurtainBottomRight':
                            height = Math.floor((h / rows) + addTop + 1),
                                width = 0,
                                marginLeft = Math.floor((w / cols) + addLeft + 1) + 'px';
                            break;
                        case 'blindCurtainSliceBottom':
                            height = Math.floor((h / rows) + addTop + 1),
                                width = 0;
                            if (value % 2 == 0) {
                                marginLeft = '-' + Math.floor((w / cols) + addLeft + 1) + 'px';
                            } else {
                                marginLeft = Math.floor((w / cols) + addLeft + 1) + 'px';
                            }
                            break;
                        case 'blindCurtainSliceTop':
                            height = Math.floor((h / rows) + addTop + 1),
                                width = 0;
                            if (value % 2 == 0) {
                                marginLeft = '-' + Math.floor((w / cols) + addLeft + 1) + 'px';
                            } else {
                                marginLeft = Math.floor((w / cols) + addLeft + 1) + 'px';
                            }
                            break;
                        case 'stampede':
                            height = 0;
                            width = 0;
                            marginLeft = (w * 0.2) * (((index) % cols) - (cols - (Math.floor(cols / 2)))) + 'px';
                            marginTop = (h * 0.2) * ((Math.floor(index / cols) + 1) - (rows - (Math.floor(rows / 2)))) + 'px';
                            break;
                        case 'mosaic':
                            height = 0;
                            width = 0;
                            break;
                        case 'mosaicReverse':
                            height = 0;
                            width = 0;
                            marginLeft = Math.floor((w / cols) + addLeft + 1) + 'px';
                            marginTop = Math.floor((h / rows) + addTop + 1) + 'px';
                            break;
                        case 'mosaicRandom':
                            height = 0;
                            width = 0;
                            marginLeft = Math.floor((w / cols) + addLeft + 1) * 0.5 + 'px';
                            marginTop = Math.floor((h / rows) + addTop + 1) * 0.5 + 'px';
                            break;
                        case 'mosaicSpiral':
                            height = 0;
                            width = 0;
                            marginLeft = Math.floor((w / cols) + addLeft + 1) * 0.5 + 'px';
                            marginTop = Math.floor((h / rows) + addTop + 1) * 0.5 + 'px';
                            break;
                        case 'mosaicSpiralReverse':
                            height = 0;
                            width = 0;
                            marginLeft = Math.floor((w / cols) + addLeft + 1) * 0.5 + 'px';
                            marginTop = Math.floor((h / rows) + addTop + 1) * 0.5 + 'px';
                            break;
                        case 'topLeftBottomRight':
                            height = 0;
                            width = 0;
                            break;
                        case 'bottomRightTopLeft':
                            height = 0;
                            width = 0;
                            marginLeft = Math.floor((w / cols) + addLeft + 1) + 'px';
                            marginTop = Math.floor((h / rows) + addTop + 1) + 'px';
                            break;
                        case 'bottomLeftTopRight':
                            height = 0;
                            width = 0;
                            marginLeft = 0;
                            marginTop = Math.floor((h / rows) + addTop + 1) + 'px';
                            break;
                        case 'topRightBottomLeft':
                            height = 0;
                            width = 0;
                            marginLeft = Math.floor((w / cols) + addLeft + 1) + 'px';
                            marginTop = 0;
                            break;
                        case 'scrollRight':
                            height = h;
                            width = w;
                            marginLeft = -w;
                            break;
                        case 'scrollLeft':
                            height = h;
                            width = w;
                            marginLeft = w;
                            break;
                        case 'scrollTop':
                            height = h;
                            width = w;
                            marginTop = h;
                            break;
                        case 'scrollBottom':
                            height = h;
                            width = w;
                            marginTop = -h;
                            break;
                        case 'scrollHorz':
                            height = h;
                            width = w;
                            if (vis == 0 && slideI == amountSlide - 1) {
                                marginLeft = -w;
                            } else if (vis < slideI || (vis == amountSlide - 1 && slideI == 0)) {
                                marginLeft = w;
                            } else {
                                marginLeft = -w;
                            }
                            break;
                    }


                    var tApp = $('.cameraappended:eq(' + value + ')', target);

                    if (typeof u !== 'undefined') {
                        clearInterval(u);
                        clearTimeout(setT);
                        setT = setTimeout(canvasLoader, transPeriod + difference);
                    }


                    if ($(pagination).length) {
                        $('.camera_pag li', wrap).removeClass('cameracurrent');
                        $('.camera_pag li', wrap).eq(slideI).addClass('cameracurrent');
                    }

                    if ($(thumbs).length) {
                        $('li', thumbs).removeClass('cameracurrent');
                        $('li', thumbs).eq(slideI).addClass('cameracurrent');
                        $('li', thumbs).not('.cameracurrent').find('img').animate({
                            opacity: .5
                        }, 0);
                        $('li.cameracurrent img', thumbs).animate({
                            opacity: 1
                        }, 0);
                        $('li', thumbs).hover(function() {
                            $('img', this).stop(true, false).animate({
                                opacity: 1
                            }, 150);
                        }, function() {
                            if (!$(this).hasClass('cameracurrent')) {
                                $('img', this).stop(true, false).animate({
                                    opacity: .5
                                }, 150);
                            }
                        });
                    }


                    var easedTime = parseFloat(transPeriod) + parseFloat(difference);

                    function cameraeased() {

                        $(this).addClass('cameraeased');
                        if ($('.cameraeased', target).length >= 0) {
                            $(thumbs).css({
                                visibility: 'visible'
                            });
                        }
                        if ($('.cameraeased', target).length == blocks) {

                            thumbnailPos();

                            $('.moveFromLeft, .moveFromRight, .moveFromTop, .moveFromBottom, .fadeIn, .fadeFromLeft, .fadeFromRight, .fadeFromTop, .fadeFromBottom', fakeHover).each(function() {
                                $(this).css('visibility', 'hidden');
                            });

                            selector.eq(slideI).show().css('z-index', '999').removeClass('cameranext').addClass('cameracurrent');
                            selector.eq(vis).css('z-index', '1').removeClass('cameracurrent');
                            $('.cameraContent', fakeHover).eq(slideI).addClass('cameracurrent');
                            if (vis >= 0) {
                                $('.cameraContent', fakeHover).eq(vis).removeClass('cameracurrent');
                            }

                            opts.onEndTransition.call(this);

                            if ($('> div', elem).eq(slideI).attr('data-video') != 'hide' && $('.cameraContent.cameracurrent .imgFake', fakeHover).length) {
                                $('.cameraContent.cameracurrent .imgFake', fakeHover).click();
                            }


                            var lMoveIn = selector.eq(slideI).find('.fadeIn').length;
                            var lMoveInContent = $('.cameraContent', fakeHover).eq(slideI).find('.moveFromLeft, .moveFromRight, .moveFromTop, .moveFromBottom, .fadeIn, .fadeFromLeft, .fadeFromRight, .fadeFromTop, .fadeFromBottom').length;

                            if (lMoveIn != 0) {
                                $('.cameraSlide.cameracurrent .fadeIn', fakeHover).each(function() {
                                    if ($(this).attr('data-easing') != '') {
                                        var easeMove = $(this).attr('data-easing');
                                    } else {
                                        var easeMove = easing;
                                    }
                                    var t = $(this);
                                    if (typeof t.attr('data-outerWidth') === 'undefined' || t.attr('data-outerWidth') === false || t.attr('data-outerWidth') === '') {
                                        var wMoveIn = t.outerWidth();
                                        t.attr('data-outerWidth', wMoveIn);
                                    } else {
                                        var wMoveIn = t.attr('data-outerWidth');
                                    }
                                    if (typeof t.attr('data-outerHeight') === 'undefined' || t.attr('data-outerHeight') === false || t.attr('data-outerHeight') === '') {
                                        var hMoveIn = t.outerHeight();
                                        t.attr('data-outerHeight', hMoveIn);
                                    } else {
                                        var hMoveIn = t.attr('data-outerHeight');
                                    }
                                    //t.css('width',wMoveIn);
                                    var pos = t.position();
                                    var left = pos.left;
                                    var top = pos.top;
                                    var tClass = t.attr('class');
                                    var ind = t.index();
                                    var hRel = t.parents('.camerarelative').outerHeight();
                                    var wRel = t.parents('.camerarelative').outerWidth();
                                    if (tClass.indexOf("fadeIn") != -1) {
                                        t.animate({
                                            opacity: 0
                                        }, 0).css('visibility', 'visible').delay((time / lMoveIn) * (0.1 * (ind - 1))).animate({
                                            opacity: 1
                                        }, (time / lMoveIn) * 0.15, easeMove);
                                    } else {
                                        t.css('visibility', 'visible');
                                    }
                                });
                            }

                            $('.cameraContent.cameracurrent', fakeHover).show();
                            if (lMoveInContent != 0) {

                                $('.cameraContent.cameracurrent .moveFromLeft, .cameraContent.cameracurrent .moveFromRight, .cameraContent.cameracurrent .moveFromTop, .cameraContent.cameracurrent .moveFromBottom, .cameraContent.cameracurrent .fadeIn, .cameraContent.cameracurrent .fadeFromLeft, .cameraContent.cameracurrent .fadeFromRight, .cameraContent.cameracurrent .fadeFromTop, .cameraContent.cameracurrent .fadeFromBottom', fakeHover).each(function() {
                                    if ($(this).attr('data-easing') != '') {
                                        var easeMove = $(this).attr('data-easing');
                                    } else {
                                        var easeMove = easing;
                                    }
                                    var t = $(this);
                                    var pos = t.position();
                                    var left = pos.left;
                                    var top = pos.top;
                                    var tClass = t.attr('class');
                                    var ind = t.index();
                                    var thisH = t.outerHeight();
                                    if (tClass.indexOf("moveFromLeft") != -1) {
                                        t.css({
                                            'left': '-' + (w) + 'px',
                                            'right': 'auto'
                                        });
                                        t.css('visibility', 'visible').delay((time / lMoveInContent) * (0.1 * (ind - 1))).animate({
                                            'left': pos.left
                                        }, (time / lMoveInContent) * 0.15, easeMove);
                                    } else if (tClass.indexOf("moveFromRight") != -1) {
                                        t.css({
                                            'left': w + 'px',
                                            'right': 'auto'
                                        });
                                        t.css('visibility', 'visible').delay((time / lMoveInContent) * (0.1 * (ind - 1))).animate({
                                            'left': pos.left
                                        }, (time / lMoveInContent) * 0.15, easeMove);
                                    } else if (tClass.indexOf("moveFromTop") != -1) {
                                        t.css({
                                            'top': '-' + h + 'px',
                                            'bottom': 'auto'
                                        });
                                        t.css('visibility', 'visible').delay((time / lMoveInContent) * (0.1 * (ind - 1))).animate({
                                            'top': pos.top
                                        }, (time / lMoveInContent) * 0.15, easeMove, function() {
                                            t.css({
                                                top: 'auto',
                                                bottom: 0
                                            });
                                        });
                                    } else if (tClass.indexOf("moveFromBottom") != -1) {
                                        t.css({
                                            'top': h + 'px',
                                            'bottom': 'auto'
                                        });
                                        t.css('visibility', 'visible').delay((time / lMoveInContent) * (0.1 * (ind - 1))).animate({
                                            'top': pos.top
                                        }, (time / lMoveInContent) * 0.15, easeMove);
                                    } else if (tClass.indexOf("fadeFromLeft") != -1) {
                                        t.animate({
                                            opacity: 0
                                        }, 0).css({
                                            'left': '-' + (w) + 'px',
                                            'right': 'auto'
                                        });
                                        t.css('visibility', 'visible').delay((time / lMoveInContent) * (0.1 * (ind - 1))).animate({
                                            'left': pos.left,
                                            opacity: 1
                                        }, (time / lMoveInContent) * 0.15, easeMove);
                                    } else if (tClass.indexOf("fadeFromRight") != -1) {
                                        t.animate({
                                            opacity: 0
                                        }, 0).css({
                                            'left': (w) + 'px',
                                            'right': 'auto'
                                        });
                                        t.css('visibility', 'visible').delay((time / lMoveInContent) * (0.1 * (ind - 1))).animate({
                                            'left': pos.left,
                                            opacity: 1
                                        }, (time / lMoveInContent) * 0.15, easeMove);
                                    } else if (tClass.indexOf("fadeFromTop") != -1) {
                                        t.animate({
                                            opacity: 0
                                        }, 0).css({
                                            'top': '-' + (h) + 'px',
                                            'bottom': 'auto'
                                        });
                                        t.css('visibility', 'visible').delay((time / lMoveInContent) * (0.1 * (ind - 1))).animate({
                                            'top': pos.top,
                                            opacity: 1
                                        }, (time / lMoveInContent) * 0.15, easeMove, function() {
                                            t.css({
                                                top: 'auto',
                                                bottom: 0
                                            });
                                        });
                                    } else if (tClass.indexOf("fadeFromBottom") != -1) {
                                        t.animate({
                                            opacity: 0
                                        }, 0).css({
                                            'bottom': '-' + thisH + 'px'
                                        });
                                        t.css('visibility', 'visible').delay((time / lMoveInContent) * (0.1 * (ind - 1))).animate({
                                            'bottom': '0',
                                            opacity: 1
                                        }, (time / lMoveInContent) * 0.15, easeMove);
                                    } else if (tClass.indexOf("fadeIn") != -1) {
                                        t.animate({
                                            opacity: 0
                                        }, 0).css('visibility', 'visible').delay((time / lMoveInContent) * (0.1 * (ind - 1))).animate({
                                            opacity: 1
                                        }, (time / lMoveInContent) * 0.15, easeMove);
                                    } else {
                                        t.css('visibility', 'visible');
                                    }
                                });
                            }


                            $('.cameraappended', target).remove();
                            elem.removeClass('camerasliding');
                            selector.eq(vis).hide();
                            var barWidth = $('.camera_bar_cont', camera_thumbs_wrap).width(),
                                barHeight = $('.camera_bar_cont', camera_thumbs_wrap).height(),
                                radSum;
                            if (loader != 'pie') {
                                radSum = 0.05;
                            } else {
                                radSum = 0.005;
                            }
                            $('#' + pieID).animate({
                                opacity: opts.loaderOpacity
                            }, 200);
                            u = setInterval(
                                function() {
                                    if (elem.hasClass('stopped')) {
                                        clearInterval(u);
                                    }
                                    if (loader != 'pie') {
                                        if (rad <= 1.002 && !elem.hasClass('stopped') && !elem.hasClass('paused') && !elem.hasClass('hovered')) {
                                            rad = (rad + radSum);
                                        } else if (rad <= 1 && (elem.hasClass('stopped') || elem.hasClass('paused') || elem.hasClass('stopped') || elem.hasClass('hovered'))) {
                                            rad = rad;
                                        } else {
                                            if (!elem.hasClass('stopped') && !elem.hasClass('paused') && !elem.hasClass('hovered')) {
                                                clearInterval(u);
                                                imgFake();
                                                $('#' + pieID).animate({
                                                    opacity: 0
                                                }, 200, function() {
                                                    clearTimeout(setT);
                                                    setT = setTimeout(canvasLoader, easedTime);
                                                    nextSlide();
                                                    opts.onStartLoading.call(this);
                                                });
                                            }
                                        }
                                        switch (barDirection) {
                                            case 'leftToRight':
                                                $('#' + pieID).animate({
                                                    'right': barWidth - (barWidth * rad)
                                                }, (time * radSum), 'linear');
                                                break;
                                            case 'rightToLeft':
                                                $('#' + pieID).animate({
                                                    'left': barWidth - (barWidth * rad)
                                                }, (time * radSum), 'linear');
                                                break;
                                            case 'topToBottom':
                                                $('#' + pieID).animate({
                                                    'bottom': barHeight - (barHeight * rad)
                                                }, (time * radSum), 'linear');
                                                break;
                                            case 'bottomToTop':
                                                $('#' + pieID).animate({
                                                    'bottom': barHeight - (barHeight * rad)
                                                }, (time * radSum), 'linear');
                                                break;
                                        }

                                    } else {
                                        radNew = rad;
                                        ctx.clearRect(0, 0, opts.pieDiameter, opts.pieDiameter);
                                        ctx.globalCompositeOperation = 'destination-over';
                                        ctx.beginPath();
                                        ctx.arc((opts.pieDiameter) / 2, (opts.pieDiameter) / 2, (opts.pieDiameter) / 2 - opts.loaderStroke, 0, Math.PI * 2, false);
                                        ctx.lineWidth = opts.loaderStroke;
                                        ctx.strokeStyle = opts.loaderBgColor;
                                        ctx.stroke();
                                        ctx.closePath();
                                        ctx.globalCompositeOperation = 'source-over';
                                        ctx.beginPath();
                                        ctx.arc((opts.pieDiameter) / 2, (opts.pieDiameter) / 2, (opts.pieDiameter) / 2 - opts.loaderStroke, 0, Math.PI * 2 * radNew, false);
                                        ctx.lineWidth = opts.loaderStroke - (opts.loaderPadding * 2);
                                        ctx.strokeStyle = opts.loaderColor;
                                        ctx.stroke();
                                        ctx.closePath();

                                        if (rad <= 1.002 && !elem.hasClass('stopped') && !elem.hasClass('paused') && !elem.hasClass('hovered')) {
                                            rad = (rad + radSum);
                                        } else if (rad <= 1 && (elem.hasClass('stopped') || elem.hasClass('paused') || elem.hasClass('hovered'))) {
                                            rad = rad;
                                        } else {
                                            if (!elem.hasClass('stopped') && !elem.hasClass('paused') && !elem.hasClass('hovered')) {
                                                clearInterval(u);
                                                imgFake();
                                                $('#' + pieID + ', .camera_canvas_wrap', camera_thumbs_wrap).animate({
                                                    opacity: 0
                                                }, 200, function() {
                                                    clearTimeout(setT);
                                                    setT = setTimeout(canvasLoader, easedTime);
                                                    nextSlide();
                                                    opts.onStartLoading.call(this);
                                                });
                                            }
                                        }
                                    }
                                }, time * radSum
                            );
                        }

                    }



                    if (fx == 'scrollLeft' || fx == 'scrollRight' || fx == 'scrollTop' || fx == 'scrollBottom' || fx == 'scrollHorz') {
                        opts.onStartTransition.call(this);
                        easedTime = 0;
                        tApp.delay((((transPeriod + difference) / blocks) * delay[index] * couples) * 0.5).css({
                            'display': 'block',
                            'height': height,
                            'margin-left': marginLeft,
                            'margin-top': marginTop,
                            'width': width
                        }).animate({
                            'height': Math.floor((h / rows) + addTop + 1),
                            'margin-top': 0,
                            'margin-left': 0,
                            'width': Math.floor((w / cols) + addLeft + 1)
                        }, (transPeriod - difference), easing, cameraeased);
                        selector.eq(vis).delay((((transPeriod + difference) / blocks) * delay[index] * couples) * 0.5).animate({
                            'margin-left': marginLeft * (-1),
                            'margin-top': marginTop * (-1)
                        }, (transPeriod - difference), easing, function() {
                            $(this).css({
                                'margin-top': 0,
                                'margin-left': 0
                            });
                        });
                    } else {
                        opts.onStartTransition.call(this);
                        easedTime = parseFloat(transPeriod) + parseFloat(difference);
                        if (slideOn == 'next') {
                            tApp.delay((((transPeriod + difference) / blocks) * delay[index] * couples) * 0.5).css({
                                'display': 'block',
                                'height': height,
                                'margin-left': marginLeft,
                                'margin-top': marginTop,
                                'width': width,
                                'opacity': opacityOnGrid
                            }).animate({
                                'height': Math.floor((h / rows) + addTop + 1),
                                'margin-top': 0,
                                'margin-left': 0,
                                'opacity': 1,
                                'width': Math.floor((w / cols) + addLeft + 1)
                            }, (transPeriod - difference), easing, cameraeased);
                        } else {
                            selector.eq(slideI).show().css('z-index', '999').addClass('cameracurrent');
                            selector.eq(vis).css('z-index', '1').removeClass('cameracurrent');
                            $('.cameraContent', fakeHover).eq(slideI).addClass('cameracurrent');
                            $('.cameraContent', fakeHover).eq(vis).removeClass('cameracurrent');
                            tApp.delay((((transPeriod + difference) / blocks) * delay[index] * couples) * 0.5).css({
                                'display': 'block',
                                'height': Math.floor((h / rows) + addTop + 1),
                                'margin-top': 0,
                                'margin-left': 0,
                                'opacity': 1,
                                'width': Math.floor((w / cols) + addLeft + 1)
                            }).animate({
                                'height': height,
                                'margin-left': marginLeft,
                                'margin-top': marginTop,
                                'width': width,
                                'opacity': opacityOnGrid
                            }, (transPeriod - difference), easing, cameraeased);
                        }
                    }





                });




            }
        }


        if ($(prevNav).length) {
            $(prevNav).click(function() {
                if (!elem.hasClass('camerasliding')) {
                    var idNum = parseFloat($('.cameraSlide.cameracurrent', target).index());
                    clearInterval(u);
                    imgFake();
                    $('#' + pieID + ', .camera_canvas_wrap', wrap).animate({
                        opacity: 0
                    }, 0);
                    canvasLoader();
                    if (idNum != 0) {
                        nextSlide(idNum);
                    } else {
                        nextSlide(amountSlide);
                    }
                    opts.onStartLoading.call(this);
                }
            });
        }

        if ($(nextNav).length) {
            $(nextNav).click(function() {
                if (!elem.hasClass('camerasliding')) {
                    var idNum = parseFloat($('.cameraSlide.cameracurrent', target).index());
                    clearInterval(u);
                    imgFake();
                    $('#' + pieID + ', .camera_canvas_wrap', camera_thumbs_wrap).animate({
                        opacity: 0
                    }, 0);
                    canvasLoader();
                    if (idNum == amountSlide - 1) {
                        nextSlide(1);
                    } else {
                        nextSlide(idNum + 2);
                    }
                    opts.onStartLoading.call(this);
                }
            });
        }


        if (isMobile()) {
            fakeHover.bind('swipeleft', function(event) {
                if (!elem.hasClass('camerasliding')) {
                    var idNum = parseFloat($('.cameraSlide.cameracurrent', target).index());
                    clearInterval(u);
                    imgFake();
                    $('#' + pieID + ', .camera_canvas_wrap', camera_thumbs_wrap).animate({
                        opacity: 0
                    }, 0);
                    canvasLoader();
                    if (idNum == amountSlide - 1) {
                        nextSlide(1);
                    } else {
                        nextSlide(idNum + 2);
                    }
                    opts.onStartLoading.call(this);
                }
            });
            fakeHover.bind('swiperight', function(event) {
                if (!elem.hasClass('camerasliding')) {
                    var idNum = parseFloat($('.cameraSlide.cameracurrent', target).index());
                    clearInterval(u);
                    imgFake();
                    $('#' + pieID + ', .camera_canvas_wrap', camera_thumbs_wrap).animate({
                        opacity: 0
                    }, 0);
                    canvasLoader();
                    if (idNum != 0) {
                        nextSlide(idNum);
                    } else {
                        nextSlide(amountSlide);
                    }
                    opts.onStartLoading.call(this);
                }
            });
        }

        if ($(pagination).length) {
            $('.camera_pag li', wrap).click(function() {
                if (!elem.hasClass('camerasliding')) {
                    var idNum = parseFloat($(this).index());
                    var curNum = parseFloat($('.cameraSlide.cameracurrent', target).index());
                    if (idNum != curNum) {
                        clearInterval(u);
                        imgFake();
                        $('#' + pieID + ', .camera_canvas_wrap', camera_thumbs_wrap).animate({
                            opacity: 0
                        }, 0);
                        canvasLoader();
                        nextSlide(idNum + 1);
                        opts.onStartLoading.call(this);
                    }
                }
            });
        }

        if ($(thumbs).length) {

            $('.pix_thumb img', thumbs).click(function() {
                if (!elem.hasClass('camerasliding')) {
                    var idNum = parseFloat($(this).parents('li').index());
                    var curNum = parseFloat($('.cameracurrent', target).index());
                    if (idNum != curNum) {
                        clearInterval(u);
                        imgFake();
                        $('#' + pieID + ', .camera_canvas_wrap', camera_thumbs_wrap).animate({
                            opacity: 0
                        }, 0);
                        $('.pix_thumb', thumbs).removeClass('cameracurrent');
                        $(this).parents('li').addClass('cameracurrent');
                        canvasLoader();
                        nextSlide(idNum + 1);
                        thumbnailPos();
                        opts.onStartLoading.call(this);
                    }
                }
            });

            $('.camera_thumbs_cont .camera_prevThumbs', camera_thumbs_wrap).hover(function() {
                $(this).stop(true, false).animate({
                    opacity: 1
                }, 250);
            }, function() {
                $(this).stop(true, false).animate({
                    opacity: .7
                }, 250);
            });
            $('.camera_prevThumbs', camera_thumbs_wrap).click(function() {
                var sum = 0,
                    wTh = $(thumbs).outerWidth(),
                    offUl = $('ul', thumbs).offset().left,
                    offDiv = $('> div', thumbs).offset().left,
                    ulLeft = offDiv - offUl;
                $('.camera_visThumb', thumbs).each(function() {
                    var tW = $(this).outerWidth();
                    sum = sum + tW;
                });
                if (ulLeft - sum > 0) {
                    $('ul', thumbs).animate({
                        'margin-left': '-' + (ulLeft - sum) + 'px'
                    }, 500, thumbnailVisible);
                } else {
                    $('ul', thumbs).animate({
                        'margin-left': 0
                    }, 500, thumbnailVisible);
                }
            });

            $('.camera_thumbs_cont .camera_nextThumbs', camera_thumbs_wrap).hover(function() {
                $(this).stop(true, false).animate({
                    opacity: 1
                }, 250);
            }, function() {
                $(this).stop(true, false).animate({
                    opacity: .7
                }, 250);
            });
            $('.camera_nextThumbs', camera_thumbs_wrap).click(function() {
                var sum = 0,
                    wTh = $(thumbs).outerWidth(),
                    ulW = $('ul', thumbs).outerWidth(),
                    offUl = $('ul', thumbs).offset().left,
                    offDiv = $('> div', thumbs).offset().left,
                    ulLeft = offDiv - offUl;
                $('.camera_visThumb', thumbs).each(function() {
                    var tW = $(this).outerWidth();
                    sum = sum + tW;
                });
                if (ulLeft + sum + sum < ulW) {
                    $('ul', thumbs).animate({
                        'margin-left': '-' + (ulLeft + sum) + 'px'
                    }, 500, thumbnailVisible);
                } else {
                    $('ul', thumbs).animate({
                        'margin-left': '-' + (ulW - wTh) + 'px'
                    }, 500, thumbnailVisible);
                }
            });

        }



    }

})(jQuery);

;
(function($) {
    $.fn.cameraStop = function() {
        var wrap = $(this),
            elem = $('.camera_src', wrap),
            pieID = 'pie_' + wrap.index();
        elem.addClass('stopped');
        if ($('.camera_showcommands').length) {
            var camera_thumbs_wrap = $('.camera_thumbs_wrap', wrap);
        } else {
            var camera_thumbs_wrap = wrap;
        }
    }
})(jQuery);

;
(function($) {
    $.fn.cameraPause = function() {
        var wrap = $(this);
        var elem = $('.camera_src', wrap);
        elem.addClass('paused');
    }
})(jQuery);

;
(function($) {
    $.fn.cameraResume = function() {
        var wrap = $(this);
        var elem = $('.camera_src', wrap);
        if (typeof autoAdv === 'undefined' || autoAdv !== true) {
            elem.removeClass('paused');
        }
    }
})(jQuery);
//! moment.js
//! version : 2.8.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function(undefined) {
    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = '2.8.3',
        // the global-scope this is NOT the global object in Node.js
        globalScope = typeof global !== 'undefined' ? global : this,
        oldGlobalMoment,
        round = Math.round,
        hasOwnProperty = Object.prototype.hasOwnProperty,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for locale config files
        locales = {},

        // extra moment internal properties (plugins register props here)
        momentProperties = [],

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        parseTokenOrdinal = /\d{1,2}/,

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker '+10:00' > ['10', '00'] or '-1530' > ['-15', '30']
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds': 1,
            'Seconds': 1e3,
            'Minutes': 6e4,
            'Hours': 36e5,
            'Days': 864e5,
            'Months': 2592e6,
            'Years': 31536e6
        },

        unitAliases = {
            ms: 'millisecond',
            s: 'second',
            m: 'minute',
            h: 'hour',
            d: 'day',
            D: 'date',
            w: 'week',
            W: 'isoWeek',
            M: 'month',
            Q: 'quarter',
            y: 'year',
            DDD: 'dayOfYear',
            e: 'weekday',
            E: 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear: 'dayOfYear',
            isoweekday: 'isoWeekday',
            isoweek: 'isoWeek',
            weekyear: 'weekYear',
            isoweekyear: 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // default relative time thresholds
        relativeTimeThresholds = {
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month
            M: 11 // months to year
        },

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M: function() {
                return this.month() + 1;
            },
            MMM: function(format) {
                return this.localeData().monthsShort(this, format);
            },
            MMMM: function(format) {
                return this.localeData().months(this, format);
            },
            D: function() {
                return this.date();
            },
            DDD: function() {
                return this.dayOfYear();
            },
            d: function() {
                return this.day();
            },
            dd: function(format) {
                return this.localeData().weekdaysMin(this, format);
            },
            ddd: function(format) {
                return this.localeData().weekdaysShort(this, format);
            },
            dddd: function(format) {
                return this.localeData().weekdays(this, format);
            },
            w: function() {
                return this.week();
            },
            W: function() {
                return this.isoWeek();
            },
            YY: function() {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY: function() {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY: function() {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY: function() {
                var y = this.year(),
                    sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg: function() {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg: function() {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg: function() {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG: function() {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG: function() {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG: function() {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e: function() {
                return this.weekday();
            },
            E: function() {
                return this.isoWeekday();
            },
            a: function() {
                return this.localeData().meridiem(this.hours(), this.minutes(), true);
            },
            A: function() {
                return this.localeData().meridiem(this.hours(), this.minutes(), false);
            },
            H: function() {
                return this.hours();
            },
            h: function() {
                return this.hours() % 12 || 12;
            },
            m: function() {
                return this.minutes();
            },
            s: function() {
                return this.seconds();
            },
            S: function() {
                return toInt(this.milliseconds() / 100);
            },
            SS: function() {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS: function() {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS: function() {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z: function() {
                var a = -this.zone(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ: function() {
                var a = -this.zone(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z: function() {
                return this.zoneAbbr();
            },
            zz: function() {
                return this.zoneName();
            },
            X: function() {
                return this.unix();
            },
            Q: function() {
                return this.quarter();
            }
        },

        deprecations = {},

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];

    // Pick the first defined of two or three arguments. dfl comes from
    // default.
    function dfl(a, b, c) {
        switch (arguments.length) {
            case 2:
                return a != null ? a : b;
            case 3:
                return a != null ? a : b != null ? b : c;
            default:
                throw new Error('Implement me');
        }
    }

    function hasOwnProp(a, b) {
        return hasOwnProperty.call(a, b);
    }

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false
        };
    }

    function printMsg(msg) {
        if (moment.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
            if (firstTime) {
                printMsg(msg);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            printMsg(msg);
            deprecations[name] = true;
        }
    }

    function padToken(func, count) {
        return function(a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }

    function ordinalizeToken(func, period) {
        return function(a) {
            return this.localeData().ordinal(func.call(this, a), period);
        };
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    /************************************
        Constructors
    ************************************/

    function Locale() {}

    // Moment prototype object
    function Moment(config, skipOverflow) {
        if (skipOverflow !== false) {
            checkOverflow(config);
        }
        copyConfig(this, config);
        this._d = new Date(+config._d);
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = moment.localeData();

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = from._pf;
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    function positiveMomentsDifference(base, other) {
        var res = {
            milliseconds: 0,
            months: 0
        };

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = makeAs(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function(val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val;
                val = period;
                period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = moment.duration(val, period);
            addOrSubtractDurationFromMoment(this, dur, direction);
            return this;
        };
    }

    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
        }
        if (months) {
            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            moment.updateOffset(mom, days || months);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return Object.prototype.toString.call(input) === '[object Date]' ||
            input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        } else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        } else {
            return;
        }

        moment[field] = function(format, index) {
            var i, getter,
                method = moment._locale[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function(i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment._locale, m, format || '');
            };

            if (index != null) {
                return getter(index);
            } else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0;
            }
        }
        return m._isValid;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && hasModule) {
            try {
                oldLocale = moment.locale();
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
                moment.locale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function makeAs(input, model) {
        return model._isUTC ? moment(input).zone(model._offset || 0) :
            moment(input).local();
    }

    /************************************
        Locale
    ************************************/


    extend(Locale.prototype, {

        set: function(config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        },

        _months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        months: function(m) {
            return this._months[m.month()];
        },

        _monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        monthsShort: function(m) {
            return this._monthsShort[m.month()];
        },

        monthsParse: function(monthName) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                if (!this._monthsParse[i]) {
                    mom = moment.utc([2000, i]);
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdays: function(m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysShort: function(m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        weekdaysMin: function(m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse: function(weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat: {
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY LT',
            LLLL: 'dddd, MMMM D, YYYY LT'
        },
        longDateFormat: function(key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function(val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM: function(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse: /[ap]\.?m?\.?/i,
        meridiem: function(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },

        _calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        calendar: function(key, mom) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom) : output;
        },

        _relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },

        relativeTime: function(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },

        pastFuture: function(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal: function(number) {
            return this._ordinal.replace('%d', number);
        },
        _ordinal: '%d',

        preparse: function(string) {
            return string;
        },

        postformat: function(string) {
            return string;
        },

        week: function(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        },

        _invalidDate: 'Invalid date',
        invalidDate: function() {
            return this._invalidDate;
        }
    });

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function(mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
            case 'Q':
                return parseTokenOneDigit;
            case 'DDDD':
                return parseTokenThreeDigits;
            case 'YYYY':
            case 'GGGG':
            case 'gggg':
                return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
            case 'Y':
            case 'G':
            case 'g':
                return parseTokenSignedNumber;
            case 'YYYYYY':
            case 'YYYYY':
            case 'GGGGG':
            case 'ggggg':
                return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
            case 'S':
                if (strict) {
                    return parseTokenOneDigit;
                }
                /* falls through */
            case 'SS':
                if (strict) {
                    return parseTokenTwoDigits;
                }
                /* falls through */
            case 'SSS':
                if (strict) {
                    return parseTokenThreeDigits;
                }
                /* falls through */
            case 'DDD':
                return parseTokenOneToThreeDigits;
            case 'MMM':
            case 'MMMM':
            case 'dd':
            case 'ddd':
            case 'dddd':
                return parseTokenWord;
            case 'a':
            case 'A':
                return config._locale._meridiemParse;
            case 'X':
                return parseTokenTimestampMs;
            case 'Z':
            case 'ZZ':
                return parseTokenTimezone;
            case 'T':
                return parseTokenT;
            case 'SSSS':
                return parseTokenDigits;
            case 'MM':
            case 'DD':
            case 'YY':
            case 'GG':
            case 'gg':
            case 'HH':
            case 'hh':
            case 'mm':
            case 'ss':
            case 'ww':
            case 'WW':
                return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
            case 'M':
            case 'D':
            case 'd':
            case 'H':
            case 'h':
            case 'm':
            case 's':
            case 'w':
            case 'W':
            case 'e':
            case 'E':
                return parseTokenOneOrTwoDigits;
            case 'Do':
                return parseTokenOrdinal;
            default:
                a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
                return a;
        }
    }

    function timezoneMinutesFromString(string) {
        string = string || '';
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? -minutes : minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
            // QUARTER
            case 'Q':
                if (input != null) {
                    datePartArray[MONTH] = (toInt(input) - 1) * 3;
                }
                break;
                // MONTH
            case 'M': // fall through to MM
            case 'MM':
                if (input != null) {
                    datePartArray[MONTH] = toInt(input) - 1;
                }
                break;
            case 'MMM': // fall through to MMMM
            case 'MMMM':
                a = config._locale.monthsParse(input);
                // if we didn't find a month name, mark the date as invalid.
                if (a != null) {
                    datePartArray[MONTH] = a;
                } else {
                    config._pf.invalidMonth = input;
                }
                break;
                // DAY OF MONTH
            case 'D': // fall through to DD
            case 'DD':
                if (input != null) {
                    datePartArray[DATE] = toInt(input);
                }
                break;
            case 'Do':
                if (input != null) {
                    datePartArray[DATE] = toInt(parseInt(input, 10));
                }
                break;
                // DAY OF YEAR
            case 'DDD': // fall through to DDDD
            case 'DDDD':
                if (input != null) {
                    config._dayOfYear = toInt(input);
                }

                break;
                // YEAR
            case 'YY':
                datePartArray[YEAR] = moment.parseTwoDigitYear(input);
                break;
            case 'YYYY':
            case 'YYYYY':
            case 'YYYYYY':
                datePartArray[YEAR] = toInt(input);
                break;
                // AM / PM
            case 'a': // fall through to A
            case 'A':
                config._isPm = config._locale.isPM(input);
                break;
                // 24 HOUR
            case 'H': // fall through to hh
            case 'HH': // fall through to hh
            case 'h': // fall through to hh
            case 'hh':
                datePartArray[HOUR] = toInt(input);
                break;
                // MINUTE
            case 'm': // fall through to mm
            case 'mm':
                datePartArray[MINUTE] = toInt(input);
                break;
                // SECOND
            case 's': // fall through to ss
            case 'ss':
                datePartArray[SECOND] = toInt(input);
                break;
                // MILLISECOND
            case 'S':
            case 'SS':
            case 'SSS':
            case 'SSSS':
                datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
                break;
                // UNIX TIMESTAMP WITH MS
            case 'X':
                config._d = new Date(parseFloat(input) * 1000);
                break;
                // TIMEZONE
            case 'Z': // fall through to ZZ
            case 'ZZ':
                config._useUTC = true;
                config._tzm = timezoneMinutesFromString(input);
                break;
                // WEEKDAY - human
            case 'dd':
            case 'ddd':
            case 'dddd':
                a = config._locale.weekdaysParse(input);
                // if we didn't get a weekday name, mark the date as invalid
                if (a != null) {
                    config._w = config._w || {};
                    config._w['d'] = a;
                } else {
                    config._pf.invalidWeekday = input;
                }
                break;
                // WEEK, WEEK DAY - numeric
            case 'w':
            case 'ww':
            case 'W':
            case 'WW':
            case 'd':
            case 'e':
            case 'E':
                token = token.substr(0, 1);
                /* falls through */
            case 'gggg':
            case 'GGGG':
            case 'GGGGG':
                token = token.substr(0, 2);
                if (input) {
                    config._w = config._w || {};
                    config._w[token] = toInt(input);
                }
                break;
            case 'gg':
            case 'GG':
                config._w = config._w || {};
                config._w[token] = moment.parseTwoDigitYear(input);
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
            week = dfl(w.W, 1);
            weekday = dfl(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
            week = dfl(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [],
            currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
        // Apply timezone offset from input. The actual zone can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
        }
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {
        if (config._f === moment.ISO_8601) {
            parseISO(config);
            return;
        }

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                } else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // handle am pm
        if (config._isPm && config._a[HOUR] < 12) {
            config._a[HOUR] += 12;
        }
        // if is 12 am, change hours to 0
        if (config._isPm === false && config._a[HOUR] === 12) {
            config._a[HOUR] = 0;
        }

        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function parseISO(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be 'T' or undefined
                    config._f = isoDates[i][0] + (match[6] || ' ');
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += 'Z';
            }
            makeDateFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function makeDateFromString(config) {
        parseISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            moment.createFromInputFallback(config);
        }
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function makeDateFromInput(config) {
        var input = config._i,
            matched;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function(obj) {
                return parseInt(obj, 10);
            });
            dateFromConfig(config);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            moment.createFromInputFallback(config);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, locale) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            } else {
                input = locale.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = moment.duration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            years = round(duration.as('y')),

            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||
            minutes === 1 && ['m'] ||
            minutes < relativeTimeThresholds.m && ['mm', minutes] ||
            hours === 1 && ['h'] ||
            hours < relativeTimeThresholds.h && ['hh', hours] ||
            days === 1 && ['d'] ||
            days < relativeTimeThresholds.d && ['dd', days] ||
            months === 1 && ['M'] ||
            months < relativeTimeThresholds.M && ['MM', months] ||
            years === 1 && ['y'] || ['yy', years];

        args[2] = withoutSuffix;
        args[3] = +posNegDuration > 0;
        args[4] = locale;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(),
            daysToAdd, dayOfYear;

        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || moment.localeData(config._l);

        if (input === null || (format === undefined && input === '')) {
            return moment.invalid({
                nullInput: true
            });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (moment.isMoment(input)) {
            return new Moment(input, true);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        return new Moment(config);
    }

    moment = function(input, format, locale, strict) {
        var c;

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = locale;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    moment.suppressDeprecationWarnings = false;

    moment.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function(config) {
            config._d = new Date(config._i);
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return moment();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    moment.min = function() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    };

    moment.max = function() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    };

    // creating with utc
    moment.utc = function(input, format, locale, strict) {
        var c;

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function(input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso,
            diffRes;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            parseIso = function(inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        } else if (typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(moment(duration.from), moment(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // constant that refers to the ISO standard
    moment.ISO_8601 = function() {};

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    moment.momentProperties = momentProperties;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function() {};

    // This function allows you to set a threshold for relative time strings
    moment.relativeTimeThreshold = function(threshold, limit) {
        if (relativeTimeThresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return relativeTimeThresholds[threshold];
        }
        relativeTimeThresholds[threshold] = limit;
        return true;
    };

    moment.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        function(key, value) {
            return moment.locale(key, value);
        }
    );

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    moment.locale = function(key, values) {
        var data;
        if (key) {
            if (typeof(values) !== 'undefined') {
                data = moment.defineLocale(key, values);
            } else {
                data = moment.localeData(key);
            }

            if (data) {
                moment.duration._locale = moment._locale = data;
            }
        }

        return moment._locale._abbr;
    };

    moment.defineLocale = function(name, values) {
        if (values !== null) {
            values.abbr = name;
            if (!locales[name]) {
                locales[name] = new Locale();
            }
            locales[name].set(values);

            // backwards compat for now: also set the locale
            moment.locale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    };

    moment.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        function(key) {
            return moment.localeData(key);
        }
    );

    // returns locale data
    moment.localeData = function(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return moment._locale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    };

    // compare moment object
    moment.isMoment = function(obj) {
        return obj instanceof Moment ||
            (obj != null && hasOwnProp(obj, '_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function(obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function(units) {
        return normalizeUnits(units);
    };

    moment.invalid = function(flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        } else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function() {
        return moment.apply(null, arguments).parseZone();
    };

    moment.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone: function() {
            return moment(this);
        },

        valueOf: function() {
            return +this._d + ((this._offset || 0) * 60000);
        },

        unix: function() {
            return Math.floor(+this / 1000);
        },

        toString: function() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        },

        toDate: function() {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString: function() {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray: function() {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid: function() {
            return isValid(this);
        },

        isDSTShifted: function() {
            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags: function() {
            return extend({}, this._pf);
        },

        invalidAt: function() {
            return this._pf.overflow;
        },

        utc: function(keepLocalTime) {
            return this.zone(0, keepLocalTime);
        },

        local: function(keepLocalTime) {
            if (this._isUTC) {
                this.zone(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.add(this._dateTzOffset(), 'm');
                }
            }
            return this;
        },

        format: function(inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.localeData().postformat(output);
        },

        add: createAdder(1, 'add'),

        subtract: createAdder(-1, 'subtract'),

        diff: function(input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (this.zone() - that.zone()) * 6e4,
                diff, output, daysAdjust;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month') {
                // average number of days in the months in the given dates
                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2
                // difference in months
                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());
                // adjust by taking difference in days, average number of days
                // and dst in the given months.
                daysAdjust = (this - moment(this).startOf('month')) -
                    (that - moment(that).startOf('month'));
                // same as above but with zones, to negate all dst
                daysAdjust -= ((this.zone() - moment(this).startOf('month').zone()) -
                    (that.zone() - moment(that).startOf('month').zone())) * 6e4;
                output += daysAdjust / diff;
                if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = (this - that);
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from: function(time, withoutSuffix) {
            return moment.duration({
                to: this,
                from: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        },

        fromNow: function(withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar: function(time) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're zone'd or not.
            var now = time || moment(),
                sod = makeAs(now, this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.localeData().calendar(format, this));
        },

        isLeapYear: function() {
            return isLeapYear(this.year());
        },

        isDST: function() {
            return (this.zone() < this.clone().month(0).zone() ||
                this.zone() < this.clone().month(5).zone());
        },

        day: function(input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        },

        month: makeAccessor('Month', true),

        startOf: function(units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
                case 'year':
                    this.month(0);
                    /* falls through */
                case 'quarter':
                case 'month':
                    this.date(1);
                    /* falls through */
                case 'week':
                case 'isoWeek':
                case 'day':
                    this.hours(0);
                    /* falls through */
                case 'hour':
                    this.minutes(0);
                    /* falls through */
                case 'minute':
                    this.seconds(0);
                    /* falls through */
                case 'second':
                    this.milliseconds(0);
                    /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            // quarters are also special
            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        },

        endOf: function(units) {
            units = normalizeUnits(units);
            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
        },

        isAfter: function(input, units) {
            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this > +input;
            } else {
                return +this.clone().startOf(units) > +moment(input).startOf(units);
            }
        },

        isBefore: function(input, units) {
            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this < +input;
            } else {
                return +this.clone().startOf(units) < +moment(input).startOf(units);
            }
        },

        isSame: function(input, units) {
            units = normalizeUnits(units || 'millisecond');
            if (units === 'millisecond') {
                input = moment.isMoment(input) ? input : moment(input);
                return +this === +input;
            } else {
                return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
            }
        },

        min: deprecate(
            'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
            function(other) {
                other = moment.apply(null, arguments);
                return other < this ? this : other;
            }
        ),

        max: deprecate(
            'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
            function(other) {
                other = moment.apply(null, arguments);
                return other > this ? this : other;
            }
        ),

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[zone(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist int zone
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        zone: function(input, keepLocalTime) {
            var offset = this._offset || 0,
                localAdjust;
            if (input != null) {
                if (typeof input === 'string') {
                    input = timezoneMinutesFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = this._dateTzOffset();
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.subtract(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addOrSubtractDurationFromMoment(this,
                            moment.duration(offset - input, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        moment.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
            } else {
                return this._isUTC ? offset : this._dateTzOffset();
            }
            return this;
        },

        zoneAbbr: function() {
            return this._isUTC ? 'UTC' : '';
        },

        zoneName: function() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        },

        parseZone: function() {
            if (this._tzm) {
                this.zone(this._tzm);
            } else if (typeof this._i === 'string') {
                this.zone(this._i);
            }
            return this;
        },

        hasAlignedHourOffset: function(input) {
            if (!input) {
                input = 0;
            } else {
                input = moment(input).zone();
            }

            return (this.zone() - input) % 60 === 0;
        },

        daysInMonth: function() {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear: function(input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
        },

        quarter: function(input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        },

        weekYear: function(input) {
            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        isoWeekYear: function(input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        week: function(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        isoWeek: function(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        weekday: function(input) {
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        },

        isoWeekday: function(input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        isoWeeksInYear: function() {
            return weeksInYear(this.year(), 1, 4);
        },

        weeksInYear: function() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },

        get: function(units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set: function(units, value) {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                this[units](value);
            }
            return this;
        },

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        locale: function(key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = moment.localeData(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        },

        lang: deprecate(
            'moment().lang() is deprecated. Use moment().localeData() instead.',
            function(key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        ),

        localeData: function() {
            return this._locale;
        },

        _dateTzOffset: function() {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return Math.round(this._d.getTimezoneOffset() / 15) * 15;
        }
    });

    function rawMonthSetter(mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(),
            daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function rawGetter(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function rawSetter(mom, unit, value) {
        if (unit === 'Month') {
            return rawMonthSetter(mom, value);
        } else {
            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    function makeAccessor(unit, keepTime) {
        return function(value) {
            if (value != null) {
                rawSetter(this, unit, value);
                moment.updateOffset(this, keepTime);
                return this;
            } else {
                return rawGetter(this, unit);
            }
        };
    }

    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
    // moment.fn.month is defined separately
    moment.fn.date = makeAccessor('Date', true);
    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
    moment.fn.year = makeAccessor('FullYear', true);
    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;
    moment.fn.quarters = moment.fn.quarter;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    /************************************
        Duration Prototype
    ************************************/


    function daysToYears(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        return days * 400 / 146097;
    }

    function yearsToDays(years) {
        // years * 365 + absRound(years / 4) -
        //     absRound(years / 100) + absRound(years / 400);
        return years * 146097 / 400;
    }

    extend(moment.duration.fn = Duration.prototype, {

        _bubble: function() {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years = 0;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);

            // Accurately convert days to years, assume start from year 0.
            years = absRound(daysToYears(days));
            days -= absRound(yearsToDays(years));

            // 30 days to a month
            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
            months += absRound(days / 30);
            days %= 30;

            // 12 months -> 1 year
            years += absRound(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;
        },

        abs: function() {
            this._milliseconds = Math.abs(this._milliseconds);
            this._days = Math.abs(this._days);
            this._months = Math.abs(this._months);

            this._data.milliseconds = Math.abs(this._data.milliseconds);
            this._data.seconds = Math.abs(this._data.seconds);
            this._data.minutes = Math.abs(this._data.minutes);
            this._data.hours = Math.abs(this._data.hours);
            this._data.months = Math.abs(this._data.months);
            this._data.years = Math.abs(this._data.years);

            return this;
        },

        weeks: function() {
            return absRound(this.days() / 7);
        },

        valueOf: function() {
            return this._milliseconds +
                this._days * 864e5 +
                (this._months % 12) * 2592e6 +
                toInt(this._months / 12) * 31536e6;
        },

        humanize: function(withSuffix) {
            var output = relativeTime(this, !withSuffix, this.localeData());

            if (withSuffix) {
                output = this.localeData().pastFuture(+this, output);
            }

            return this.localeData().postformat(output);
        },

        add: function(input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract: function(input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get: function(units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as: function(units) {
            var days, months;
            units = normalizeUnits(units);

            if (units === 'month' || units === 'year') {
                days = this._days + this._milliseconds / 864e5;
                months = this._months + daysToYears(days) * 12;
                return units === 'month' ? months : months / 12;
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + yearsToDays(this._months / 12);
                switch (units) {
                    case 'week':
                        return days / 7 + this._milliseconds / 6048e5;
                    case 'day':
                        return days + this._milliseconds / 864e5;
                    case 'hour':
                        return days * 24 + this._milliseconds / 36e5;
                    case 'minute':
                        return days * 24 * 60 + this._milliseconds / 6e4;
                    case 'second':
                        return days * 24 * 60 * 60 + this._milliseconds / 1000;
                        // Math.floor prevents floating point math errors here
                    case 'millisecond':
                        return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds;
                    default:
                        throw new Error('Unknown unit ' + units);
                }
            }
        },

        lang: moment.fn.lang,
        locale: moment.fn.locale,

        toIsoString: deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead ' +
            '(notice the capitals)',
            function() {
                return this.toISOString();
            }
        ),

        toISOString: function() {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        },

        localeData: function() {
            return this._locale;
        }
    });

    moment.duration.fn.toString = moment.duration.fn.toISOString;

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function() {
            return this._data[name];
        };
    }

    for (i in unitMillisecondFactors) {
        if (hasOwnProp(unitMillisecondFactors, i)) {
            makeDurationGetter(i.toLowerCase());
        }
    }

    moment.duration.fn.asMilliseconds = function() {
        return this.as('ms');
    };
    moment.duration.fn.asSeconds = function() {
        return this.as('s');
    };
    moment.duration.fn.asMinutes = function() {
        return this.as('m');
    };
    moment.duration.fn.asHours = function() {
        return this.as('h');
    };
    moment.duration.fn.asDays = function() {
        return this.as('d');
    };
    moment.duration.fn.asWeeks = function() {
        return this.as('weeks');
    };
    moment.duration.fn.asMonths = function() {
        return this.as('M');
    };
    moment.duration.fn.asYears = function() {
        return this.as('y');
    };

    /************************************
        Default Locale
    ************************************/


    // Set default locale, other locale will inherit from English.
    moment.locale('en', {
        ordinal: function(number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    /* EMBED_LOCALES */

    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(shouldDeprecate) {
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        oldGlobalMoment = globalScope.moment;
        if (shouldDeprecate) {
            globalScope.moment = deprecate(
                'Accessing Moment through the global scope is ' +
                'deprecated, and will be removed in an upcoming ' +
                'release.',
                moment);
        } else {
            globalScope.moment = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
    } else if (typeof define === 'function' && define.amd) {
        define('moment', function(require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal === true) {
                // release the global variable
                globalScope.moment = oldGlobalMoment;
            }

            return moment;
        });
        makeGlobal(true);
    } else {
        makeGlobal();
    }
}).call(this);

/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under the MIT license
 */

if (typeof jQuery === 'undefined') {
    throw new Error('Bootstrap\'s JavaScript requires jQuery')
}

+
function($) {
    'use strict';
    var version = $.fn.jquery.split(' ')[0].split('.')
    if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 2)) {
        throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3')
    }
}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.6
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
    // ============================================================

    function transitionEnd() {
        var el = document.createElement('bootstrap')

        var transEndEventNames = {
            WebkitTransition: 'webkitTransitionEnd',
            MozTransition: 'transitionend',
            OTransition: 'oTransitionEnd otransitionend',
            transition: 'transitionend'
        }

        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return {
                    end: transEndEventNames[name]
                }
            }
        }

        return false // explicit for ie8 (  ._.)
    }

    // http://blog.alexmaccaw.com/css-transitions
    $.fn.emulateTransitionEnd = function(duration) {
        var called = false
        var $el = this
        $(this).one('bsTransitionEnd', function() {
            called = true
        })
        var callback = function() {
            if (!called) $($el).trigger($.support.transition.end)
        }
        setTimeout(callback, duration)
        return this
    }

    $(function() {
        $.support.transition = transitionEnd()

        if (!$.support.transition) return

        $.event.special.bsTransitionEnd = {
            bindType: $.support.transition.end,
            delegateType: $.support.transition.end,
            handle: function(e) {
                if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
            }
        }
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.3.6
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // ALERT CLASS DEFINITION
    // ======================

    var dismiss = '[data-dismiss="alert"]'
    var Alert = function(el) {
        $(el).on('click', dismiss, this.close)
    }

    Alert.VERSION = '3.3.6'

    Alert.TRANSITION_DURATION = 150

    Alert.prototype.close = function(e) {
        var $this = $(this)
        var selector = $this.attr('data-target')

        if (!selector) {
            selector = $this.attr('href')
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
        }

        var $parent = $(selector)

        if (e) e.preventDefault()

        if (!$parent.length) {
            $parent = $this.closest('.alert')
        }

        $parent.trigger(e = $.Event('close.bs.alert'))

        if (e.isDefaultPrevented()) return

        $parent.removeClass('in')

        function removeElement() {
            // detach from parent, fire event then clean up data
            $parent.detach().trigger('closed.bs.alert').remove()
        }

        $.support.transition && $parent.hasClass('fade') ?
            $parent
            .one('bsTransitionEnd', removeElement)
            .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
            removeElement()
    }


    // ALERT PLUGIN DEFINITION
    // =======================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.alert')

            if (!data) $this.data('bs.alert', (data = new Alert(this)))
            if (typeof option == 'string') data[option].call($this)
        })
    }

    var old = $.fn.alert

    $.fn.alert = Plugin
    $.fn.alert.Constructor = Alert


    // ALERT NO CONFLICT
    // =================

    $.fn.alert.noConflict = function() {
        $.fn.alert = old
        return this
    }


    // ALERT DATA-API
    // ==============

    $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.3.6
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // BUTTON PUBLIC CLASS DEFINITION
    // ==============================

    var Button = function(element, options) {
        this.$element = $(element)
        this.options = $.extend({}, Button.DEFAULTS, options)
        this.isLoading = false
    }

    Button.VERSION = '3.3.6'

    Button.DEFAULTS = {
        loadingText: 'loading...'
    }

    Button.prototype.setState = function(state) {
        var d = 'disabled'
        var $el = this.$element
        var val = $el.is('input') ? 'val' : 'html'
        var data = $el.data()

        state += 'Text'

        if (data.resetText == null) $el.data('resetText', $el[val]())

        // push to event loop to allow forms to submit
        setTimeout($.proxy(function() {
            $el[val](data[state] == null ? this.options[state] : data[state])

            if (state == 'loadingText') {
                this.isLoading = true
                $el.addClass(d).attr(d, d)
            } else if (this.isLoading) {
                this.isLoading = false
                $el.removeClass(d).removeAttr(d)
            }
        }, this), 0)
    }

    Button.prototype.toggle = function() {
        var changed = true
        var $parent = this.$element.closest('[data-toggle="buttons"]')

        if ($parent.length) {
            var $input = this.$element.find('input')
            if ($input.prop('type') == 'radio') {
                if ($input.prop('checked')) changed = false
                $parent.find('.active').removeClass('active')
                this.$element.addClass('active')
            } else if ($input.prop('type') == 'checkbox') {
                if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
                this.$element.toggleClass('active')
            }
            $input.prop('checked', this.$element.hasClass('active'))
            if (changed) $input.trigger('change')
        } else {
            this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
            this.$element.toggleClass('active')
        }
    }


    // BUTTON PLUGIN DEFINITION
    // ========================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.button')
            var options = typeof option == 'object' && option

            if (!data) $this.data('bs.button', (data = new Button(this, options)))

            if (option == 'toggle') data.toggle()
            else if (option) data.setState(option)
        })
    }

    var old = $.fn.button

    $.fn.button = Plugin
    $.fn.button.Constructor = Button


    // BUTTON NO CONFLICT
    // ==================

    $.fn.button.noConflict = function() {
        $.fn.button = old
        return this
    }


    // BUTTON DATA-API
    // ===============

    $(document)
        .on('click.bs.button.data-api', '[data-toggle^="button"]', function(e) {
            var $btn = $(e.target)
            if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
            Plugin.call($btn, 'toggle')
            if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
        })
        .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function(e) {
            $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
        })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.3.6
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // CAROUSEL CLASS DEFINITION
    // =========================

    var Carousel = function(element, options) {
        this.$element = $(element)
        this.$indicators = this.$element.find('.carousel-indicators')
        this.options = options
        this.paused = null
        this.sliding = null
        this.interval = null
        this.$active = null
        this.$items = null

        this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

        this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
            .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
            .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
    }

    Carousel.VERSION = '3.3.6'

    Carousel.TRANSITION_DURATION = 600

    Carousel.DEFAULTS = {
        interval: 5000,
        pause: 'hover',
        wrap: true,
        keyboard: true
    }

    Carousel.prototype.keydown = function(e) {
        if (/input|textarea/i.test(e.target.tagName)) return
        switch (e.which) {
            case 37:
                this.prev();
                break
            case 39:
                this.next();
                break
            default:
                return
        }

        e.preventDefault()
    }

    Carousel.prototype.cycle = function(e) {
        e || (this.paused = false)

        this.interval && clearInterval(this.interval)

        this.options.interval &&
            !this.paused &&
            (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

        return this
    }

    Carousel.prototype.getItemIndex = function(item) {
        this.$items = item.parent().children('.item')
        return this.$items.index(item || this.$active)
    }

    Carousel.prototype.getItemForDirection = function(direction, active) {
        var activeIndex = this.getItemIndex(active)
        var willWrap = (direction == 'prev' && activeIndex === 0) ||
            (direction == 'next' && activeIndex == (this.$items.length - 1))
        if (willWrap && !this.options.wrap) return active
        var delta = direction == 'prev' ? -1 : 1
        var itemIndex = (activeIndex + delta) % this.$items.length
        return this.$items.eq(itemIndex)
    }

    Carousel.prototype.to = function(pos) {
        var that = this
        var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

        if (pos > (this.$items.length - 1) || pos < 0) return

        if (this.sliding) return this.$element.one('slid.bs.carousel', function() {
            that.to(pos)
        }) // yes, "slid"
        if (activeIndex == pos) return this.pause().cycle()

        return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
    }

    Carousel.prototype.pause = function(e) {
        e || (this.paused = true)

        if (this.$element.find('.next, .prev').length && $.support.transition) {
            this.$element.trigger($.support.transition.end)
            this.cycle(true)
        }

        this.interval = clearInterval(this.interval)

        return this
    }

    Carousel.prototype.next = function() {
        if (this.sliding) return
        return this.slide('next')
    }

    Carousel.prototype.prev = function() {
        if (this.sliding) return
        return this.slide('prev')
    }

    Carousel.prototype.slide = function(type, next) {
        var $active = this.$element.find('.item.active')
        var $next = next || this.getItemForDirection(type, $active)
        var isCycling = this.interval
        var direction = type == 'next' ? 'left' : 'right'
        var that = this

        if ($next.hasClass('active')) return (this.sliding = false)

        var relatedTarget = $next[0]
        var slideEvent = $.Event('slide.bs.carousel', {
            relatedTarget: relatedTarget,
            direction: direction
        })
        this.$element.trigger(slideEvent)
        if (slideEvent.isDefaultPrevented()) return

        this.sliding = true

        isCycling && this.pause()

        if (this.$indicators.length) {
            this.$indicators.find('.active').removeClass('active')
            var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
            $nextIndicator && $nextIndicator.addClass('active')
        }

        var slidEvent = $.Event('slid.bs.carousel', {
            relatedTarget: relatedTarget,
            direction: direction
        }) // yes, "slid"
        if ($.support.transition && this.$element.hasClass('slide')) {
            $next.addClass(type)
            $next[0].offsetWidth // force reflow
            $active.addClass(direction)
            $next.addClass(direction)
            $active
                .one('bsTransitionEnd', function() {
                    $next.removeClass([type, direction].join(' ')).addClass('active')
                    $active.removeClass(['active', direction].join(' '))
                    that.sliding = false
                    setTimeout(function() {
                        that.$element.trigger(slidEvent)
                    }, 0)
                })
                .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
        } else {
            $active.removeClass('active')
            $next.addClass('active')
            this.sliding = false
            this.$element.trigger(slidEvent)
        }

        isCycling && this.cycle()

        return this
    }


    // CAROUSEL PLUGIN DEFINITION
    // ==========================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.carousel')
            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
            var action = typeof option == 'string' ? option : options.slide

            if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
            if (typeof option == 'number') data.to(option)
            else if (action) data[action]()
            else if (options.interval) data.pause().cycle()
        })
    }

    var old = $.fn.carousel

    $.fn.carousel = Plugin
    $.fn.carousel.Constructor = Carousel


    // CAROUSEL NO CONFLICT
    // ====================

    $.fn.carousel.noConflict = function() {
        $.fn.carousel = old
        return this
    }


    // CAROUSEL DATA-API
    // =================

    var clickHandler = function(e) {
        var href
        var $this = $(this)
        var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
        if (!$target.hasClass('carousel')) return
        var options = $.extend({}, $target.data(), $this.data())
        var slideIndex = $this.attr('data-slide-to')
        if (slideIndex) options.interval = false

        Plugin.call($target, options)

        if (slideIndex) {
            $target.data('bs.carousel').to(slideIndex)
        }

        e.preventDefault()
    }

    $(document)
        .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
        .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

    $(window).on('load', function() {
        $('[data-ride="carousel"]').each(function() {
            var $carousel = $(this)
            Plugin.call($carousel, $carousel.data())
        })
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.6
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // COLLAPSE PUBLIC CLASS DEFINITION
    // ================================

    var Collapse = function(element, options) {
        this.$element = $(element)
        this.options = $.extend({}, Collapse.DEFAULTS, options)
        this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
            '[data-toggle="collapse"][data-target="#' + element.id + '"]')
        this.transitioning = null

        if (this.options.parent) {
            this.$parent = this.getParent()
        } else {
            this.addAriaAndCollapsedClass(this.$element, this.$trigger)
        }

        if (this.options.toggle) this.toggle()
    }

    Collapse.VERSION = '3.3.6'

    Collapse.TRANSITION_DURATION = 350

    Collapse.DEFAULTS = {
        toggle: true
    }

    Collapse.prototype.dimension = function() {
        var hasWidth = this.$element.hasClass('width')
        return hasWidth ? 'width' : 'height'
    }

    Collapse.prototype.show = function() {
        if (this.transitioning || this.$element.hasClass('in')) return

        var activesData
        var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

        if (actives && actives.length) {
            activesData = actives.data('bs.collapse')
            if (activesData && activesData.transitioning) return
        }

        var startEvent = $.Event('show.bs.collapse')
        this.$element.trigger(startEvent)
        if (startEvent.isDefaultPrevented()) return

        if (actives && actives.length) {
            Plugin.call(actives, 'hide')
            activesData || actives.data('bs.collapse', null)
        }

        var dimension = this.dimension()

        this.$element
            .removeClass('collapse')
            .addClass('collapsing')[dimension](0)
            .attr('aria-expanded', true)

        this.$trigger
            .removeClass('collapsed')
            .attr('aria-expanded', true)

        this.transitioning = 1

        var complete = function() {
            this.$element
                .removeClass('collapsing')
                .addClass('collapse in')[dimension]('')
            this.transitioning = 0
            this.$element
                .trigger('shown.bs.collapse')
        }

        if (!$.support.transition) return complete.call(this)

        var scrollSize = $.camelCase(['scroll', dimension].join('-'))

        this.$element
            .one('bsTransitionEnd', $.proxy(complete, this))
            .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
    }

    Collapse.prototype.hide = function() {
        if (this.transitioning || !this.$element.hasClass('in')) return

        var startEvent = $.Event('hide.bs.collapse')
        this.$element.trigger(startEvent)
        if (startEvent.isDefaultPrevented()) return

        var dimension = this.dimension()

        this.$element[dimension](this.$element[dimension]())[0].offsetHeight

        this.$element
            .addClass('collapsing')
            .removeClass('collapse in')
            .attr('aria-expanded', false)

        this.$trigger
            .addClass('collapsed')
            .attr('aria-expanded', false)

        this.transitioning = 1

        var complete = function() {
            this.transitioning = 0
            this.$element
                .removeClass('collapsing')
                .addClass('collapse')
                .trigger('hidden.bs.collapse')
        }

        if (!$.support.transition) return complete.call(this)

        this.$element[dimension](0)
            .one('bsTransitionEnd', $.proxy(complete, this))
            .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
    }

    Collapse.prototype.toggle = function() {
        this[this.$element.hasClass('in') ? 'hide' : 'show']()
    }

    Collapse.prototype.getParent = function() {
        return $(this.options.parent)
            .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
            .each($.proxy(function(i, element) {
                var $element = $(element)
                this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
            }, this))
            .end()
    }

    Collapse.prototype.addAriaAndCollapsedClass = function($element, $trigger) {
        var isOpen = $element.hasClass('in')

        $element.attr('aria-expanded', isOpen)
        $trigger
            .toggleClass('collapsed', !isOpen)
            .attr('aria-expanded', isOpen)
    }

    function getTargetFromTrigger($trigger) {
        var href
        var target = $trigger.attr('data-target') ||
            (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

        return $(target)
    }


    // COLLAPSE PLUGIN DEFINITION
    // ==========================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.collapse')
            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

            if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
            if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }

    var old = $.fn.collapse

    $.fn.collapse = Plugin
    $.fn.collapse.Constructor = Collapse


    // COLLAPSE NO CONFLICT
    // ====================

    $.fn.collapse.noConflict = function() {
        $.fn.collapse = old
        return this
    }


    // COLLAPSE DATA-API
    // =================

    $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function(e) {
        var $this = $(this)

        if (!$this.attr('data-target')) e.preventDefault()

        var $target = getTargetFromTrigger($this)
        var data = $target.data('bs.collapse')
        var option = data ? 'toggle' : $this.data()

        Plugin.call($target, option)
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.3.6
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // DROPDOWN CLASS DEFINITION
    // =========================

    var backdrop = '.dropdown-backdrop'
    var toggle = '[data-toggle="dropdown"]'
    var Dropdown = function(element) {
        $(element).on('click.bs.dropdown', this.toggle)
    }

    Dropdown.VERSION = '3.3.6'

    function getParent($this) {
        var selector = $this.attr('data-target')

        if (!selector) {
            selector = $this.attr('href')
            selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
        }

        var $parent = selector && $(selector)

        return $parent && $parent.length ? $parent : $this.parent()
    }

    function clearMenus(e) {
        if (e && e.which === 3) return
        $(backdrop).remove()
        $(toggle).each(function() {
            var $this = $(this)
            var $parent = getParent($this)
            var relatedTarget = {
                relatedTarget: this
            }

            if (!$parent.hasClass('open')) return

            if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

            $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

            if (e.isDefaultPrevented()) return

            $this.attr('aria-expanded', 'false')
            $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
        })
    }

    Dropdown.prototype.toggle = function(e) {
        var $this = $(this)

        if ($this.is('.disabled, :disabled')) return

        var $parent = getParent($this)
        var isActive = $parent.hasClass('open')

        clearMenus()

        if (!isActive) {
            if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
                // if mobile we use a backdrop because click events don't delegate
                $(document.createElement('div'))
                    .addClass('dropdown-backdrop')
                    .insertAfter($(this))
                    .on('click', clearMenus)
            }

            var relatedTarget = {
                relatedTarget: this
            }
            $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

            if (e.isDefaultPrevented()) return

            $this
                .trigger('focus')
                .attr('aria-expanded', 'true')

            $parent
                .toggleClass('open')
                .trigger($.Event('shown.bs.dropdown', relatedTarget))
        }

        return false
    }

    Dropdown.prototype.keydown = function(e) {
        if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

        var $this = $(this)

        e.preventDefault()
        e.stopPropagation()

        if ($this.is('.disabled, :disabled')) return

        var $parent = getParent($this)
        var isActive = $parent.hasClass('open')

        if (!isActive && e.which != 27 || isActive && e.which == 27) {
            if (e.which == 27) $parent.find(toggle).trigger('focus')
            return $this.trigger('click')
        }

        var desc = ' li:not(.disabled):visible a'
        var $items = $parent.find('.dropdown-menu' + desc)

        if (!$items.length) return

        var index = $items.index(e.target)

        if (e.which == 38 && index > 0) index-- // up
            if (e.which == 40 && index < $items.length - 1) index++ // down
                if (!~index) index = 0

        $items.eq(index).trigger('focus')
    }


    // DROPDOWN PLUGIN DEFINITION
    // ==========================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.dropdown')

            if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
            if (typeof option == 'string') data[option].call($this)
        })
    }

    var old = $.fn.dropdown

    $.fn.dropdown = Plugin
    $.fn.dropdown.Constructor = Dropdown


    // DROPDOWN NO CONFLICT
    // ====================

    $.fn.dropdown.noConflict = function() {
        $.fn.dropdown = old
        return this
    }


    // APPLY TO STANDARD DROPDOWN ELEMENTS
    // ===================================

    $(document)
        .on('click.bs.dropdown.data-api', clearMenus)
        .on('click.bs.dropdown.data-api', '.dropdown form', function(e) {
            e.stopPropagation()
        })
        .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
        .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
        .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.3.6
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // MODAL CLASS DEFINITION
    // ======================

    var Modal = function(element, options) {
        this.options = options
        this.$body = $(document.body)
        this.$element = $(element)
        this.$dialog = this.$element.find('.modal-dialog')
        this.$backdrop = null
        this.isShown = null
        this.originalBodyPad = null
        this.scrollbarWidth = 0
        this.ignoreBackdropClick = false

        if (this.options.remote) {
            this.$element
                .find('.modal-content')
                .load(this.options.remote, $.proxy(function() {
                    this.$element.trigger('loaded.bs.modal')
                }, this))
        }
    }

    Modal.VERSION = '3.3.6'

    Modal.TRANSITION_DURATION = 300
    Modal.BACKDROP_TRANSITION_DURATION = 150

    Modal.DEFAULTS = {
        backdrop: true,
        keyboard: true,
        show: true
    }

    Modal.prototype.toggle = function(_relatedTarget) {
        return this.isShown ? this.hide() : this.show(_relatedTarget)
    }

    Modal.prototype.show = function(_relatedTarget) {
        var that = this
        var e = $.Event('show.bs.modal', {
            relatedTarget: _relatedTarget
        })

        this.$element.trigger(e)

        if (this.isShown || e.isDefaultPrevented()) return

        this.isShown = true

        this.checkScrollbar()
        this.setScrollbar()
        this.$body.addClass('modal-open')

        this.escape()
        this.resize()

        this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

        this.$dialog.on('mousedown.dismiss.bs.modal', function() {
            that.$element.one('mouseup.dismiss.bs.modal', function(e) {
                if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
            })
        })

        this.backdrop(function() {
            var transition = $.support.transition && that.$element.hasClass('fade')

            if (!that.$element.parent().length) {
                that.$element.appendTo(that.$body) // don't move modals dom position
            }

            that.$element
                .show()
                .scrollTop(0)

            that.adjustDialog()

            if (transition) {
                that.$element[0].offsetWidth // force reflow
            }

            that.$element.addClass('in')

            that.enforceFocus()

            var e = $.Event('shown.bs.modal', {
                relatedTarget: _relatedTarget
            })

            transition ?
                that.$dialog // wait for modal to slide in
                .one('bsTransitionEnd', function() {
                    that.$element.trigger('focus').trigger(e)
                })
                .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
                that.$element.trigger('focus').trigger(e)
        })
    }

    Modal.prototype.hide = function(e) {
        if (e) e.preventDefault()

        e = $.Event('hide.bs.modal')

        this.$element.trigger(e)

        if (!this.isShown || e.isDefaultPrevented()) return

        this.isShown = false

        this.escape()
        this.resize()

        $(document).off('focusin.bs.modal')

        this.$element
            .removeClass('in')
            .off('click.dismiss.bs.modal')
            .off('mouseup.dismiss.bs.modal')

        this.$dialog.off('mousedown.dismiss.bs.modal')

        $.support.transition && this.$element.hasClass('fade') ?
            this.$element
            .one('bsTransitionEnd', $.proxy(this.hideModal, this))
            .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
            this.hideModal()
    }

    Modal.prototype.enforceFocus = function() {
        $(document)
            .off('focusin.bs.modal') // guard against infinite focus loop
            .on('focusin.bs.modal', $.proxy(function(e) {
                if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                    this.$element.trigger('focus')
                }
            }, this))
    }

    Modal.prototype.escape = function() {
        if (this.isShown && this.options.keyboard) {
            this.$element.on('keydown.dismiss.bs.modal', $.proxy(function(e) {
                e.which == 27 && this.hide()
            }, this))
        } else if (!this.isShown) {
            this.$element.off('keydown.dismiss.bs.modal')
        }
    }

    Modal.prototype.resize = function() {
        if (this.isShown) {
            $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
        } else {
            $(window).off('resize.bs.modal')
        }
    }

    Modal.prototype.hideModal = function() {
        var that = this
        this.$element.hide()
        this.backdrop(function() {
            that.$body.removeClass('modal-open')
            that.resetAdjustments()
            that.resetScrollbar()
            that.$element.trigger('hidden.bs.modal')
        })
    }

    Modal.prototype.removeBackdrop = function() {
        this.$backdrop && this.$backdrop.remove()
        this.$backdrop = null
    }

    Modal.prototype.backdrop = function(callback) {
        var that = this
        var animate = this.$element.hasClass('fade') ? 'fade' : ''

        if (this.isShown && this.options.backdrop) {
            var doAnimate = $.support.transition && animate

            this.$backdrop = $(document.createElement('div'))
                .addClass('modal-backdrop ' + animate)
                .appendTo(this.$body)

            this.$element.on('click.dismiss.bs.modal', $.proxy(function(e) {
                if (this.ignoreBackdropClick) {
                    this.ignoreBackdropClick = false
                    return
                }
                if (e.target !== e.currentTarget) return
                this.options.backdrop == 'static' ?
                    this.$element[0].focus() :
                    this.hide()
            }, this))

            if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

            this.$backdrop.addClass('in')

            if (!callback) return

            doAnimate ?
                this.$backdrop
                .one('bsTransitionEnd', callback)
                .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
                callback()

        } else if (!this.isShown && this.$backdrop) {
            this.$backdrop.removeClass('in')

            var callbackRemove = function() {
                that.removeBackdrop()
                callback && callback()
            }
            $.support.transition && this.$element.hasClass('fade') ?
                this.$backdrop
                .one('bsTransitionEnd', callbackRemove)
                .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
                callbackRemove()

        } else if (callback) {
            callback()
        }
    }

    // these following methods are used to handle overflowing modals

    Modal.prototype.handleUpdate = function() {
        this.adjustDialog()
    }

    Modal.prototype.adjustDialog = function() {
        var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

        this.$element.css({
            paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
            paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
        })
    }

    Modal.prototype.resetAdjustments = function() {
        this.$element.css({
            paddingLeft: '',
            paddingRight: ''
        })
    }

    Modal.prototype.checkScrollbar = function() {
        var fullWindowWidth = window.innerWidth
        if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
            var documentElementRect = document.documentElement.getBoundingClientRect()
            fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
        }
        this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
        this.scrollbarWidth = this.measureScrollbar()
    }

    Modal.prototype.setScrollbar = function() {
        var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
        this.originalBodyPad = document.body.style.paddingRight || ''
        if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
    }

    Modal.prototype.resetScrollbar = function() {
        this.$body.css('padding-right', this.originalBodyPad)
    }

    Modal.prototype.measureScrollbar = function() { // thx walsh
        var scrollDiv = document.createElement('div')
        scrollDiv.className = 'modal-scrollbar-measure'
        this.$body.append(scrollDiv)
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
        this.$body[0].removeChild(scrollDiv)
        return scrollbarWidth
    }


    // MODAL PLUGIN DEFINITION
    // =======================

    function Plugin(option, _relatedTarget) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.modal')
            var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

            if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
            if (typeof option == 'string') data[option](_relatedTarget)
            else if (options.show) data.show(_relatedTarget)
        })
    }

    var old = $.fn.modal

    $.fn.modal = Plugin
    $.fn.modal.Constructor = Modal


    // MODAL NO CONFLICT
    // =================

    $.fn.modal.noConflict = function() {
        $.fn.modal = old
        return this
    }


    // MODAL DATA-API
    // ==============

    $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function(e) {
        var $this = $(this)
        var href = $this.attr('href')
        var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
        var option = $target.data('bs.modal') ? 'toggle' : $.extend({
            remote: !/#/.test(href) && href
        }, $target.data(), $this.data())

        if ($this.is('a')) e.preventDefault()

        $target.one('show.bs.modal', function(showEvent) {
            if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
            $target.one('hidden.bs.modal', function() {
                $this.is(':visible') && $this.trigger('focus')
            })
        })
        Plugin.call($target, option, this)
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.3.6
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // TOOLTIP PUBLIC CLASS DEFINITION
    // ===============================

    var Tooltip = function(element, options) {
        this.type = null
        this.options = null
        this.enabled = null
        this.timeout = null
        this.hoverState = null
        this.$element = null
        this.inState = null

        this.init('tooltip', element, options)
    }

    Tooltip.VERSION = '3.3.6'

    Tooltip.TRANSITION_DURATION = 150

    Tooltip.DEFAULTS = {
        animation: true,
        placement: 'top',
        selector: false,
        template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: 'hover focus',
        title: '',
        delay: 0,
        html: false,
        container: false,
        viewport: {
            selector: 'body',
            padding: 0
        }
    }

    Tooltip.prototype.init = function(type, element, options) {
        this.enabled = true
        this.type = type
        this.$element = $(element)
        this.options = this.getOptions(options)
        this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
        this.inState = {
            click: false,
            hover: false,
            focus: false
        }

        if (this.$element[0] instanceof document.constructor && !this.options.selector) {
            throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
        }

        var triggers = this.options.trigger.split(' ')

        for (var i = triggers.length; i--;) {
            var trigger = triggers[i]

            if (trigger == 'click') {
                this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
            } else if (trigger != 'manual') {
                var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin'
                var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

                this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
                this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
            }
        }

        this.options.selector ?
            (this._options = $.extend({}, this.options, {
                trigger: 'manual',
                selector: ''
            })) :
            this.fixTitle()
    }

    Tooltip.prototype.getDefaults = function() {
        return Tooltip.DEFAULTS
    }

    Tooltip.prototype.getOptions = function(options) {
        options = $.extend({}, this.getDefaults(), this.$element.data(), options)

        if (options.delay && typeof options.delay == 'number') {
            options.delay = {
                show: options.delay,
                hide: options.delay
            }
        }

        return options
    }

    Tooltip.prototype.getDelegateOptions = function() {
        var options = {}
        var defaults = this.getDefaults()

        this._options && $.each(this._options, function(key, value) {
            if (defaults[key] != value) options[key] = value
        })

        return options
    }

    Tooltip.prototype.enter = function(obj) {
        var self = obj instanceof this.constructor ?
            obj : $(obj.currentTarget).data('bs.' + this.type)

        if (!self) {
            self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
            $(obj.currentTarget).data('bs.' + this.type, self)
        }

        if (obj instanceof $.Event) {
            self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
        }

        if (self.tip().hasClass('in') || self.hoverState == 'in') {
            self.hoverState = 'in'
            return
        }

        clearTimeout(self.timeout)

        self.hoverState = 'in'

        if (!self.options.delay || !self.options.delay.show) return self.show()

        self.timeout = setTimeout(function() {
            if (self.hoverState == 'in') self.show()
        }, self.options.delay.show)
    }

    Tooltip.prototype.isInStateTrue = function() {
        for (var key in this.inState) {
            if (this.inState[key]) return true
        }

        return false
    }

    Tooltip.prototype.leave = function(obj) {
        var self = obj instanceof this.constructor ?
            obj : $(obj.currentTarget).data('bs.' + this.type)

        if (!self) {
            self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
            $(obj.currentTarget).data('bs.' + this.type, self)
        }

        if (obj instanceof $.Event) {
            self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
        }

        if (self.isInStateTrue()) return

        clearTimeout(self.timeout)

        self.hoverState = 'out'

        if (!self.options.delay || !self.options.delay.hide) return self.hide()

        self.timeout = setTimeout(function() {
            if (self.hoverState == 'out') self.hide()
        }, self.options.delay.hide)
    }

    Tooltip.prototype.show = function() {
        var e = $.Event('show.bs.' + this.type)

        if (this.hasContent() && this.enabled) {
            this.$element.trigger(e)

            var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
            if (e.isDefaultPrevented() || !inDom) return
            var that = this

            var $tip = this.tip()

            var tipId = this.getUID(this.type)

            this.setContent()
            $tip.attr('id', tipId)
            this.$element.attr('aria-describedby', tipId)

            if (this.options.animation) $tip.addClass('fade')

            var placement = typeof this.options.placement == 'function' ?
                this.options.placement.call(this, $tip[0], this.$element[0]) :
                this.options.placement

            var autoToken = /\s?auto?\s?/i
            var autoPlace = autoToken.test(placement)
            if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

            $tip
                .detach()
                .css({
                    top: 0,
                    left: 0,
                    display: 'block'
                })
                .addClass(placement)
                .data('bs.' + this.type, this)

            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
            this.$element.trigger('inserted.bs.' + this.type)

            var pos = this.getPosition()
            var actualWidth = $tip[0].offsetWidth
            var actualHeight = $tip[0].offsetHeight

            if (autoPlace) {
                var orgPlacement = placement
                var viewportDim = this.getPosition(this.$viewport)

                placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' :
                    placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' :
                    placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' :
                    placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' :
                    placement

                $tip
                    .removeClass(orgPlacement)
                    .addClass(placement)
            }

            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

            this.applyPlacement(calculatedOffset, placement)

            var complete = function() {
                var prevHoverState = that.hoverState
                that.$element.trigger('shown.bs.' + that.type)
                that.hoverState = null

                if (prevHoverState == 'out') that.leave(that)
            }

            $.support.transition && this.$tip.hasClass('fade') ?
                $tip
                .one('bsTransitionEnd', complete)
                .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
                complete()
        }
    }

    Tooltip.prototype.applyPlacement = function(offset, placement) {
        var $tip = this.tip()
        var width = $tip[0].offsetWidth
        var height = $tip[0].offsetHeight

        // manually read margins because getBoundingClientRect includes difference
        var marginTop = parseInt($tip.css('margin-top'), 10)
        var marginLeft = parseInt($tip.css('margin-left'), 10)

        // we must check for NaN for ie 8/9
        if (isNaN(marginTop)) marginTop = 0
        if (isNaN(marginLeft)) marginLeft = 0

        offset.top += marginTop
        offset.left += marginLeft

        // $.fn.offset doesn't round pixel values
        // so we use setOffset directly with our own function B-0
        $.offset.setOffset($tip[0], $.extend({
            using: function(props) {
                $tip.css({
                    top: Math.round(props.top),
                    left: Math.round(props.left)
                })
            }
        }, offset), 0)

        $tip.addClass('in')

        // check to see if placing tip in new offset caused the tip to resize itself
        var actualWidth = $tip[0].offsetWidth
        var actualHeight = $tip[0].offsetHeight

        if (placement == 'top' && actualHeight != height) {
            offset.top = offset.top + height - actualHeight
        }

        var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

        if (delta.left) offset.left += delta.left
        else offset.top += delta.top

        var isVertical = /top|bottom/.test(placement)
        var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
        var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

        $tip.offset(offset)
        this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
    }

    Tooltip.prototype.replaceArrow = function(delta, dimension, isVertical) {
        this.arrow()
            .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
            .css(isVertical ? 'top' : 'left', '')
    }

    Tooltip.prototype.setContent = function() {
        var $tip = this.tip()
        var title = this.getTitle()

        $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
        $tip.removeClass('fade in top bottom left right')
    }

    Tooltip.prototype.hide = function(callback) {
        var that = this
        var $tip = $(this.$tip)
        var e = $.Event('hide.bs.' + this.type)

        function complete() {
            if (that.hoverState != 'in') $tip.detach()
            that.$element
                .removeAttr('aria-describedby')
                .trigger('hidden.bs.' + that.type)
            callback && callback()
        }

        this.$element.trigger(e)

        if (e.isDefaultPrevented()) return

        $tip.removeClass('in')

        $.support.transition && $tip.hasClass('fade') ?
            $tip
            .one('bsTransitionEnd', complete)
            .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
            complete()

        this.hoverState = null

        return this
    }

    Tooltip.prototype.fixTitle = function() {
        var $e = this.$element
        if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
            $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
        }
    }

    Tooltip.prototype.hasContent = function() {
        return this.getTitle()
    }

    Tooltip.prototype.getPosition = function($element) {
        $element = $element || this.$element

        var el = $element[0]
        var isBody = el.tagName == 'BODY'

        var elRect = el.getBoundingClientRect()
        if (elRect.width == null) {
            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
            elRect = $.extend({}, elRect, {
                width: elRect.right - elRect.left,
                height: elRect.bottom - elRect.top
            })
        }
        var elOffset = isBody ? {
            top: 0,
            left: 0
        } : $element.offset()
        var scroll = {
            scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()
        }
        var outerDims = isBody ? {
            width: $(window).width(),
            height: $(window).height()
        } : null

        return $.extend({}, elRect, scroll, outerDims, elOffset)
    }

    Tooltip.prototype.getCalculatedOffset = function(placement, pos, actualWidth, actualHeight) {
        return placement == 'bottom' ? {
                top: pos.top + pos.height,
                left: pos.left + pos.width / 2 - actualWidth / 2
            } :
            placement == 'top' ? {
                top: pos.top - actualHeight,
                left: pos.left + pos.width / 2 - actualWidth / 2
            } :
            placement == 'left' ? {
                top: pos.top + pos.height / 2 - actualHeight / 2,
                left: pos.left - actualWidth
            } :
            /* placement == 'right' */
            {
                top: pos.top + pos.height / 2 - actualHeight / 2,
                left: pos.left + pos.width
            }

    }

    Tooltip.prototype.getViewportAdjustedDelta = function(placement, pos, actualWidth, actualHeight) {
        var delta = {
            top: 0,
            left: 0
        }
        if (!this.$viewport) return delta

        var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
        var viewportDimensions = this.getPosition(this.$viewport)

        if (/right|left/.test(placement)) {
            var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll
            var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
            if (topEdgeOffset < viewportDimensions.top) { // top overflow
                delta.top = viewportDimensions.top - topEdgeOffset
            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
                delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
            }
        } else {
            var leftEdgeOffset = pos.left - viewportPadding
            var rightEdgeOffset = pos.left + viewportPadding + actualWidth
            if (leftEdgeOffset < viewportDimensions.left) { // left overflow
                delta.left = viewportDimensions.left - leftEdgeOffset
            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
                delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
            }
        }

        return delta
    }

    Tooltip.prototype.getTitle = function() {
        var title
        var $e = this.$element
        var o = this.options

        title = $e.attr('data-original-title') ||
            (typeof o.title == 'function' ? o.title.call($e[0]) : o.title)

        return title
    }

    Tooltip.prototype.getUID = function(prefix) {
        do prefix += ~~(Math.random() * 1000000)
        while (document.getElementById(prefix))
        return prefix
    }

    Tooltip.prototype.tip = function() {
        if (!this.$tip) {
            this.$tip = $(this.options.template)
            if (this.$tip.length != 1) {
                throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
            }
        }
        return this.$tip
    }

    Tooltip.prototype.arrow = function() {
        return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
    }

    Tooltip.prototype.enable = function() {
        this.enabled = true
    }

    Tooltip.prototype.disable = function() {
        this.enabled = false
    }

    Tooltip.prototype.toggleEnabled = function() {
        this.enabled = !this.enabled
    }

    Tooltip.prototype.toggle = function(e) {
        var self = this
        if (e) {
            self = $(e.currentTarget).data('bs.' + this.type)
            if (!self) {
                self = new this.constructor(e.currentTarget, this.getDelegateOptions())
                $(e.currentTarget).data('bs.' + this.type, self)
            }
        }

        if (e) {
            self.inState.click = !self.inState.click
            if (self.isInStateTrue()) self.enter(self)
            else self.leave(self)
        } else {
            self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
        }
    }

    Tooltip.prototype.destroy = function() {
        var that = this
        clearTimeout(this.timeout)
        this.hide(function() {
            that.$element.off('.' + that.type).removeData('bs.' + that.type)
            if (that.$tip) {
                that.$tip.detach()
            }
            that.$tip = null
            that.$arrow = null
            that.$viewport = null
        })
    }


    // TOOLTIP PLUGIN DEFINITION
    // =========================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.tooltip')
            var options = typeof option == 'object' && option

            if (!data && /destroy|hide/.test(option)) return
            if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }

    var old = $.fn.tooltip

    $.fn.tooltip = Plugin
    $.fn.tooltip.Constructor = Tooltip


    // TOOLTIP NO CONFLICT
    // ===================

    $.fn.tooltip.noConflict = function() {
        $.fn.tooltip = old
        return this
    }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.3.6
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // POPOVER PUBLIC CLASS DEFINITION
    // ===============================

    var Popover = function(element, options) {
        this.init('popover', element, options)
    }

    if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

    Popover.VERSION = '3.3.6'

    Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
        placement: 'right',
        trigger: 'click',
        content: '',
        template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    })


    // NOTE: POPOVER EXTENDS tooltip.js
    // ================================

    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

    Popover.prototype.constructor = Popover

    Popover.prototype.getDefaults = function() {
        return Popover.DEFAULTS
    }

    Popover.prototype.setContent = function() {
        var $tip = this.tip()
        var title = this.getTitle()
        var content = this.getContent()

        $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
        $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
            this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
        ](content)

        $tip.removeClass('fade top bottom left right in')

        // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
        // this manually by checking the contents.
        if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
    }

    Popover.prototype.hasContent = function() {
        return this.getTitle() || this.getContent()
    }

    Popover.prototype.getContent = function() {
        var $e = this.$element
        var o = this.options

        return $e.attr('data-content') ||
            (typeof o.content == 'function' ?
                o.content.call($e[0]) :
                o.content)
    }

    Popover.prototype.arrow = function() {
        return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
    }


    // POPOVER PLUGIN DEFINITION
    // =========================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.popover')
            var options = typeof option == 'object' && option

            if (!data && /destroy|hide/.test(option)) return
            if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }

    var old = $.fn.popover

    $.fn.popover = Plugin
    $.fn.popover.Constructor = Popover


    // POPOVER NO CONFLICT
    // ===================

    $.fn.popover.noConflict = function() {
        $.fn.popover = old
        return this
    }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.6
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // SCROLLSPY CLASS DEFINITION
    // ==========================

    function ScrollSpy(element, options) {
        this.$body = $(document.body)
        this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
        this.options = $.extend({}, ScrollSpy.DEFAULTS, options)
        this.selector = (this.options.target || '') + ' .nav li > a'
        this.offsets = []
        this.targets = []
        this.activeTarget = null
        this.scrollHeight = 0

        this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
        this.refresh()
        this.process()
    }

    ScrollSpy.VERSION = '3.3.6'

    ScrollSpy.DEFAULTS = {
        offset: 10
    }

    ScrollSpy.prototype.getScrollHeight = function() {
        return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
    }

    ScrollSpy.prototype.refresh = function() {
        var that = this
        var offsetMethod = 'offset'
        var offsetBase = 0

        this.offsets = []
        this.targets = []
        this.scrollHeight = this.getScrollHeight()

        if (!$.isWindow(this.$scrollElement[0])) {
            offsetMethod = 'position'
            offsetBase = this.$scrollElement.scrollTop()
        }

        this.$body
            .find(this.selector)
            .map(function() {
                var $el = $(this)
                var href = $el.data('target') || $el.attr('href')
                var $href = /^#./.test(href) && $(href)

                return ($href &&
                    $href.length &&
                    $href.is(':visible') &&
                    [
                        [$href[offsetMethod]().top + offsetBase, href]
                    ]) || null
            })
            .sort(function(a, b) {
                return a[0] - b[0]
            })
            .each(function() {
                that.offsets.push(this[0])
                that.targets.push(this[1])
            })
    }

    ScrollSpy.prototype.process = function() {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset
        var scrollHeight = this.getScrollHeight()
        var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height()
        var offsets = this.offsets
        var targets = this.targets
        var activeTarget = this.activeTarget
        var i

        if (this.scrollHeight != scrollHeight) {
            this.refresh()
        }

        if (scrollTop >= maxScroll) {
            return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
        }

        if (activeTarget && scrollTop < offsets[0]) {
            this.activeTarget = null
            return this.clear()
        }

        for (i = offsets.length; i--;) {
            activeTarget != targets[i] &&
                scrollTop >= offsets[i] &&
                (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) &&
                this.activate(targets[i])
        }
    }

    ScrollSpy.prototype.activate = function(target) {
        this.activeTarget = target

        this.clear()

        var selector = this.selector +
            '[data-target="' + target + '"],' +
            this.selector + '[href="' + target + '"]'

        var active = $(selector)
            .parents('li')
            .addClass('active')

        if (active.parent('.dropdown-menu').length) {
            active = active
                .closest('li.dropdown')
                .addClass('active')
        }

        active.trigger('activate.bs.scrollspy')
    }

    ScrollSpy.prototype.clear = function() {
        $(this.selector)
            .parentsUntil(this.options.target, '.active')
            .removeClass('active')
    }


    // SCROLLSPY PLUGIN DEFINITION
    // ===========================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.scrollspy')
            var options = typeof option == 'object' && option

            if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }

    var old = $.fn.scrollspy

    $.fn.scrollspy = Plugin
    $.fn.scrollspy.Constructor = ScrollSpy


    // SCROLLSPY NO CONFLICT
    // =====================

    $.fn.scrollspy.noConflict = function() {
        $.fn.scrollspy = old
        return this
    }


    // SCROLLSPY DATA-API
    // ==================

    $(window).on('load.bs.scrollspy.data-api', function() {
        $('[data-spy="scroll"]').each(function() {
            var $spy = $(this)
            Plugin.call($spy, $spy.data())
        })
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.3.6
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // TAB CLASS DEFINITION
    // ====================

    var Tab = function(element) {
        // jscs:disable requireDollarBeforejQueryAssignment
        this.element = $(element)
        // jscs:enable requireDollarBeforejQueryAssignment
    }

    Tab.VERSION = '3.3.6'

    Tab.TRANSITION_DURATION = 150

    Tab.prototype.show = function() {
        var $this = this.element
        var $ul = $this.closest('ul:not(.dropdown-menu)')
        var selector = $this.data('target')

        if (!selector) {
            selector = $this.attr('href')
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
        }

        if ($this.parent('li').hasClass('active')) return

        var $previous = $ul.find('.active:last a')
        var hideEvent = $.Event('hide.bs.tab', {
            relatedTarget: $this[0]
        })
        var showEvent = $.Event('show.bs.tab', {
            relatedTarget: $previous[0]
        })

        $previous.trigger(hideEvent)
        $this.trigger(showEvent)

        if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

        var $target = $(selector)

        this.activate($this.closest('li'), $ul)
        this.activate($target, $target.parent(), function() {
            $previous.trigger({
                type: 'hidden.bs.tab',
                relatedTarget: $this[0]
            })
            $this.trigger({
                type: 'shown.bs.tab',
                relatedTarget: $previous[0]
            })
        })
    }

    Tab.prototype.activate = function(element, container, callback) {
        var $active = container.find('> .active')
        var transition = callback &&
            $.support.transition &&
            ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

        function next() {
            $active
                .removeClass('active')
                .find('> .dropdown-menu > .active')
                .removeClass('active')
                .end()
                .find('[data-toggle="tab"]')
                .attr('aria-expanded', false)

            element
                .addClass('active')
                .find('[data-toggle="tab"]')
                .attr('aria-expanded', true)

            if (transition) {
                element[0].offsetWidth // reflow for transition
                element.addClass('in')
            } else {
                element.removeClass('fade')
            }

            if (element.parent('.dropdown-menu').length) {
                element
                    .closest('li.dropdown')
                    .addClass('active')
                    .end()
                    .find('[data-toggle="tab"]')
                    .attr('aria-expanded', true)
            }

            callback && callback()
        }

        $active.length && transition ?
            $active
            .one('bsTransitionEnd', next)
            .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
            next()

        $active.removeClass('in')
    }


    // TAB PLUGIN DEFINITION
    // =====================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.tab')

            if (!data) $this.data('bs.tab', (data = new Tab(this)))
            if (typeof option == 'string') data[option]()
        })
    }

    var old = $.fn.tab

    $.fn.tab = Plugin
    $.fn.tab.Constructor = Tab


    // TAB NO CONFLICT
    // ===============

    $.fn.tab.noConflict = function() {
        $.fn.tab = old
        return this
    }


    // TAB DATA-API
    // ============

    var clickHandler = function(e) {
        e.preventDefault()
        Plugin.call($(this), 'show')
    }

    $(document)
        .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
        .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.3.6
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+
function($) {
    'use strict';

    // AFFIX CLASS DEFINITION
    // ======================

    var Affix = function(element, options) {
        this.options = $.extend({}, Affix.DEFAULTS, options)

        this.$target = $(this.options.target)
            .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
            .on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this))

        this.$element = $(element)
        this.affixed = null
        this.unpin = null
        this.pinnedOffset = null

        this.checkPosition()
    }

    Affix.VERSION = '3.3.6'

    Affix.RESET = 'affix affix-top affix-bottom'

    Affix.DEFAULTS = {
        offset: 0,
        target: window
    }

    Affix.prototype.getState = function(scrollHeight, height, offsetTop, offsetBottom) {
        var scrollTop = this.$target.scrollTop()
        var position = this.$element.offset()
        var targetHeight = this.$target.height()

        if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

        if (this.affixed == 'bottom') {
            if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
            return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
        }

        var initializing = this.affixed == null
        var colliderTop = initializing ? scrollTop : position.top
        var colliderHeight = initializing ? targetHeight : height

        if (offsetTop != null && scrollTop <= offsetTop) return 'top'
        if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

        return false
    }

    Affix.prototype.getPinnedOffset = function() {
        if (this.pinnedOffset) return this.pinnedOffset
        this.$element.removeClass(Affix.RESET).addClass('affix')
        var scrollTop = this.$target.scrollTop()
        var position = this.$element.offset()
        return (this.pinnedOffset = position.top - scrollTop)
    }

    Affix.prototype.checkPositionWithEventLoop = function() {
        setTimeout($.proxy(this.checkPosition, this), 1)
    }

    Affix.prototype.checkPosition = function() {
        if (!this.$element.is(':visible')) return

        var height = this.$element.height()
        var offset = this.options.offset
        var offsetTop = offset.top
        var offsetBottom = offset.bottom
        var scrollHeight = Math.max($(document).height(), $(document.body).height())

        if (typeof offset != 'object') offsetBottom = offsetTop = offset
        if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element)
        if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

        var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

        if (this.affixed != affix) {
            if (this.unpin != null) this.$element.css('top', '')

            var affixType = 'affix' + (affix ? '-' + affix : '')
            var e = $.Event(affixType + '.bs.affix')

            this.$element.trigger(e)

            if (e.isDefaultPrevented()) return

            this.affixed = affix
            this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

            this.$element
                .removeClass(Affix.RESET)
                .addClass(affixType)
                .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
        }

        if (affix == 'bottom') {
            this.$element.offset({
                top: scrollHeight - height - offsetBottom
            })
        }
    }


    // AFFIX PLUGIN DEFINITION
    // =======================

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this)
            var data = $this.data('bs.affix')
            var options = typeof option == 'object' && option

            if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }

    var old = $.fn.affix

    $.fn.affix = Plugin
    $.fn.affix.Constructor = Affix


    // AFFIX NO CONFLICT
    // =================

    $.fn.affix.noConflict = function() {
        $.fn.affix = old
        return this
    }


    // AFFIX DATA-API
    // ==============

    $(window).on('load', function() {
        $('[data-spy="affix"]').each(function() {
            var $spy = $(this)
            var data = $spy.data()

            data.offset = data.offset || {}

            if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
            if (data.offsetTop != null) data.offset.top = data.offsetTop

            Plugin.call($spy, data)
        })
    })

}(jQuery);

/*!
 * Lightbox for Bootstrap 3 by @ashleydw
 * https://github.com/ashleydw/lightbox
 *
 * License: https://github.com/ashleydw/lightbox/blob/master/LICENSE
 */
(function() {
    "use strict";
    var a, b;
    a = jQuery, b = function(b, c) {
        var d, e, f;
        return this.options = a.extend({
            title: null,
            footer: null,
            remote: null
        }, a.fn.ekkoLightbox.defaults, c || {}), this.$element = a(b), d = "", this.modal_id = this.options.modal_id ? this.options.modal_id : "ekkoLightbox-" + Math.floor(1e3 * Math.random() + 1), f = '<div class="modal-header"' + (this.options.title || this.options.always_show_close ? "" : ' style="display:none"') + '><button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button><h4 class="modal-title">' + (this.options.title || "&nbsp;") + "</h4></div>", e = '<div class="modal-footer"' + (this.options.footer ? "" : ' style="display:none"') + ">" + this.options.footer + "</div>", a(document.body).append('<div id="' + this.modal_id + '" class="ekko-lightbox modal fade" tabindex="-1"><div class="modal-dialog"><div class="modal-content">' + f + '<div class="modal-body"><div class="ekko-lightbox-container"><div></div></div></div>' + e + "</div></div></div>"), this.modal = a("#" + this.modal_id), this.modal_dialog = this.modal.find(".modal-dialog").first(), this.modal_content = this.modal.find(".modal-content").first(), this.modal_body = this.modal.find(".modal-body").first(), this.modal_header = this.modal.find(".modal-header").first(), this.modal_footer = this.modal.find(".modal-footer").first(), this.lightbox_container = this.modal_body.find(".ekko-lightbox-container").first(), this.lightbox_body = this.lightbox_container.find("> div:first-child").first(), this.showLoading(), this.modal_arrows = null, this.border = {
            top: parseFloat(this.modal_dialog.css("border-top-width")) + parseFloat(this.modal_content.css("border-top-width")) + parseFloat(this.modal_body.css("border-top-width")),
            right: parseFloat(this.modal_dialog.css("border-right-width")) + parseFloat(this.modal_content.css("border-right-width")) + parseFloat(this.modal_body.css("border-right-width")),
            bottom: parseFloat(this.modal_dialog.css("border-bottom-width")) + parseFloat(this.modal_content.css("border-bottom-width")) + parseFloat(this.modal_body.css("border-bottom-width")),
            left: parseFloat(this.modal_dialog.css("border-left-width")) + parseFloat(this.modal_content.css("border-left-width")) + parseFloat(this.modal_body.css("border-left-width"))
        }, this.padding = {
            top: parseFloat(this.modal_dialog.css("padding-top")) + parseFloat(this.modal_content.css("padding-top")) + parseFloat(this.modal_body.css("padding-top")),
            right: parseFloat(this.modal_dialog.css("padding-right")) + parseFloat(this.modal_content.css("padding-right")) + parseFloat(this.modal_body.css("padding-right")),
            bottom: parseFloat(this.modal_dialog.css("padding-bottom")) + parseFloat(this.modal_content.css("padding-bottom")) + parseFloat(this.modal_body.css("padding-bottom")),
            left: parseFloat(this.modal_dialog.css("padding-left")) + parseFloat(this.modal_content.css("padding-left")) + parseFloat(this.modal_body.css("padding-left"))
        }, this.modal.on("show.bs.modal", this.options.onShow.bind(this)).on("shown.bs.modal", function(a) {
            return function() {
                return a.modal_shown(), a.options.onShown.call(a)
            }
        }(this)).on("hide.bs.modal", this.options.onHide.bind(this)).on("hidden.bs.modal", function(b) {
            return function() {
                return b.gallery && a(document).off("keydown.ekkoLightbox"), b.modal.remove(), b.options.onHidden.call(b)
            }
        }(this)).modal("show", c), this.modal
    }, b.prototype = {
        modal_shown: function() {
            var b;
            return this.options.remote ? (this.gallery = this.$element.data("gallery"), this.gallery && ("document.body" === this.options.gallery_parent_selector || "" === this.options.gallery_parent_selector ? this.gallery_items = a(document.body).find('*[data-gallery="' + this.gallery + '"]') : this.gallery_items = this.$element.parents(this.options.gallery_parent_selector).first().find('*[data-gallery="' + this.gallery + '"]'), this.gallery_index = this.gallery_items.index(this.$element), a(document).on("keydown.ekkoLightbox", this.navigate.bind(this)), this.options.directional_arrows && this.gallery_items.length > 1 && (this.lightbox_container.append('<div class="ekko-lightbox-nav-overlay"><a href="#" class="' + this.strip_stops(this.options.left_arrow_class) + '"></a><a href="#" class="' + this.strip_stops(this.options.right_arrow_class) + '"></a></div>'), this.modal_arrows = this.lightbox_container.find("div.ekko-lightbox-nav-overlay").first(), this.lightbox_container.find("a" + this.strip_spaces(this.options.left_arrow_class)).on("click", function(a) {
                return function(b) {
                    return b.preventDefault(), a.navigate_left()
                }
            }(this)), this.lightbox_container.find("a" + this.strip_spaces(this.options.right_arrow_class)).on("click", function(a) {
                return function(b) {
                    return b.preventDefault(), a.navigate_right()
                }
            }(this)))), this.options.type ? "image" === this.options.type ? this.preloadImage(this.options.remote, !0) : "youtube" === this.options.type && (b = this.getYoutubeId(this.options.remote)) ? this.showYoutubeVideo(b) : "vimeo" === this.options.type ? this.showVimeoVideo(this.options.remote) : "instagram" === this.options.type ? this.showInstagramVideo(this.options.remote) : "url" === this.options.type ? this.loadRemoteContent(this.options.remote) : "video" === this.options.type ? this.showVideoIframe(this.options.remote) : this.error('Could not detect remote target type. Force the type using data-type="image|youtube|vimeo|instagram|url|video"') : this.detectRemoteType(this.options.remote)) : this.error("No remote target given")
        },
        strip_stops: function(a) {
            return a.replace(/\./g, "")
        },
        strip_spaces: function(a) {
            return a.replace(/\s/g, "")
        },
        isImage: function(a) {
            return a.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i)
        },
        isSwf: function(a) {
            return a.match(/\.(swf)((\?|#).*)?$/i)
        },
        getYoutubeId: function(a) {
            var b;
            return b = a.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/), b && 11 === b[2].length ? b[2] : !1
        },
        getVimeoId: function(a) {
            return a.indexOf("vimeo") > 0 ? a : !1
        },
        getInstagramId: function(a) {
            return a.indexOf("instagram") > 0 ? a : !1
        },
        navigate: function(a) {
            if (a = a || window.event, 39 === a.keyCode || 37 === a.keyCode) {
                if (39 === a.keyCode) return this.navigate_right();
                if (37 === a.keyCode) return this.navigate_left()
            }
        },
        navigateTo: function(b) {
            var c, d;
            return 0 > b || b > this.gallery_items.length - 1 ? this : (this.showLoading(), this.gallery_index = b, this.$element = a(this.gallery_items.get(this.gallery_index)), this.updateTitleAndFooter(), d = this.$element.attr("data-remote") || this.$element.attr("href"), this.detectRemoteType(d, this.$element.attr("data-type") || !1), this.gallery_index + 1 < this.gallery_items.length && (c = a(this.gallery_items.get(this.gallery_index + 1), !1), d = c.attr("data-remote") || c.attr("href"), "image" === c.attr("data-type") || this.isImage(d)) ? this.preloadImage(d, !1) : void 0)
        },
        navigate_left: function() {
            return 1 !== this.gallery_items.length ? (0 === this.gallery_index ? this.gallery_index = this.gallery_items.length - 1 : this.gallery_index--, this.options.onNavigate.call(this, "left", this.gallery_index), this.navigateTo(this.gallery_index)) : void 0
        },
        navigate_right: function() {
            return 1 !== this.gallery_items.length ? (this.gallery_index === this.gallery_items.length - 1 ? this.gallery_index = 0 : this.gallery_index++, this.options.onNavigate.call(this, "right", this.gallery_index), this.navigateTo(this.gallery_index)) : void 0
        },
        detectRemoteType: function(a, b) {
            var c;
            return b = b || !1, "image" === b || this.isImage(a) ? (this.options.type = "image", this.preloadImage(a, !0)) : "youtube" === b || (c = this.getYoutubeId(a)) ? (this.options.type = "youtube", this.showYoutubeVideo(c)) : "vimeo" === b || (c = this.getVimeoId(a)) ? (this.options.type = "vimeo", this.showVimeoVideo(c)) : "instagram" === b || (c = this.getInstagramId(a)) ? (this.options.type = "instagram", this.showInstagramVideo(c)) : "video" === b ? (this.options.type = "video", this.showVideoIframe(c)) : (this.options.type = "url", this.loadRemoteContent(a))
        },
        updateTitleAndFooter: function() {
            var a, b, c, d;
            return c = this.modal_content.find(".modal-header"), b = this.modal_content.find(".modal-footer"), d = this.$element.data("title") || "", a = this.$element.data("footer") || "", d || this.options.always_show_close ? c.css("display", "").find(".modal-title").html(d || "&nbsp;") : c.css("display", "none"), a ? b.css("display", "").html(a) : b.css("display", "none"), this
        },
        showLoading: function() {
            return this.lightbox_body.html('<div class="modal-loading">' + this.options.loadingMessage + "</div>"), this
        },
        showYoutubeVideo: function(a) {
            var b, c, d;
            return c = null != this.$element.attr("data-norelated") || this.options.no_related ? "&rel=0" : "", d = this.checkDimensions(this.$element.data("width") || 560), b = d / (560 / 315), this.showVideoIframe("//www.youtube.com/embed/" + a + "?badge=0&autoplay=1&html5=1" + c, d, b)
        },
        showVimeoVideo: function(a) {
            var b, c;
            return c = this.checkDimensions(this.$element.data("width") || 560), b = c / (500 / 281), this.showVideoIframe(a + "?autoplay=1", c, b)
        },
        showInstagramVideo: function(a) {
            var b, c;
            return c = this.checkDimensions(this.$element.data("width") || 612), this.resize(c), b = c + 80, this.lightbox_body.html('<iframe width="' + c + '" height="' + b + '" src="' + this.addTrailingSlash(a) + 'embed/" frameborder="0" allowfullscreen></iframe>'), this.options.onContentLoaded.call(this), this.modal_arrows ? this.modal_arrows.css("display", "none") : void 0
        },
        showVideoIframe: function(a, b, c) {
            return c = c || b, this.resize(b), this.lightbox_body.html('<div class="embed-responsive embed-responsive-16by9"><iframe width="' + b + '" height="' + c + '" src="' + a + '" frameborder="0" allowfullscreen class="embed-responsive-item"></iframe></div>'), this.options.onContentLoaded.call(this), this.modal_arrows && this.modal_arrows.css("display", "none"), this
        },
        loadRemoteContent: function(b) {
            var c, d;
            return d = this.$element.data("width") || 560, this.resize(d), c = this.$element.data("disableExternalCheck") || !1, c || this.isExternal(b) ? (this.lightbox_body.html('<iframe width="' + d + '" height="' + d + '" src="' + b + '" frameborder="0" allowfullscreen></iframe>'), this.options.onContentLoaded.call(this)) : this.lightbox_body.load(b, a.proxy(function(a) {
                return function() {
                    return a.$element.trigger("loaded.bs.modal")
                }
            }(this))), this.modal_arrows && this.modal_arrows.css("display", "none"), this
        },
        isExternal: function(a) {
            var b;
            return b = a.match(/^([^:\/?#]+:)?(?:\/\/([^\/?#]*))?([^?#]+)?(\?[^#]*)?(#.*)?/), "string" == typeof b[1] && b[1].length > 0 && b[1].toLowerCase() !== location.protocol ? !0 : "string" == typeof b[2] && b[2].length > 0 && b[2].replace(new RegExp(":(" + {
                "http:": 80,
                "https:": 443
            }[location.protocol] + ")?$"), "") !== location.host ? !0 : !1
        },
        error: function(a) {
            return this.lightbox_body.html(a), this
        },
        preloadImage: function(b, c) {
            var d;
            return d = new Image, (null == c || c === !0) && (d.onload = function(b) {
                return function() {
                    var c;
                    return c = a("<img />"), c.attr("src", d.src), c.addClass("img-responsive"), b.lightbox_body.html(c), b.modal_arrows && b.modal_arrows.css("display", "block"), c.load(function() {
                        return b.options.scale_height ? b.scaleHeight(d.height, d.width) : b.resize(d.width), b.options.onContentLoaded.call(b)
                    })
                }
            }(this), d.onerror = function(a) {
                return function() {
                    return a.error("Failed to load image: " + b)
                }
            }(this)), d.src = b, d
        },
        scaleHeight: function(b, c) {
            var d, e, f, g, h, i;
            return g = this.modal_header.outerHeight(!0) || 0, f = this.modal_footer.outerHeight(!0) || 0, this.modal_footer.is(":visible") || (f = 0), this.modal_header.is(":visible") || (g = 0), d = this.border.top + this.border.bottom + this.padding.top + this.padding.bottom, h = parseFloat(this.modal_dialog.css("margin-top")) + parseFloat(this.modal_dialog.css("margin-bottom")), i = a(window).height() - d - h - g - f, e = Math.min(i / b, 1), this.modal_dialog.css("height", "auto").css("max-height", i), this.resize(e * c)
        },
        resize: function(b) {
            var c;
            return c = b + this.border.left + this.padding.left + this.padding.right + this.border.right, this.modal_dialog.css("width", "auto").css("max-width", c), this.lightbox_container.find("a").css("line-height", function() {
                return a(this).parent().height() + "px"
            }), this
        },
        checkDimensions: function(a) {
            var b, c;
            return c = a + this.border.left + this.padding.left + this.padding.right + this.border.right, b = document.body.clientWidth, c > b && (a = this.modal_body.width()), a
        },
        close: function() {
            return this.modal.modal("hide")
        },
        addTrailingSlash: function(a) {
            return "/" !== a.substr(-1) && (a += "/"), a
        }
    }, a.fn.ekkoLightbox = function(c) {
        return this.each(function() {
            var d;
            return d = a(this), c = a.extend({
                remote: d.attr("data-remote") || d.attr("href"),
                gallery_parent_selector: d.attr("data-parent"),
                type: d.attr("data-type")
            }, c, d.data()), new b(this, c), this
        })
    }, a.fn.ekkoLightbox.defaults = {
        gallery_parent_selector: "document.body",
        left_arrow_class: ".glyphicon .glyphicon-chevron-left",
        right_arrow_class: ".glyphicon .glyphicon-chevron-right",
        directional_arrows: !0,
        type: null,
        always_show_close: !0,
        no_related: !1,
        scale_height: !0,
        loadingMessage: "Loading...",
        onShow: function() {},
        onShown: function() {},
        onHide: function() {},
        onHidden: function() {},
        onNavigate: function() {},
        onContentLoaded: function() {}
    }
}).call(this);
/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.6.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
(function(factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }

}(function($) {
    'use strict';
    var Slick = window.Slick || {};

    Slick = (function() {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this,
                dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function(slider, i) {
                    return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


            _.registerBreakpoints();
            _.init(true);

        }

        return Slick;

    }());

    Slick.prototype.activateADA = function() {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });

    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || (index >= _.slideCount)) {
            return false;
        }

        _.unload();

        if (typeof(index) === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function(index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.animateHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function(targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }

        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -(_.currentLeft);
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' +
                                now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' +
                                now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });

            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function() {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }

            }

        }

    };

    Slick.prototype.getNavTarget = function() {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if (asNavFor && asNavFor !== null) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;

    };

    Slick.prototype.asNavFor = function(index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if (asNavFor !== null && typeof asNavFor === 'object') {
            asNavFor.each(function() {
                var target = $(this).slick('getSlick');
                if (!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }

    };

    Slick.prototype.applyTransition = function(slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.autoPlay = function() {

        var _ = this;

        _.autoPlayClear();

        if (_.slideCount > _.options.slidesToShow) {
            _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
        }

    };

    Slick.prototype.autoPlayClear = function() {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }

    };

    Slick.prototype.autoPlayIterator = function() {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if (!_.paused && !_.interrupted && !_.focussed) {

            if (_.options.infinite === false) {

                if (_.direction === 1 && (_.currentSlide + 1) === (_.slideCount - 1)) {
                    _.direction = 0;
                } else if (_.direction === 0) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if (_.currentSlide - 1 === 0) {
                        _.direction = 1;
                    }

                }

            }

            _.slideHandler(slideTo);

        }

    };

    Slick.prototype.buildArrows = function() {

        var _ = this;

        if (_.options.arrows === true) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if (_.slideCount > _.options.slidesToShow) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow
                        .addClass('slick-disabled')
                        .attr('aria-disabled', 'true');
                }

            } else {

                _.$prevArrow.add(_.$nextArrow)

                    .addClass('slick-hidden')
                    .attr({
                        'aria-disabled': 'true',
                        'tabindex': '-1'
                    });

            }

        }

    };

    Slick.prototype.buildDots = function() {

        var _ = this,
            i, dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');

        }

    };

    Slick.prototype.buildOut = function() {

        var _ = this;

        _.$slides =
            _.$slider
            .children(_.options.slide + ':not(.slick-cloned)')
            .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function(index, element) {
            $(element)
                .attr('data-slick-index', index)
                .data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = (_.slideCount === 0) ?
            $('<div class="slick-track"/>').appendTo(_.$slider) :
            _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap(
            '<div aria-live="polite" class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();


        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }

    };

    Slick.prototype.buildRows = function() {

        var _ = this,
            a, b, c, newSlides, numOfSlides, originalSlides, slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if (_.options.rows > 1) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(
                originalSlides.length / slidesPerSection
            );

            for (a = 0; a < numOfSlides; a++) {
                var slide = document.createElement('div');
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children()
                .css({
                    'width': (100 / _.options.slidesPerRow) + '%',
                    'display': 'inline-block'
                });

        }

    };

    Slick.prototype.checkResponsive = function(initial, forceUpdate) {

        var _ = this,
            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if (_.options.responsive &&
            _.options.responsive.length &&
            _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint =
                            targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings,
                            _.breakpointSettings[
                                targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if (!initial && triggerBreakpoint !== false) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }

    };

    Slick.prototype.changeSlide = function(event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset, slideOffset, unevenOffset;

        // If target is a link, prevent default action.
        if ($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if (!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 :
                    event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }

    };

    Slick.prototype.checkNavigable = function(index) {

        var _ = this,
            navigables, prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function() {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots)
                .off('click.slick', _.changeSlide)
                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.cleanUpSlideEvents = function() {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

    };

    Slick.prototype.cleanUpRows = function() {

        var _ = this,
            originalSlides;

        if (_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }

    };

    Slick.prototype.clickHandler = function(event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }

    };

    Slick.prototype.destroy = function(refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }


        if (_.$prevArrow && _.$prevArrow.length) {

            _.$prevArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display', '');

            if (_.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }
        }

        if (_.$nextArrow && _.$nextArrow.length) {

            _.$nextArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display', '');

            if (_.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }

        }


        if (_.$slides) {

            _.$slides
                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                .removeAttr('aria-hidden')
                .removeAttr('data-slick-index')
                .each(function() {
                    $(this).attr('style', $(this).data('originalStyling'));
                });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if (!refresh) {
            _.$slider.trigger('destroy', [_]);
        }

    };

    Slick.prototype.disableTransition = function(slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.fadeSlide = function(slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function() {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }

        }

    };

    Slick.prototype.fadeSlideOut = function(slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });

        }

    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.focusHandler = function() {

        var _ = this;

        _.$slider
            .off('focus.slick blur.slick')
            .on('focus.slick blur.slick',
                '*:not(.slick-arrow)',
                function(event) {

                    event.stopImmediatePropagation();
                    var $sf = $(this);

                    setTimeout(function() {

                        if (_.options.pauseOnFocus) {
                            _.focussed = $sf.is(':focus');
                            _.autoPlay();
                        }

                    }, 0);

                });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {

        var _ = this;
        return _.currentSlide;

    };

    Slick.prototype.getDotCount = function() {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if (!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        } else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;

    };

    Slick.prototype.getLeft = function(slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                    } else {
                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
        } else {
            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft = 0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft = 0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;

    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {

        var _ = this;

        return _.options[option];

    };

    Slick.prototype.getNavigableIndexes = function() {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;

    };

    Slick.prototype.getSlick = function() {

        return this;

    };

    Slick.prototype.getSlideCount = function() {

        var _ = this,
            slidesTraversed, swipedSlide, centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;

        } else {
            return _.options.slidesToScroll;
        }

    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);

    };

    Slick.prototype.init = function(creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();

        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if (_.options.autoplay) {

            _.paused = false;
            _.autoPlay();

        }

    };

    Slick.prototype.initADA = function() {
        var _ = this;
        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        _.$slideTrack.attr('role', 'listbox');

        _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
            $(this).attr({
                'role': 'option',
                'aria-describedby': 'slick-slide' + _.instanceUid + i + ''
            });
        });

        if (_.$dots !== null) {
            _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                    $(this).attr({
                        'role': 'presentation',
                        'aria-selected': 'false',
                        'aria-controls': 'navigation' + _.instanceUid + i + '',
                        'id': 'slick-slide' + _.instanceUid + i + ''
                    });
                })
                .first().attr('aria-selected', 'true').end()
                .find('button').attr('role', 'button').end()
                .closest('div').attr('role', 'toolbar');
        }
        _.activateADA();

    };

    Slick.prototype.initArrowEvents = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow
                .off('click.slick')
                .on('click.slick', {
                    message: 'previous'
                }, _.changeSlide);
            _.$nextArrow
                .off('click.slick')
                .on('click.slick', {
                    message: 'next'
                }, _.changeSlide);
        }

    };

    Slick.prototype.initDotEvents = function() {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);
        }

        if (_.options.dots === true && _.options.pauseOnDotsHover === true) {

            $('li', _.$dots)
                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initSlideEvents = function() {

        var _ = this;

        if (_.options.pauseOnHover) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initializeEvents = function() {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.initUI = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();

        }

    };

    Slick.prototype.keyHandler = function(event) {

        var _ = this;
        //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' : 'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }

    };

    Slick.prototype.lazyLoad = function() {

        var _ = this,
            loadRange, cloneRange, rangeStart, rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function() {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function() {

                    image
                        .animate({
                            opacity: 0
                        }, 100, function() {
                            image
                                .attr('src', imageSource)
                                .animate({
                                    opacity: 1
                                }, 200, function() {
                                    image
                                        .removeAttr('data-lazy')
                                        .removeClass('slick-loading');
                                });
                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                        });

                };

                imageToLoad.onerror = function() {

                    image
                        .removeAttr('data-lazy')
                        .removeClass('slick-loading')
                        .addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                };

                imageToLoad.src = imageSource;

            });

        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else
        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }

    };

    Slick.prototype.loadSlider = function() {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }

    };

    Slick.prototype.next = Slick.prototype.slickNext = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });

    };

    Slick.prototype.orientationChange = function() {

        var _ = this;

        _.checkResponsive();
        _.setPosition();

    };

    Slick.prototype.pause = Slick.prototype.slickPause = function() {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;

    };

    Slick.prototype.play = Slick.prototype.slickPlay = function() {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;

    };

    Slick.prototype.postSlide = function(index) {

        var _ = this;

        if (!_.unslicked) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            _.setPosition();

            _.swipeLeft = null;

            if (_.options.autoplay) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();
            }

        }

    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });

    };

    Slick.prototype.preventDefault = function(event) {

        event.preventDefault();

    };

    Slick.prototype.progressiveLazyLoad = function(tryCount) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $('img[data-lazy]', _.$slider),
            image,
            imageSource,
            imageToLoad;

        if ($imgsToLoad.length) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function() {

                image
                    .attr('src', imageSource)
                    .removeAttr('data-lazy')
                    .removeClass('slick-loading');

                if (_.options.adaptiveHeight === true) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                _.progressiveLazyLoad();

            };

            imageToLoad.onerror = function() {

                if (tryCount < 3) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout(function() {
                        _.progressiveLazyLoad(tryCount + 1);
                    }, 500);

                } else {

                    image
                        .removeAttr('data-lazy')
                        .removeClass('slick-loading')
                        .addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                    _.progressiveLazyLoad();

                }

            };

            imageToLoad.src = imageSource;

        } else {

            _.$slider.trigger('allImagesLoaded', [_]);

        }

    };

    Slick.prototype.refresh = function(initializing) {

        var _ = this,
            currentSlide, lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if (!_.options.infinite && (_.currentSlide > lastVisibleIndex)) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;

        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, {
            currentSlide: currentSlide
        });

        _.init();

        if (!initializing) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);

        }

    };

    Slick.prototype.registerBreakpoints = function() {

        var _ = this,
            breakpoint, currentBreakpoint, l,
            responsiveSettings = _.options.responsive || null;

        if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {

            _.respondTo = _.options.respondTo || 'window';

            for (breakpoint in responsiveSettings) {

                l = _.breakpoints.length - 1;
                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while (l >= 0) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                }

            }

            _.breakpoints.sort(function(a, b) {
                return (_.options.mobileFirst) ? a - b : b - a;
            });

        }

    };

    Slick.prototype.reinit = function() {

        var _ = this;

        _.$slides =
            _.$slideTrack
            .children(_.options.slide)
            .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);

    };

    Slick.prototype.resize = function() {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function() {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) {
                    _.setPosition();
                }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.setCSS = function(position) {

        var _ = this,
            positionProps = {},
            x, y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }

    };

    Slick.prototype.setDimensions = function() {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: ('0px ' + _.options.centerPadding)
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: (_.options.centerPadding + ' 0px')
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();


        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);

    };

    Slick.prototype.setFade = function() {

        var _ = this,
            targetLeft;

        _.$slides.each(function(index, element) {
            targetLeft = (_.slideWidth * index) * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });

    };

    Slick.prototype.setHeight = function() {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }

    };

    Slick.prototype.setOption =
        Slick.prototype.slickSetOption = function() {

            /**
             * accepts arguments in format of:
             *
             *  - for changing a single option's value:
             *     .slick("setOption", option, value, refresh )
             *
             *  - for changing a set of responsive options:
             *     .slick("setOption", 'responsive', [{}, ...], refresh )
             *
             *  - for updating multiple values at once (not responsive)
             *     .slick("setOption", { 'option': value, ... }, refresh )
             */

            var _ = this,
                l, item, option, value, refresh = false,
                type;

            if ($.type(arguments[0]) === 'object') {

                option = arguments[0];
                refresh = arguments[1];
                type = 'multiple';

            } else if ($.type(arguments[0]) === 'string') {

                option = arguments[0];
                value = arguments[1];
                refresh = arguments[2];

                if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {

                    type = 'responsive';

                } else if (typeof arguments[1] !== 'undefined') {

                    type = 'single';

                }

            }

            if (type === 'single') {

                _.options[option] = value;


            } else if (type === 'multiple') {

                $.each(option, function(opt, val) {

                    _.options[opt] = val;

                });


            } else if (type === 'responsive') {

                for (item in value) {

                    if ($.type(_.options.responsive) !== 'array') {

                        _.options.responsive = [value[item]];

                    } else {

                        l = _.options.responsive.length - 1;

                        // loop through the responsive object and splice out duplicates.
                        while (l >= 0) {

                            if (_.options.responsive[l].breakpoint === value[item].breakpoint) {

                                _.options.responsive.splice(l, 1);

                            }

                            l--;

                        }

                        _.options.responsive.push(value[item]);

                    }

                }

            }

            if (refresh) {

                _.unload();
                _.reinit();

            }

        };

    Slick.prototype.setPosition = function() {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);

    };

    Slick.prototype.setProps = function() {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined ||
            bodyStyle.MozTransition !== undefined ||
            bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if (_.options.fade) {
            if (typeof _.options.zIndex === 'number') {
                if (_.options.zIndex < 3) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
    };


    Slick.prototype.setSlideClasses = function(index) {

        var _ = this,
            centerOffset, allSlides, indexOffset, remainder;

        allSlides = _.$slider
            .find('.slick-slide')
            .removeClass('slick-active slick-center slick-current')
            .attr('aria-hidden', 'true');

        _.$slides
            .eq(index)
            .addClass('slick-current');

        if (_.options.centerMode === true) {

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {

                    _.$slides
                        .slice(index - centerOffset, index + centerOffset + 1)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides
                        .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

                if (index === 0) {

                    allSlides
                        .eq(allSlides.length - 1 - _.options.slidesToShow)
                        .addClass('slick-center');

                } else if (index === _.slideCount - 1) {

                    allSlides
                        .eq(_.options.slidesToShow)
                        .addClass('slick-center');

                }

            }

            _.$slides
                .eq(index)
                .addClass('slick-center');

        } else {

            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                _.$slides
                    .slice(index, index + _.options.slidesToShow)
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                    allSlides
                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    allSlides
                        .slice(indexOffset, indexOffset + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

            }

        }

        if (_.options.lazyLoad === 'ondemand') {
            _.lazyLoad();
        }

    };

    Slick.prototype.setupInfinite = function() {

        var _ = this,
            i, slideIndex, infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > (_.slideCount -
                        infiniteCount); i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex - _.slideCount)
                        .prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex + _.slideCount)
                        .appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                    $(this).attr('id', '');
                });

            }

        }

    };

    Slick.prototype.interrupt = function(toggle) {

        var _ = this;

        if (!toggle) {
            _.autoPlay();
        }
        _.interrupted = toggle;

    };

    Slick.prototype.selectHandler = function(event) {

        var _ = this;

        var targetElement =
            $(event.target).is('.slick-slide') ?
            $(event.target) :
            $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.setSlideClasses(index);
            _.asNavFor(index);
            return;

        }

        _.slideHandler(index);

    };

    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {

        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
            _ = this,
            navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if (_.options.autoplay) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if (_.options.asNavFor) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if (navTarget.slideCount <= navTarget.options.slidesToShow) {
                navTarget.setSlideClasses(_.currentSlide);
            }

        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function() {
                    _.postSlide(animSlide);
                });

            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function() {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }

    };

    Slick.prototype.startLoad = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();

        }

        _.$slider.addClass('slick-loading');

    };

    Slick.prototype.swipeDirection = function() {

        var xDist, yDist, r, swipeAngle, _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
            return (_.options.rtl === false ? 'right' : 'left');
        }
        if (_.options.verticalSwiping === true) {
            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';

    };

    Slick.prototype.swipeEnd = function(event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.interrupted = false;
        _.shouldClick = (_.touchObject.swipeLength > 10) ? false : true;

        if (_.touchObject.curX === undefined) {
            return false;
        }

        if (_.touchObject.edgeHit === true) {
            _.$slider.trigger('edge', [_, _.swipeDirection()]);
        }

        if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {

            direction = _.swipeDirection();

            switch (direction) {

                case 'left':
                case 'down':

                    slideCount =
                        _.options.swipeToSlide ?
                        _.checkNavigable(_.currentSlide + _.getSlideCount()) :
                        _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount =
                        _.options.swipeToSlide ?
                        _.checkNavigable(_.currentSlide - _.getSlideCount()) :
                        _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:


            }

            if (direction != 'vertical') {

                _.slideHandler(slideCount);
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction]);

            }

        } else {

            if (_.touchObject.startX !== _.touchObject.curX) {

                _.slideHandler(_.currentSlide);
                _.touchObject = {};

            }

        }

    };

    Slick.prototype.swipeHandler = function(event) {

        var _ = this;

        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
            event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options
            .touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options
                .touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }

    };

    Slick.prototype.swipeMove = function(event) {

        var _ = this,
            edgeWasHit = false,
            curLeft, swipeDirection, swipeLength, positionOffset, touches;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = Math.round(Math.sqrt(
                Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
        }

        swipeDirection = _.swipeDirection();

        if (swipeDirection === 'vertical') {
            return;
        }

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }


        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);

    };

    Slick.prototype.swipeStart = function(event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;

    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.unload = function() {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides
            .removeClass('slick-slide slick-active slick-visible slick-current')
            .attr('aria-hidden', 'true')
            .css('width', '');

    };

    Slick.prototype.unslick = function(fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();

    };

    Slick.prototype.updateArrows = function() {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if (_.options.arrows === true &&
            _.slideCount > _.options.slidesToShow &&
            !_.options.infinite) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            }

        }

    };

    Slick.prototype.updateDots = function() {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots
                .find('li')
                .removeClass('slick-active')
                .attr('aria-hidden', 'true');

            _.$dots
                .find('li')
                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                .addClass('slick-active')
                .attr('aria-hidden', 'false');

        }

    };

    Slick.prototype.visibility = function() {

        var _ = this;

        if (_.options.autoplay) {

            if (document[_.hidden]) {

                _.interrupted = true;

            } else {

                _.interrupted = false;

            }

        }

    };

    $.fn.slick = function() {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined')
                _[i].slick = new Slick(_[i], opt);
            else
                ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };

}));

/*! jQuery UI - v1.11.4 - 2015-12-17
 * http://jqueryui.com
 * Includes: core.js, widget.js, mouse.js, position.js, datepicker.js
 * Copyright jQuery Foundation and other contributors; Licensed MIT */

(function(factory) {
    if (typeof define === "function" && define.amd) {

        // AMD. Register as an anonymous module.
        define(["jquery"], factory);
    } else {

        // Browser globals
        factory(jQuery);
    }
}(function($) {
    /*!
     * jQuery UI Core 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/category/ui-core/
     */


    // $.ui might exist from components with no dependencies, e.g., $.ui.position
    $.ui = $.ui || {};

    $.extend($.ui, {
        version: "1.11.4",

        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    });

    // plugins
    $.fn.extend({
        scrollParent: function(includeHidden) {
            var position = this.css("position"),
                excludeStaticParent = position === "absolute",
                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
                scrollParent = this.parents().filter(function() {
                    var parent = $(this);
                    if (excludeStaticParent && parent.css("position") === "static") {
                        return false;
                    }
                    return overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"));
                }).eq(0);

            return position === "fixed" || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent;
        },

        uniqueId: (function() {
            var uuid = 0;

            return function() {
                return this.each(function() {
                    if (!this.id) {
                        this.id = "ui-id-" + (++uuid);
                    }
                });
            };
        })(),

        removeUniqueId: function() {
            return this.each(function() {
                if (/^ui-id-\d+$/.test(this.id)) {
                    $(this).removeAttr("id");
                }
            });
        }
    });

    // selectors
    function focusable(element, isTabIndexNotNaN) {
        var map, mapName, img,
            nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                return false;
            }
            img = $("img[usemap='#" + mapName + "']")[0];
            return !!img && visible(img);
        }
        return (/^(input|select|textarea|button|object)$/.test(nodeName) ?
                !element.disabled :
                "a" === nodeName ?
                element.href || isTabIndexNotNaN :
                isTabIndexNotNaN) &&
            // the element and all of its ancestors must be visible
            visible(element);
    }

    function visible(element) {
        return $.expr.filters.visible(element) &&
            !$(element).parents().addBack().filter(function() {
                return $.css(this, "visibility") === "hidden";
            }).length;
    }

    $.extend($.expr[":"], {
        data: $.expr.createPseudo ?
            $.expr.createPseudo(function(dataName) {
                return function(elem) {
                    return !!$.data(elem, dataName);
                };
            }) :
            // support: jQuery <1.8
            function(elem, i, match) {
                return !!$.data(elem, match[3]);
            },

        focusable: function(element) {
            return focusable(element, !isNaN($.attr(element, "tabindex")));
        },

        tabbable: function(element) {
            var tabIndex = $.attr(element, "tabindex"),
                isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
        }
    });

    // support: jQuery <1.8
    if (!$("<a>").outerWidth(1).jquery) {
        $.each(["Width", "Height"], function(i, name) {
            var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"],
                type = name.toLowerCase(),
                orig = {
                    innerWidth: $.fn.innerWidth,
                    innerHeight: $.fn.innerHeight,
                    outerWidth: $.fn.outerWidth,
                    outerHeight: $.fn.outerHeight
                };

            function reduce(elem, size, border, margin) {
                $.each(side, function() {
                    size -= parseFloat($.css(elem, "padding" + this)) || 0;
                    if (border) {
                        size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
                    }
                    if (margin) {
                        size -= parseFloat($.css(elem, "margin" + this)) || 0;
                    }
                });
                return size;
            }

            $.fn["inner" + name] = function(size) {
                if (size === undefined) {
                    return orig["inner" + name].call(this);
                }

                return this.each(function() {
                    $(this).css(type, reduce(this, size) + "px");
                });
            };

            $.fn["outer" + name] = function(size, margin) {
                if (typeof size !== "number") {
                    return orig["outer" + name].call(this, size);
                }

                return this.each(function() {
                    $(this).css(type, reduce(this, size, true, margin) + "px");
                });
            };
        });
    }

    // support: jQuery <1.8
    if (!$.fn.addBack) {
        $.fn.addBack = function(selector) {
            return this.add(selector == null ?
                this.prevObject : this.prevObject.filter(selector)
            );
        };
    }

    // support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
    if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) {
        $.fn.removeData = (function(removeData) {
            return function(key) {
                if (arguments.length) {
                    return removeData.call(this, $.camelCase(key));
                } else {
                    return removeData.call(this);
                }
            };
        })($.fn.removeData);
    }

    // deprecated
    $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());

    $.fn.extend({
        focus: (function(orig) {
            return function(delay, fn) {
                return typeof delay === "number" ?
                    this.each(function() {
                        var elem = this;
                        setTimeout(function() {
                            $(elem).focus();
                            if (fn) {
                                fn.call(elem);
                            }
                        }, delay);
                    }) :
                    orig.apply(this, arguments);
            };
        })($.fn.focus),

        disableSelection: (function() {
            var eventType = "onselectstart" in document.createElement("div") ?
                "selectstart" :
                "mousedown";

            return function() {
                return this.bind(eventType + ".ui-disableSelection", function(event) {
                    event.preventDefault();
                });
            };
        })(),

        enableSelection: function() {
            return this.unbind(".ui-disableSelection");
        },

        zIndex: function(zIndex) {
            if (zIndex !== undefined) {
                return this.css("zIndex", zIndex);
            }

            if (this.length) {
                var elem = $(this[0]),
                    position, value;
                while (elem.length && elem[0] !== document) {
                    // Ignore z-index if position is set to a value where z-index is ignored by the browser
                    // This makes behavior of this function consistent across browsers
                    // WebKit always returns auto if the element is positioned
                    position = elem.css("position");
                    if (position === "absolute" || position === "relative" || position === "fixed") {
                        // IE returns 0 when zIndex is not specified
                        // other browsers return a string
                        // we ignore the case of nested elements with an explicit value of 0
                        // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                        value = parseInt(elem.css("zIndex"), 10);
                        if (!isNaN(value) && value !== 0) {
                            return value;
                        }
                    }
                    elem = elem.parent();
                }
            }

            return 0;
        }
    });

    // $.ui.plugin is deprecated. Use $.widget() extensions instead.
    $.ui.plugin = {
        add: function(module, option, set) {
            var i,
                proto = $.ui[module].prototype;
            for (i in set) {
                proto.plugins[i] = proto.plugins[i] || [];
                proto.plugins[i].push([option, set[i]]);
            }
        },
        call: function(instance, name, args, allowDisconnected) {
            var i,
                set = instance.plugins[name];

            if (!set) {
                return;
            }

            if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {
                return;
            }

            for (i = 0; i < set.length; i++) {
                if (instance.options[set[i][0]]) {
                    set[i][1].apply(instance.element, args);
                }
            }
        }
    };


    /*!
     * jQuery UI Widget 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/jQuery.widget/
     */


    var widget_uuid = 0,
        widget_slice = Array.prototype.slice;

    $.cleanData = (function(orig) {
        return function(elems) {
            var events, elem, i;
            for (i = 0;
                (elem = elems[i]) != null; i++) {
                try {

                    // Only trigger remove when necessary to save time
                    events = $._data(elem, "events");
                    if (events && events.remove) {
                        $(elem).triggerHandler("remove");
                    }

                    // http://bugs.jquery.com/ticket/8235
                } catch (e) {}
            }
            orig(elems);
        };
    })($.cleanData);

    $.widget = function(name, base, prototype) {
        var fullName, existingConstructor, constructor, basePrototype,
            // proxiedPrototype allows the provided prototype to remain unmodified
            // so that it can be used as a mixin for multiple widgets (#8876)
            proxiedPrototype = {},
            namespace = name.split(".")[0];

        name = name.split(".")[1];
        fullName = namespace + "-" + name;

        if (!prototype) {
            prototype = base;
            base = $.Widget;
        }

        // create selector for plugin
        $.expr[":"][fullName.toLowerCase()] = function(elem) {
            return !!$.data(elem, fullName);
        };

        $[namespace] = $[namespace] || {};
        existingConstructor = $[namespace][name];
        constructor = $[namespace][name] = function(options, element) {
            // allow instantiation without "new" keyword
            if (!this._createWidget) {
                return new constructor(options, element);
            }

            // allow instantiation without initializing for simple inheritance
            // must use "new" keyword (the code above always passes args)
            if (arguments.length) {
                this._createWidget(options, element);
            }
        };
        // extend with the existing constructor to carry over any static properties
        $.extend(constructor, existingConstructor, {
            version: prototype.version,
            // copy the object used to create the prototype in case we need to
            // redefine the widget later
            _proto: $.extend({}, prototype),
            // track widgets that inherit from this widget in case this widget is
            // redefined after a widget inherits from it
            _childConstructors: []
        });

        basePrototype = new base();
        // we need to make the options hash a property directly on the new instance
        // otherwise we'll modify the options hash on the prototype that we're
        // inheriting from
        basePrototype.options = $.widget.extend({}, basePrototype.options);
        $.each(prototype, function(prop, value) {
            if (!$.isFunction(value)) {
                proxiedPrototype[prop] = value;
                return;
            }
            proxiedPrototype[prop] = (function() {
                var _super = function() {
                        return base.prototype[prop].apply(this, arguments);
                    },
                    _superApply = function(args) {
                        return base.prototype[prop].apply(this, args);
                    };
                return function() {
                    var __super = this._super,
                        __superApply = this._superApply,
                        returnValue;

                    this._super = _super;
                    this._superApply = _superApply;

                    returnValue = value.apply(this, arguments);

                    this._super = __super;
                    this._superApply = __superApply;

                    return returnValue;
                };
            })();
        });
        constructor.prototype = $.widget.extend(basePrototype, {
            // TODO: remove support for widgetEventPrefix
            // always use the name + a colon as the prefix, e.g., draggable:start
            // don't prefix for widgets that aren't DOM-based
            widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        });

        // If this widget is being redefined then we need to find all widgets that
        // are inheriting from it and redefine all of them so that they inherit from
        // the new version of this widget. We're essentially trying to replace one
        // level in the prototype chain.
        if (existingConstructor) {
            $.each(existingConstructor._childConstructors, function(i, child) {
                var childPrototype = child.prototype;

                // redefine the child widget using the same prototype that was
                // originally used, but inherit from the new version of the base
                $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
            });
            // remove the list of existing child constructors from the old constructor
            // so the old child constructors can be garbage collected
            delete existingConstructor._childConstructors;
        } else {
            base._childConstructors.push(constructor);
        }

        $.widget.bridge(name, constructor);

        return constructor;
    };

    $.widget.extend = function(target) {
        var input = widget_slice.call(arguments, 1),
            inputIndex = 0,
            inputLength = input.length,
            key,
            value;
        for (; inputIndex < inputLength; inputIndex++) {
            for (key in input[inputIndex]) {
                value = input[inputIndex][key];
                if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
                    // Clone objects
                    if ($.isPlainObject(value)) {
                        target[key] = $.isPlainObject(target[key]) ?
                            $.widget.extend({}, target[key], value) :
                            // Don't extend strings, arrays, etc. with objects
                            $.widget.extend({}, value);
                        // Copy everything else by reference
                    } else {
                        target[key] = value;
                    }
                }
            }
        }
        return target;
    };

    $.widget.bridge = function(name, object) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] = function(options) {
            var isMethodCall = typeof options === "string",
                args = widget_slice.call(arguments, 1),
                returnValue = this;

            if (isMethodCall) {
                this.each(function() {
                    var methodValue,
                        instance = $.data(this, fullName);
                    if (options === "instance") {
                        returnValue = instance;
                        return false;
                    }
                    if (!instance) {
                        return $.error("cannot call methods on " + name + " prior to initialization; " +
                            "attempted to call method '" + options + "'");
                    }
                    if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
                        return $.error("no such method '" + options + "' for " + name + " widget instance");
                    }
                    methodValue = instance[options].apply(instance, args);
                    if (methodValue !== instance && methodValue !== undefined) {
                        returnValue = methodValue && methodValue.jquery ?
                            returnValue.pushStack(methodValue.get()) :
                            methodValue;
                        return false;
                    }
                });
            } else {

                // Allow multiple hashes to be passed on init
                if (args.length) {
                    options = $.widget.extend.apply(null, [options].concat(args));
                }

                this.each(function() {
                    var instance = $.data(this, fullName);
                    if (instance) {
                        instance.option(options || {});
                        if (instance._init) {
                            instance._init();
                        }
                    } else {
                        $.data(this, fullName, new object(options, this));
                    }
                });
            }

            return returnValue;
        };
    };

    $.Widget = function( /* options, element */ ) {};
    $.Widget._childConstructors = [];

    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            disabled: false,

            // callbacks
            create: null
        },
        _createWidget: function(options, element) {
            element = $(element || this.defaultElement || this)[0];
            this.element = $(element);
            this.uuid = widget_uuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;

            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();

            if (element !== this) {
                $.data(element, this.widgetFullName, this);
                this._on(true, this.element, {
                    remove: function(event) {
                        if (event.target === element) {
                            this.destroy();
                        }
                    }
                });
                this.document = $(element.style ?
                    // element within the document
                    element.ownerDocument :
                    // element is window or document
                    element.document || element);
                this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
            }

            this.options = $.widget.extend({},
                this.options,
                this._getCreateOptions(),
                options);

            this._create();
            this._trigger("create", null, this._getCreateEventData());
            this._init();
        },
        _getCreateOptions: $.noop,
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,

        destroy: function() {
            this._destroy();
            // we can probably remove the unbind calls in 2.0
            // all event bindings should go through this._on()
            this.element
                .unbind(this.eventNamespace)
                .removeData(this.widgetFullName)
                // support: jquery <1.6.3
                // http://bugs.jquery.com/ticket/9413
                .removeData($.camelCase(this.widgetFullName));
            this.widget()
                .unbind(this.eventNamespace)
                .removeAttr("aria-disabled")
                .removeClass(
                    this.widgetFullName + "-disabled " +
                    "ui-state-disabled");

            // clean up events and states
            this.bindings.unbind(this.eventNamespace);
            this.hoverable.removeClass("ui-state-hover");
            this.focusable.removeClass("ui-state-focus");
        },
        _destroy: $.noop,

        widget: function() {
            return this.element;
        },

        option: function(key, value) {
            var options = key,
                parts,
                curOption,
                i;

            if (arguments.length === 0) {
                // don't return a reference to the internal hash
                return $.widget.extend({}, this.options);
            }

            if (typeof key === "string") {
                // handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
                options = {};
                parts = key.split(".");
                key = parts.shift();
                if (parts.length) {
                    curOption = options[key] = $.widget.extend({}, this.options[key]);
                    for (i = 0; i < parts.length - 1; i++) {
                        curOption[parts[i]] = curOption[parts[i]] || {};
                        curOption = curOption[parts[i]];
                    }
                    key = parts.pop();
                    if (arguments.length === 1) {
                        return curOption[key] === undefined ? null : curOption[key];
                    }
                    curOption[key] = value;
                } else {
                    if (arguments.length === 1) {
                        return this.options[key] === undefined ? null : this.options[key];
                    }
                    options[key] = value;
                }
            }

            this._setOptions(options);

            return this;
        },
        _setOptions: function(options) {
            var key;

            for (key in options) {
                this._setOption(key, options[key]);
            }

            return this;
        },
        _setOption: function(key, value) {
            this.options[key] = value;

            if (key === "disabled") {
                this.widget()
                    .toggleClass(this.widgetFullName + "-disabled", !!value);

                // If the widget is becoming disabled, then nothing is interactive
                if (value) {
                    this.hoverable.removeClass("ui-state-hover");
                    this.focusable.removeClass("ui-state-focus");
                }
            }

            return this;
        },

        enable: function() {
            return this._setOptions({
                disabled: false
            });
        },
        disable: function() {
            return this._setOptions({
                disabled: true
            });
        },

        _on: function(suppressDisabledCheck, element, handlers) {
            var delegateElement,
                instance = this;

            // no suppressDisabledCheck flag, shuffle arguments
            if (typeof suppressDisabledCheck !== "boolean") {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false;
            }

            // no element argument, shuffle and use this.element
            if (!handlers) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget();
            } else {
                element = delegateElement = $(element);
                this.bindings = this.bindings.add(element);
            }

            $.each(handlers, function(event, handler) {
                function handlerProxy() {
                    // allow widgets to customize the disabled handling
                    // - disabled as an array instead of boolean
                    // - disabled class as method for disabling individual parts
                    if (!suppressDisabledCheck &&
                        (instance.options.disabled === true ||
                            $(this).hasClass("ui-state-disabled"))) {
                        return;
                    }
                    return (typeof handler === "string" ? instance[handler] : handler)
                        .apply(instance, arguments);
                }

                // copy the guid so direct unbinding works
                if (typeof handler !== "string") {
                    handlerProxy.guid = handler.guid =
                        handler.guid || handlerProxy.guid || $.guid++;
                }

                var match = event.match(/^([\w:-]*)\s*(.*)$/),
                    eventName = match[1] + instance.eventNamespace,
                    selector = match[2];
                if (selector) {
                    delegateElement.delegate(selector, eventName, handlerProxy);
                } else {
                    element.bind(eventName, handlerProxy);
                }
            });
        },

        _off: function(element, eventName) {
            eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") +
                this.eventNamespace;
            element.unbind(eventName).undelegate(eventName);

            // Clear the stack to avoid memory leaks (#10056)
            this.bindings = $(this.bindings.not(element).get());
            this.focusable = $(this.focusable.not(element).get());
            this.hoverable = $(this.hoverable.not(element).get());
        },

        _delay: function(handler, delay) {
            function handlerProxy() {
                return (typeof handler === "string" ? instance[handler] : handler)
                    .apply(instance, arguments);
            }
            var instance = this;
            return setTimeout(handlerProxy, delay || 0);
        },

        _hoverable: function(element) {
            this.hoverable = this.hoverable.add(element);
            this._on(element, {
                mouseenter: function(event) {
                    $(event.currentTarget).addClass("ui-state-hover");
                },
                mouseleave: function(event) {
                    $(event.currentTarget).removeClass("ui-state-hover");
                }
            });
        },

        _focusable: function(element) {
            this.focusable = this.focusable.add(element);
            this._on(element, {
                focusin: function(event) {
                    $(event.currentTarget).addClass("ui-state-focus");
                },
                focusout: function(event) {
                    $(event.currentTarget).removeClass("ui-state-focus");
                }
            });
        },

        _trigger: function(type, event, data) {
            var prop, orig,
                callback = this.options[type];

            data = data || {};
            event = $.Event(event);
            event.type = (type === this.widgetEventPrefix ?
                type :
                this.widgetEventPrefix + type).toLowerCase();
            // the original event may come from any element
            // so we need to reset the target on the new event
            event.target = this.element[0];

            // copy original event properties over to the new event
            orig = event.originalEvent;
            if (orig) {
                for (prop in orig) {
                    if (!(prop in event)) {
                        event[prop] = orig[prop];
                    }
                }
            }

            this.element.trigger(event, data);
            return !($.isFunction(callback) &&
                callback.apply(this.element[0], [event].concat(data)) === false ||
                event.isDefaultPrevented());
        }
    };

    $.each({
        show: "fadeIn",
        hide: "fadeOut"
    }, function(method, defaultEffect) {
        $.Widget.prototype["_" + method] = function(element, options, callback) {
            if (typeof options === "string") {
                options = {
                    effect: options
                };
            }
            var hasOptions,
                effectName = !options ?
                method :
                options === true || typeof options === "number" ?
                defaultEffect :
                options.effect || defaultEffect;
            options = options || {};
            if (typeof options === "number") {
                options = {
                    duration: options
                };
            }
            hasOptions = !$.isEmptyObject(options);
            options.complete = callback;
            if (options.delay) {
                element.delay(options.delay);
            }
            if (hasOptions && $.effects && $.effects.effect[effectName]) {
                element[method](options);
            } else if (effectName !== method && element[effectName]) {
                element[effectName](options.duration, options.easing, callback);
            } else {
                element.queue(function(next) {
                    $(this)[method]();
                    if (callback) {
                        callback.call(element[0]);
                    }
                    next();
                });
            }
        };
    });

    var widget = $.widget;


    /*!
     * jQuery UI Mouse 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/mouse/
     */


    var mouseHandled = false;
    $(document).mouseup(function() {
        mouseHandled = false;
    });

    var mouse = $.widget("ui.mouse", {
        version: "1.11.4",
        options: {
            cancel: "input,textarea,button,select,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var that = this;

            this.element
                .bind("mousedown." + this.widgetName, function(event) {
                    return that._mouseDown(event);
                })
                .bind("click." + this.widgetName, function(event) {
                    if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                        $.removeData(event.target, that.widgetName + ".preventClickEvent");
                        event.stopImmediatePropagation();
                        return false;
                    }
                });

            this.started = false;
        },

        // TODO: make sure destroying one instance of mouse doesn't mess with
        // other instances of mouse
        _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName);
            if (this._mouseMoveDelegate) {
                this.document
                    .unbind("mousemove." + this.widgetName, this._mouseMoveDelegate)
                    .unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            }
        },

        _mouseDown: function(event) {
            // don't let more than one widget handle mouseStart
            if (mouseHandled) {
                return;
            }

            this._mouseMoved = false;

            // we may have missed mouseup (out of window)
            (this._mouseStarted && this._mouseUp(event));

            this._mouseDownEvent = event;

            var that = this,
                btnIsLeft = (event.which === 1),
                // event.target.nodeName works around a bug in IE 8 with
                // disabled inputs (#7620)
                elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                return true;
            }

            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function() {
                    that.mouseDelayMet = true;
                }, this.options.delay);
            }

            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = (this._mouseStart(event) !== false);
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true;
                }
            }

            // Click event may never have fired (Gecko & Opera)
            if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
                $.removeData(event.target, this.widgetName + ".preventClickEvent");
            }

            // these delegates are required to keep context
            this._mouseMoveDelegate = function(event) {
                return that._mouseMove(event);
            };
            this._mouseUpDelegate = function(event) {
                return that._mouseUp(event);
            };

            this.document
                .bind("mousemove." + this.widgetName, this._mouseMoveDelegate)
                .bind("mouseup." + this.widgetName, this._mouseUpDelegate);

            event.preventDefault();

            mouseHandled = true;
            return true;
        },

        _mouseMove: function(event) {
            // Only check for mouseups outside the document if you've moved inside the document
            // at least once. This prevents the firing of mouseup in the case of IE<9, which will
            // fire a mousemove event if content is placed under the cursor. See #7778
            // Support: IE <9
            if (this._mouseMoved) {
                // IE mouseup check - mouseup happened when mouse was out of window
                if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
                    return this._mouseUp(event);

                    // Iframe mouseup check - mouseup occurred in another document
                } else if (!event.which) {
                    return this._mouseUp(event);
                }
            }

            if (event.which || event.button) {
                this._mouseMoved = true;
            }

            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }

            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted =
                    (this._mouseStart(this._mouseDownEvent, event) !== false);
                (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
            }

            return !this._mouseStarted;
        },

        _mouseUp: function(event) {
            this.document
                .unbind("mousemove." + this.widgetName, this._mouseMoveDelegate)
                .unbind("mouseup." + this.widgetName, this._mouseUpDelegate);

            if (this._mouseStarted) {
                this._mouseStarted = false;

                if (event.target === this._mouseDownEvent.target) {
                    $.data(event.target, this.widgetName + ".preventClickEvent", true);
                }

                this._mouseStop(event);
            }

            mouseHandled = false;
            return false;
        },

        _mouseDistanceMet: function(event) {
            return (Math.max(
                Math.abs(this._mouseDownEvent.pageX - event.pageX),
                Math.abs(this._mouseDownEvent.pageY - event.pageY)
            ) >= this.options.distance);
        },

        _mouseDelayMet: function( /* event */ ) {
            return this.mouseDelayMet;
        },

        // These are placeholder methods, to be overriden by extending plugin
        _mouseStart: function( /* event */ ) {},
        _mouseDrag: function( /* event */ ) {},
        _mouseStop: function( /* event */ ) {},
        _mouseCapture: function( /* event */ ) {
            return true;
        }
    });


    /*!
     * jQuery UI Position 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/position/
     */

    (function() {

        $.ui = $.ui || {};

        var cachedScrollbarWidth, supportsOffsetFractions,
            max = Math.max,
            abs = Math.abs,
            round = Math.round,
            rhorizontal = /left|center|right/,
            rvertical = /top|center|bottom/,
            roffset = /[\+\-]\d+(\.[\d]+)?%?/,
            rposition = /^\w+/,
            rpercent = /%$/,
            _position = $.fn.position;

        function getOffsets(offsets, width, height) {
            return [
                parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1),
                parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)
            ];
        }

        function parseCss(element, property) {
            return parseInt($.css(element, property), 10) || 0;
        }

        function getDimensions(elem) {
            var raw = elem[0];
            if (raw.nodeType === 9) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: {
                        top: 0,
                        left: 0
                    }
                };
            }
            if ($.isWindow(raw)) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: {
                        top: elem.scrollTop(),
                        left: elem.scrollLeft()
                    }
                };
            }
            if (raw.preventDefault) {
                return {
                    width: 0,
                    height: 0,
                    offset: {
                        top: raw.pageY,
                        left: raw.pageX
                    }
                };
            }
            return {
                width: elem.outerWidth(),
                height: elem.outerHeight(),
                offset: elem.offset()
            };
        }

        $.position = {
            scrollbarWidth: function() {
                if (cachedScrollbarWidth !== undefined) {
                    return cachedScrollbarWidth;
                }
                var w1, w2,
                    div = $("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),
                    innerDiv = div.children()[0];

                $("body").append(div);
                w1 = innerDiv.offsetWidth;
                div.css("overflow", "scroll");

                w2 = innerDiv.offsetWidth;

                if (w1 === w2) {
                    w2 = div[0].clientWidth;
                }

                div.remove();

                return (cachedScrollbarWidth = w1 - w2);
            },
            getScrollInfo: function(within) {
                var overflowX = within.isWindow || within.isDocument ? "" :
                    within.element.css("overflow-x"),
                    overflowY = within.isWindow || within.isDocument ? "" :
                    within.element.css("overflow-y"),
                    hasOverflowX = overflowX === "scroll" ||
                    (overflowX === "auto" && within.width < within.element[0].scrollWidth),
                    hasOverflowY = overflowY === "scroll" ||
                    (overflowY === "auto" && within.height < within.element[0].scrollHeight);
                return {
                    width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                    height: hasOverflowX ? $.position.scrollbarWidth() : 0
                };
            },
            getWithinInfo: function(element) {
                var withinElement = $(element || window),
                    isWindow = $.isWindow(withinElement[0]),
                    isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;
                return {
                    element: withinElement,
                    isWindow: isWindow,
                    isDocument: isDocument,
                    offset: withinElement.offset() || {
                        left: 0,
                        top: 0
                    },
                    scrollLeft: withinElement.scrollLeft(),
                    scrollTop: withinElement.scrollTop(),

                    // support: jQuery 1.6.x
                    // jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows
                    width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
                    height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
                };
            }
        };

        $.fn.position = function(options) {
            if (!options || !options.of) {
                return _position.apply(this, arguments);
            }

            // make a copy, we don't want to modify arguments
            options = $.extend({}, options);

            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
                target = $(options.of),
                within = $.position.getWithinInfo(options.within),
                scrollInfo = $.position.getScrollInfo(within),
                collision = (options.collision || "flip").split(" "),
                offsets = {};

            dimensions = getDimensions(target);
            if (target[0].preventDefault) {
                // force left top to allow flipping
                options.at = "left top";
            }
            targetWidth = dimensions.width;
            targetHeight = dimensions.height;
            targetOffset = dimensions.offset;
            // clone to reuse original targetOffset later
            basePosition = $.extend({}, targetOffset);

            // force my and at to have valid horizontal and vertical positions
            // if a value is missing or invalid, it will be converted to center
            $.each(["my", "at"], function() {
                var pos = (options[this] || "").split(" "),
                    horizontalOffset,
                    verticalOffset;

                if (pos.length === 1) {
                    pos = rhorizontal.test(pos[0]) ?
                        pos.concat(["center"]) :
                        rvertical.test(pos[0]) ? ["center"].concat(pos) : ["center", "center"];
                }
                pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
                pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";

                // calculate offsets
                horizontalOffset = roffset.exec(pos[0]);
                verticalOffset = roffset.exec(pos[1]);
                offsets[this] = [
                    horizontalOffset ? horizontalOffset[0] : 0,
                    verticalOffset ? verticalOffset[0] : 0
                ];

                // reduce to just the positions without the offsets
                options[this] = [
                    rposition.exec(pos[0])[0],
                    rposition.exec(pos[1])[0]
                ];
            });

            // normalize collision option
            if (collision.length === 1) {
                collision[1] = collision[0];
            }

            if (options.at[0] === "right") {
                basePosition.left += targetWidth;
            } else if (options.at[0] === "center") {
                basePosition.left += targetWidth / 2;
            }

            if (options.at[1] === "bottom") {
                basePosition.top += targetHeight;
            } else if (options.at[1] === "center") {
                basePosition.top += targetHeight / 2;
            }

            atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
            basePosition.left += atOffset[0];
            basePosition.top += atOffset[1];

            return this.each(function() {
                var collisionPosition, using,
                    elem = $(this),
                    elemWidth = elem.outerWidth(),
                    elemHeight = elem.outerHeight(),
                    marginLeft = parseCss(this, "marginLeft"),
                    marginTop = parseCss(this, "marginTop"),
                    collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width,
                    collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height,
                    position = $.extend({}, basePosition),
                    myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());

                if (options.my[0] === "right") {
                    position.left -= elemWidth;
                } else if (options.my[0] === "center") {
                    position.left -= elemWidth / 2;
                }

                if (options.my[1] === "bottom") {
                    position.top -= elemHeight;
                } else if (options.my[1] === "center") {
                    position.top -= elemHeight / 2;
                }

                position.left += myOffset[0];
                position.top += myOffset[1];

                // if the browser doesn't support fractions, then round for consistent results
                if (!supportsOffsetFractions) {
                    position.left = round(position.left);
                    position.top = round(position.top);
                }

                collisionPosition = {
                    marginLeft: marginLeft,
                    marginTop: marginTop
                };

                $.each(["left", "top"], function(i, dir) {
                    if ($.ui.position[collision[i]]) {
                        $.ui.position[collision[i]][dir](position, {
                            targetWidth: targetWidth,
                            targetHeight: targetHeight,
                            elemWidth: elemWidth,
                            elemHeight: elemHeight,
                            collisionPosition: collisionPosition,
                            collisionWidth: collisionWidth,
                            collisionHeight: collisionHeight,
                            offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
                            my: options.my,
                            at: options.at,
                            within: within,
                            elem: elem
                        });
                    }
                });

                if (options.using) {
                    // adds feedback as second argument to using callback, if present
                    using = function(props) {
                        var left = targetOffset.left - position.left,
                            right = left + targetWidth - elemWidth,
                            top = targetOffset.top - position.top,
                            bottom = top + targetHeight - elemHeight,
                            feedback = {
                                target: {
                                    element: target,
                                    left: targetOffset.left,
                                    top: targetOffset.top,
                                    width: targetWidth,
                                    height: targetHeight
                                },
                                element: {
                                    element: elem,
                                    left: position.left,
                                    top: position.top,
                                    width: elemWidth,
                                    height: elemHeight
                                },
                                horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                                vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                            };
                        if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
                            feedback.horizontal = "center";
                        }
                        if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
                            feedback.vertical = "middle";
                        }
                        if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
                            feedback.important = "horizontal";
                        } else {
                            feedback.important = "vertical";
                        }
                        options.using.call(this, props, feedback);
                    };
                }

                elem.offset($.extend(position, {
                    using: using
                }));
            });
        };

        $.ui.position = {
            fit: {
                left: function(position, data) {
                    var within = data.within,
                        withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
                        outerWidth = within.width,
                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                        overLeft = withinOffset - collisionPosLeft,
                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
                        newOverRight;

                    // element is wider than within
                    if (data.collisionWidth > outerWidth) {
                        // element is initially over the left side of within
                        if (overLeft > 0 && overRight <= 0) {
                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                            position.left += overLeft - newOverRight;
                            // element is initially over right side of within
                        } else if (overRight > 0 && overLeft <= 0) {
                            position.left = withinOffset;
                            // element is initially over both left and right sides of within
                        } else {
                            if (overLeft > overRight) {
                                position.left = withinOffset + outerWidth - data.collisionWidth;
                            } else {
                                position.left = withinOffset;
                            }
                        }
                        // too far left -> align with left edge
                    } else if (overLeft > 0) {
                        position.left += overLeft;
                        // too far right -> align with right edge
                    } else if (overRight > 0) {
                        position.left -= overRight;
                        // adjust based on position and margin
                    } else {
                        position.left = max(position.left - collisionPosLeft, position.left);
                    }
                },
                top: function(position, data) {
                    var within = data.within,
                        withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
                        outerHeight = data.within.height,
                        collisionPosTop = position.top - data.collisionPosition.marginTop,
                        overTop = withinOffset - collisionPosTop,
                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
                        newOverBottom;

                    // element is taller than within
                    if (data.collisionHeight > outerHeight) {
                        // element is initially over the top of within
                        if (overTop > 0 && overBottom <= 0) {
                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                            position.top += overTop - newOverBottom;
                            // element is initially over bottom of within
                        } else if (overBottom > 0 && overTop <= 0) {
                            position.top = withinOffset;
                            // element is initially over both top and bottom of within
                        } else {
                            if (overTop > overBottom) {
                                position.top = withinOffset + outerHeight - data.collisionHeight;
                            } else {
                                position.top = withinOffset;
                            }
                        }
                        // too far up -> align with top
                    } else if (overTop > 0) {
                        position.top += overTop;
                        // too far down -> align with bottom edge
                    } else if (overBottom > 0) {
                        position.top -= overBottom;
                        // adjust based on position and margin
                    } else {
                        position.top = max(position.top - collisionPosTop, position.top);
                    }
                }
            },
            flip: {
                left: function(position, data) {
                    var within = data.within,
                        withinOffset = within.offset.left + within.scrollLeft,
                        outerWidth = within.width,
                        offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                        overLeft = collisionPosLeft - offsetLeft,
                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
                        myOffset = data.my[0] === "left" ?
                        -data.elemWidth :
                        data.my[0] === "right" ?
                        data.elemWidth :
                        0,
                        atOffset = data.at[0] === "left" ?
                        data.targetWidth :
                        data.at[0] === "right" ?
                        -data.targetWidth :
                        0,
                        offset = -2 * data.offset[0],
                        newOverRight,
                        newOverLeft;

                    if (overLeft < 0) {
                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                        if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                            position.left += myOffset + atOffset + offset;
                        }
                    } else if (overRight > 0) {
                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                        if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                            position.left += myOffset + atOffset + offset;
                        }
                    }
                },
                top: function(position, data) {
                    var within = data.within,
                        withinOffset = within.offset.top + within.scrollTop,
                        outerHeight = within.height,
                        offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
                        collisionPosTop = position.top - data.collisionPosition.marginTop,
                        overTop = collisionPosTop - offsetTop,
                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
                        top = data.my[1] === "top",
                        myOffset = top ?
                        -data.elemHeight :
                        data.my[1] === "bottom" ?
                        data.elemHeight :
                        0,
                        atOffset = data.at[1] === "top" ?
                        data.targetHeight :
                        data.at[1] === "bottom" ?
                        -data.targetHeight :
                        0,
                        offset = -2 * data.offset[1],
                        newOverTop,
                        newOverBottom;
                    if (overTop < 0) {
                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                        if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
                            position.top += myOffset + atOffset + offset;
                        }
                    } else if (overBottom > 0) {
                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                        if (newOverTop > 0 || abs(newOverTop) < overBottom) {
                            position.top += myOffset + atOffset + offset;
                        }
                    }
                }
            },
            flipfit: {
                left: function() {
                    $.ui.position.flip.left.apply(this, arguments);
                    $.ui.position.fit.left.apply(this, arguments);
                },
                top: function() {
                    $.ui.position.flip.top.apply(this, arguments);
                    $.ui.position.fit.top.apply(this, arguments);
                }
            }
        };

        // fraction support test
        (function() {
            var testElement, testElementParent, testElementStyle, offsetLeft, i,
                body = document.getElementsByTagName("body")[0],
                div = document.createElement("div");

            //Create a "fake body" for testing based on method used in jQuery.support
            testElement = document.createElement(body ? "div" : "body");
            testElementStyle = {
                visibility: "hidden",
                width: 0,
                height: 0,
                border: 0,
                margin: 0,
                background: "none"
            };
            if (body) {
                $.extend(testElementStyle, {
                    position: "absolute",
                    left: "-1000px",
                    top: "-1000px"
                });
            }
            for (i in testElementStyle) {
                testElement.style[i] = testElementStyle[i];
            }
            testElement.appendChild(div);
            testElementParent = body || document.documentElement;
            testElementParent.insertBefore(testElement, testElementParent.firstChild);

            div.style.cssText = "position: absolute; left: 10.7432222px;";

            offsetLeft = $(div).offset().left;
            supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;

            testElement.innerHTML = "";
            testElementParent.removeChild(testElement);
        })();

    })();

    var position = $.ui.position;


    /*!
     * jQuery UI Datepicker 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/datepicker/
     */


    $.extend($.ui, {
        datepicker: {
            version: "1.11.4"
        }
    });

    var datepicker_instActive;

    function datepicker_getZindex(elem) {
        var position, value;
        while (elem.length && elem[0] !== document) {
            // Ignore z-index if position is set to a value where z-index is ignored by the browser
            // This makes behavior of this function consistent across browsers
            // WebKit always returns auto if the element is positioned
            position = elem.css("position");
            if (position === "absolute" || position === "relative" || position === "fixed") {
                // IE returns 0 when zIndex is not specified
                // other browsers return a string
                // we ignore the case of nested elements with an explicit value of 0
                // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                value = parseInt(elem.css("zIndex"), 10);
                if (!isNaN(value) && value !== 0) {
                    return value;
                }
            }
            elem = elem.parent();
        }

        return 0;
    }
    /* Date picker manager.
       Use the singleton instance of this class, $.datepicker, to interact with the date picker.
       Settings for (groups of) date pickers are maintained in an instance object,
       allowing multiple different settings on the same page. */

    function Datepicker() {
        this._curInst = null; // The current instance in use
        this._keyEvent = false; // If the last event was a key event
        this._disabledInputs = []; // List of date picker inputs that have been disabled
        this._datepickerShowing = false; // True if the popup picker is showing , false if not
        this._inDialog = false; // True if showing within a "dialog", false if not
        this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
        this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
        this._appendClass = "ui-datepicker-append"; // The name of the append marker class
        this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
        this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
        this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
        this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
        this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
        this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
        this.regional = []; // Available regional settings, indexed by language code
        this.regional[""] = { // Default regional settings
            closeText: "Done", // Display text for close link
            prevText: "Prev", // Display text for previous month link
            nextText: "Next", // Display text for next month link
            currentText: "Today", // Display text for current month link
            monthNames: ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ], // Names of months for drop-down and formatting
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], // Column headings for days starting at Sunday
            weekHeader: "Wk", // Column header for week of the year
            dateFormat: "mm/dd/yy", // See format options on parseDate
            firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
            isRTL: false, // True if right-to-left language, false if left-to-right
            showMonthAfterYear: false, // True if the year select precedes month, false for month then year
            yearSuffix: "" // Additional text to append to the year in the month headers
        };
        this._defaults = { // Global defaults for all the date picker instances
            showOn: "focus", // "focus" for popup on focus,
            // "button" for trigger button, or "both" for either
            showAnim: "fadeIn", // Name of jQuery animation for popup
            showOptions: {}, // Options for enhanced animations
            defaultDate: null, // Used when field is blank: actual date,
            // +/-number for offset from today, null for today
            appendText: "", // Display text following the input box, e.g. showing the format
            buttonText: "...", // Text for trigger button
            buttonImage: "", // URL for trigger button image
            buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
            hideIfNoPrevNext: false, // True to hide next/previous month links
            // if not applicable, false to just disable them
            navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
            gotoCurrent: false, // True if today link goes back to current selection instead
            changeMonth: false, // True if month can be selected directly, false if only prev/next
            changeYear: false, // True if year can be selected directly, false if only prev/next
            yearRange: "c-10:c+10", // Range of years to display in drop-down,
            // either relative to today's year (-nn:+nn), relative to currently displayed year
            // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
            showOtherMonths: false, // True to show dates in other months, false to leave blank
            selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
            showWeek: false, // True to show week of the year, false to not show it
            calculateWeek: this.iso8601Week, // How to calculate the week of the year,
            // takes a Date and returns the number of the week for it
            shortYearCutoff: "+10", // Short year values < this are in the current century,
            // > this are in the previous century,
            // string value starting with "+" for current year + value
            minDate: null, // The earliest selectable date, or null for no limit
            maxDate: null, // The latest selectable date, or null for no limit
            duration: "fast", // Duration of display/closure
            beforeShowDay: null, // Function that takes a date and returns an array with
            // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
            // [2] = cell title (optional), e.g. $.datepicker.noWeekends
            beforeShow: null, // Function that takes an input field and
            // returns a set of custom settings for the date picker
            onSelect: null, // Define a callback function when a date is selected
            onChangeMonthYear: null, // Define a callback function when the month or year is changed
            onClose: null, // Define a callback function when the datepicker is closed
            numberOfMonths: 1, // Number of months to show at a time
            showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
            stepMonths: 1, // Number of months to step back/forward
            stepBigMonths: 12, // Number of months to step back/forward for the big links
            altField: "", // Selector for an alternate field to store selected dates into
            altFormat: "", // The date format to use for the alternate field
            constrainInput: true, // The input is constrained by the current date format
            showButtonPanel: false, // True to show button panel, false to not show it
            autoSize: false, // True to size the input for the date format, false to leave as is
            disabled: false // The initial disabled state
        };
        $.extend(this._defaults, this.regional[""]);
        this.regional.en = $.extend(true, {}, this.regional[""]);
        this.regional["en-US"] = $.extend(true, {}, this.regional.en);
        this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
    }

    $.extend(Datepicker.prototype, {
        /* Class name added to elements to indicate already configured with a date picker. */
        markerClassName: "hasDatepicker",

        //Keep track of the maximum number of rows displayed (see #7043)
        maxRows: 4,

        // TODO rename to "widget" when switching to widget factory
        _widgetDatepicker: function() {
            return this.dpDiv;
        },

        /* Override the default settings for all instances of the date picker.
         * @param  settings  object - the new settings to use as defaults (anonymous object)
         * @return the manager object
         */
        setDefaults: function(settings) {
            datepicker_extendRemove(this._defaults, settings || {});
            return this;
        },

        /* Attach the date picker to a jQuery selection.
         * @param  target   element - the target input field or division or span
         * @param  settings  object - the new settings to use for this date picker instance (anonymous)
         */
        _attachDatepicker: function(target, settings) {
            var nodeName, inline, inst;
            nodeName = target.nodeName.toLowerCase();
            inline = (nodeName === "div" || nodeName === "span");
            if (!target.id) {
                this.uuid += 1;
                target.id = "dp" + this.uuid;
            }
            inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {});
            if (nodeName === "input") {
                this._connectDatepicker(target, inst);
            } else if (inline) {
                this._inlineDatepicker(target, inst);
            }
        },

        /* Create a new instance object. */
        _newInst: function(target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
            return {
                id: id,
                input: target, // associated target
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0, // current selection
                drawMonth: 0,
                drawYear: 0, // month being drawn
                inline: inline, // is datepicker inline or not
                dpDiv: (!inline ? this.dpDiv : // presentation div
                    datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))
            };
        },

        /* Attach the date picker to an input field. */
        _connectDatepicker: function(target, inst) {
            var input = $(target);
            inst.append = $([]);
            inst.trigger = $([]);
            if (input.hasClass(this.markerClassName)) {
                return;
            }
            this._attachments(input, inst);
            input.addClass(this.markerClassName).keydown(this._doKeyDown).
            keypress(this._doKeyPress).keyup(this._doKeyUp);
            this._autoSize(inst);
            $.data(target, "datepicker", inst);
            //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
            if (inst.settings.disabled) {
                this._disableDatepicker(target);
            }
        },

        /* Make attachments based on settings. */
        _attachments: function(input, inst) {
            var showOn, buttonText, buttonImage,
                appendText = this._get(inst, "appendText"),
                isRTL = this._get(inst, "isRTL");

            if (inst.append) {
                inst.append.remove();
            }
            if (appendText) {
                inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
                input[isRTL ? "before" : "after"](inst.append);
            }

            input.unbind("focus", this._showDatepicker);

            if (inst.trigger) {
                inst.trigger.remove();
            }

            showOn = this._get(inst, "showOn");
            if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
                input.focus(this._showDatepicker);
            }
            if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
                buttonText = this._get(inst, "buttonText");
                buttonImage = this._get(inst, "buttonImage");
                inst.trigger = $(this._get(inst, "buttonImageOnly") ?
                    $("<img/>").addClass(this._triggerClass).attr({
                        src: buttonImage,
                        alt: buttonText,
                        title: buttonText
                    }) :
                    $("<button type='button'></button>").addClass(this._triggerClass).html(!buttonImage ? buttonText : $("<img/>").attr({
                        src: buttonImage,
                        alt: buttonText,
                        title: buttonText
                    })));
                input[isRTL ? "before" : "after"](inst.trigger);
                inst.trigger.click(function() {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
                        $.datepicker._hideDatepicker();
                    } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                        $.datepicker._hideDatepicker();
                        $.datepicker._showDatepicker(input[0]);
                    } else {
                        $.datepicker._showDatepicker(input[0]);
                    }
                    return false;
                });
            }
        },

        /* Apply the maximum length for the date format. */
        _autoSize: function(inst) {
            if (this._get(inst, "autoSize") && !inst.inline) {
                var findMax, max, maxI, i,
                    date = new Date(2009, 12 - 1, 20), // Ensure double digits
                    dateFormat = this._get(inst, "dateFormat");

                if (dateFormat.match(/[DM]/)) {
                    findMax = function(names) {
                        max = 0;
                        maxI = 0;
                        for (i = 0; i < names.length; i++) {
                            if (names[i].length > max) {
                                max = names[i].length;
                                maxI = i;
                            }
                        }
                        return maxI;
                    };
                    date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
                        "monthNames" : "monthNamesShort"))));
                    date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
                        "dayNames" : "dayNamesShort"))) + 20 - date.getDay());
                }
                inst.input.attr("size", this._formatDate(inst, date).length);
            }
        },

        /* Attach an inline date picker to a div. */
        _inlineDatepicker: function(target, inst) {
            var divSpan = $(target);
            if (divSpan.hasClass(this.markerClassName)) {
                return;
            }
            divSpan.addClass(this.markerClassName).append(inst.dpDiv);
            $.data(target, "datepicker", inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
            //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
            if (inst.settings.disabled) {
                this._disableDatepicker(target);
            }
            // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
            // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
            inst.dpDiv.css("display", "block");
        },

        /* Pop-up the date picker in a "dialog" box.
         * @param  input element - ignored
         * @param  date string or Date - the initial date to display
         * @param  onSelect  function - the function to call when a date is selected
         * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
         * @param  pos int[2] - coordinates for the dialog's position within the screen or
         *                  event - with x/y coordinates or
         *                  leave empty for default (screen centre)
         * @return the manager object
         */
        _dialogDatepicker: function(input, date, onSelect, settings, pos) {
            var id, browserWidth, browserHeight, scrollX, scrollY,
                inst = this._dialogInst; // internal instance

            if (!inst) {
                this.uuid += 1;
                id = "dp" + this.uuid;
                this._dialogInput = $("<input type='text' id='" + id +
                    "' style='position: absolute; top: -100px; width: 0px;'/>");
                this._dialogInput.keydown(this._doKeyDown);
                $("body").append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                $.data(this._dialogInput[0], "datepicker", inst);
            }
            datepicker_extendRemove(inst.settings, settings || {});
            date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
            this._dialogInput.val(date);

            this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
            if (!this._pos) {
                browserWidth = document.documentElement.clientWidth;
                browserHeight = document.documentElement.clientHeight;
                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = // should use actual width/height below
                    [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
            }

            // move input on screen for focus, but hidden behind dialog
            this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if ($.blockUI) {
                $.blockUI(this.dpDiv);
            }
            $.data(this._dialogInput[0], "datepicker", inst);
            return this;
        },

        /* Detach a datepicker from its control.
         * @param  target   element - the target input field or division or span
         */
        _destroyDatepicker: function(target) {
            var nodeName,
                $target = $(target),
                inst = $.data(target, "datepicker");

            if (!$target.hasClass(this.markerClassName)) {
                return;
            }

            nodeName = target.nodeName.toLowerCase();
            $.removeData(target, "datepicker");
            if (nodeName === "input") {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass(this.markerClassName).
                unbind("focus", this._showDatepicker).
                unbind("keydown", this._doKeyDown).
                unbind("keypress", this._doKeyPress).
                unbind("keyup", this._doKeyUp);
            } else if (nodeName === "div" || nodeName === "span") {
                $target.removeClass(this.markerClassName).empty();
            }

            if (datepicker_instActive === inst) {
                datepicker_instActive = null;
            }
        },

        /* Enable the date picker to a jQuery selection.
         * @param  target   element - the target input field or division or span
         */
        _enableDatepicker: function(target) {
            var nodeName, inline,
                $target = $(target),
                inst = $.data(target, "datepicker");

            if (!$target.hasClass(this.markerClassName)) {
                return;
            }

            nodeName = target.nodeName.toLowerCase();
            if (nodeName === "input") {
                target.disabled = false;
                inst.trigger.filter("button").
                each(function() {
                    this.disabled = false;
                }).end().
                filter("img").css({
                    opacity: "1.0",
                    cursor: ""
                });
            } else if (nodeName === "div" || nodeName === "span") {
                inline = $target.children("." + this._inlineClass);
                inline.children().removeClass("ui-state-disabled");
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
                prop("disabled", false);
            }
            this._disabledInputs = $.map(this._disabledInputs,
                function(value) {
                    return (value === target ? null : value);
                }); // delete entry
        },

        /* Disable the date picker to a jQuery selection.
         * @param  target   element - the target input field or division or span
         */
        _disableDatepicker: function(target) {
            var nodeName, inline,
                $target = $(target),
                inst = $.data(target, "datepicker");

            if (!$target.hasClass(this.markerClassName)) {
                return;
            }

            nodeName = target.nodeName.toLowerCase();
            if (nodeName === "input") {
                target.disabled = true;
                inst.trigger.filter("button").
                each(function() {
                    this.disabled = true;
                }).end().
                filter("img").css({
                    opacity: "0.5",
                    cursor: "default"
                });
            } else if (nodeName === "div" || nodeName === "span") {
                inline = $target.children("." + this._inlineClass);
                inline.children().addClass("ui-state-disabled");
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
                prop("disabled", true);
            }
            this._disabledInputs = $.map(this._disabledInputs,
                function(value) {
                    return (value === target ? null : value);
                }); // delete entry
            this._disabledInputs[this._disabledInputs.length] = target;
        },

        /* Is the first field in a jQuery collection disabled as a datepicker?
         * @param  target   element - the target input field or division or span
         * @return boolean - true if disabled, false if enabled
         */
        _isDisabledDatepicker: function(target) {
            if (!target) {
                return false;
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] === target) {
                    return true;
                }
            }
            return false;
        },

        /* Retrieve the instance data for the target control.
         * @param  target  element - the target input field or division or span
         * @return  object - the associated instance data
         * @throws  error if a jQuery problem getting data
         */
        _getInst: function(target) {
            try {
                return $.data(target, "datepicker");
            } catch (err) {
                throw "Missing instance data for this datepicker";
            }
        },

        /* Update or retrieve the settings for a date picker attached to an input field or division.
         * @param  target  element - the target input field or division or span
         * @param  name object - the new settings to update or
         *              string - the name of the setting to change or retrieve,
         *              when retrieving also "all" for all instance settings or
         *              "defaults" for all global defaults
         * @param  value   any - the new value for the setting
         *              (omit if above is an object or to retrieve a value)
         */
        _optionDatepicker: function(target, name, value) {
            var settings, date, minDate, maxDate,
                inst = this._getInst(target);

            if (arguments.length === 2 && typeof name === "string") {
                return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
                    (inst ? (name === "all" ? $.extend({}, inst.settings) :
                        this._get(inst, name)) : null));
            }

            settings = name || {};
            if (typeof name === "string") {
                settings = {};
                settings[name] = value;
            }

            if (inst) {
                if (this._curInst === inst) {
                    this._hideDatepicker();
                }

                date = this._getDateDatepicker(target, true);
                minDate = this._getMinMaxDate(inst, "min");
                maxDate = this._getMinMaxDate(inst, "max");
                datepicker_extendRemove(inst.settings, settings);
                // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
                if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
                    inst.settings.minDate = this._formatDate(inst, minDate);
                }
                if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
                    inst.settings.maxDate = this._formatDate(inst, maxDate);
                }
                if ("disabled" in settings) {
                    if (settings.disabled) {
                        this._disableDatepicker(target);
                    } else {
                        this._enableDatepicker(target);
                    }
                }
                this._attachments($(target), inst);
                this._autoSize(inst);
                this._setDate(inst, date);
                this._updateAlternate(inst);
                this._updateDatepicker(inst);
            }
        },

        // change method deprecated
        _changeDatepicker: function(target, name, value) {
            this._optionDatepicker(target, name, value);
        },

        /* Redraw the date picker attached to an input field or division.
         * @param  target  element - the target input field or division or span
         */
        _refreshDatepicker: function(target) {
            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst);
            }
        },

        /* Set the dates for a jQuery selection.
         * @param  target element - the target input field or division or span
         * @param  date Date - the new date
         */
        _setDateDatepicker: function(target, date) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
            }
        },

        /* Get the date(s) for the first entry in a jQuery selection.
         * @param  target element - the target input field or division or span
         * @param  noDefault boolean - true if no default date is to be used
         * @return Date - the current date
         */
        _getDateDatepicker: function(target, noDefault) {
            var inst = this._getInst(target);
            if (inst && !inst.inline) {
                this._setDateFromField(inst, noDefault);
            }
            return (inst ? this._getDate(inst) : null);
        },

        /* Handle keystrokes. */
        _doKeyDown: function(event) {
            var onSelect, dateStr, sel,
                inst = $.datepicker._getInst(event.target),
                handled = true,
                isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

            inst._keyEvent = true;
            if ($.datepicker._datepickerShowing) {
                switch (event.keyCode) {
                    case 9:
                        $.datepicker._hideDatepicker();
                        handled = false;
                        break; // hide on tab out
                    case 13:
                        sel = $("td." + $.datepicker._dayOverClass + ":not(." +
                            $.datepicker._currentClass + ")", inst.dpDiv);
                        if (sel[0]) {
                            $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                        }

                        onSelect = $.datepicker._get(inst, "onSelect");
                        if (onSelect) {
                            dateStr = $.datepicker._formatDate(inst);

                            // trigger custom callback
                            onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
                        } else {
                            $.datepicker._hideDatepicker();
                        }

                        return false; // don't submit the form
                    case 27:
                        $.datepicker._hideDatepicker();
                        break; // hide on escape
                    case 33:
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            -$.datepicker._get(inst, "stepBigMonths") :
                            -$.datepicker._get(inst, "stepMonths")), "M");
                        break; // previous month/year on page up/+ ctrl
                    case 34:
                        $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            +$.datepicker._get(inst, "stepBigMonths") :
                            +$.datepicker._get(inst, "stepMonths")), "M");
                        break; // next month/year on page down/+ ctrl
                    case 35:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._clearDate(event.target);
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // clear on ctrl or command +end
                    case 36:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._gotoToday(event.target);
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // current on ctrl or command +home
                    case 37:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
                        }
                        handled = event.ctrlKey || event.metaKey;
                        // -1 day on ctrl or command +left
                        if (event.originalEvent.altKey) {
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                -$.datepicker._get(inst, "stepBigMonths") :
                                -$.datepicker._get(inst, "stepMonths")), "M");
                        }
                        // next month/year on alt +left on Mac
                        break;
                    case 38:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, -7, "D");
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // -1 week on ctrl or command +up
                    case 39:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
                        }
                        handled = event.ctrlKey || event.metaKey;
                        // +1 day on ctrl or command +right
                        if (event.originalEvent.altKey) {
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                +$.datepicker._get(inst, "stepBigMonths") :
                                +$.datepicker._get(inst, "stepMonths")), "M");
                        }
                        // next month/year on alt +right
                        break;
                    case 40:
                        if (event.ctrlKey || event.metaKey) {
                            $.datepicker._adjustDate(event.target, +7, "D");
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // +1 week on ctrl or command +down
                    default:
                        handled = false;
                }
            } else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
                $.datepicker._showDatepicker(this);
            } else {
                handled = false;
            }

            if (handled) {
                event.preventDefault();
                event.stopPropagation();
            }
        },

        /* Filter entered characters - based on date format. */
        _doKeyPress: function(event) {
            var chars, chr,
                inst = $.datepicker._getInst(event.target);

            if ($.datepicker._get(inst, "constrainInput")) {
                chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
                chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
                return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
            }
        },

        /* Synchronise manual entry and field/alternate field. */
        _doKeyUp: function(event) {
            var date,
                inst = $.datepicker._getInst(event.target);

            if (inst.input.val() !== inst.lastVal) {
                try {
                    date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
                        (inst.input ? inst.input.val() : null),
                        $.datepicker._getFormatConfig(inst));

                    if (date) { // only if valid
                        $.datepicker._setDateFromField(inst);
                        $.datepicker._updateAlternate(inst);
                        $.datepicker._updateDatepicker(inst);
                    }
                } catch (err) {}
            }
            return true;
        },

        /* Pop-up the date picker for a given input field.
         * If false returned from beforeShow event handler do not show.
         * @param  input  element - the input field attached to the date picker or
         *                  event - if triggered by focus
         */
        _showDatepicker: function(input) {
            input = input.target || input;
            if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
                input = $("input", input.parentNode)[0];
            }

            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
                return;
            }

            var inst, beforeShow, beforeShowSettings, isFixed,
                offset, showAnim, duration;

            inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
                $.datepicker._curInst.dpDiv.stop(true, true);
                if (inst && $.datepicker._datepickerShowing) {
                    $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
                }
            }

            beforeShow = $.datepicker._get(inst, "beforeShow");
            beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
            if (beforeShowSettings === false) {
                return;
            }
            datepicker_extendRemove(inst.settings, beforeShowSettings);

            inst.lastVal = null;
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField(inst);

            if ($.datepicker._inDialog) { // hide cursor
                input.value = "";
            }
            if (!$.datepicker._pos) { // position below input
                $.datepicker._pos = $.datepicker._findPos(input);
                $.datepicker._pos[1] += input.offsetHeight; // add the height
            }

            isFixed = false;
            $(input).parents().each(function() {
                isFixed |= $(this).css("position") === "fixed";
                return !isFixed;
            });

            offset = {
                left: $.datepicker._pos[0],
                top: $.datepicker._pos[1]
            };
            $.datepicker._pos = null;
            //to avoid flashes on Firefox
            inst.dpDiv.empty();
            // determine sizing offscreen
            inst.dpDiv.css({
                position: "absolute",
                display: "block",
                top: "-1000px"
            });
            $.datepicker._updateDatepicker(inst);
            // fix width for dynamic number of date pickers
            // and adjust position before showing
            offset = $.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.css({
                position: ($.datepicker._inDialog && $.blockUI ?
                    "static" : (isFixed ? "fixed" : "absolute")),
                display: "none",
                left: offset.left + "px",
                top: offset.top + "px"
            });

            if (!inst.inline) {
                showAnim = $.datepicker._get(inst, "showAnim");
                duration = $.datepicker._get(inst, "duration");
                inst.dpDiv.css("z-index", datepicker_getZindex($(input)) + 1);
                $.datepicker._datepickerShowing = true;

                if ($.effects && $.effects.effect[showAnim]) {
                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
                } else {
                    inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
                }

                if ($.datepicker._shouldFocusInput(inst)) {
                    inst.input.focus();
                }

                $.datepicker._curInst = inst;
            }
        },

        /* Generate the date picker content. */
        _updateDatepicker: function(inst) {
            this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
            datepicker_instActive = inst; // for delegate hover events
            inst.dpDiv.empty().append(this._generateHTML(inst));
            this._attachHandlers(inst);

            var origyearshtml,
                numMonths = this._getNumberOfMonths(inst),
                cols = numMonths[1],
                width = 17,
                activeCell = inst.dpDiv.find("." + this._dayOverClass + " a");

            if (activeCell.length > 0) {
                datepicker_handleMouseover.apply(activeCell.get(0));
            }

            inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
            if (cols > 1) {
                inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
            }
            inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
                "Class"]("ui-datepicker-multi");
            inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
                "Class"]("ui-datepicker-rtl");

            if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {
                inst.input.focus();
            }

            // deffered render of the years select (to avoid flashes on Firefox)
            if (inst.yearshtml) {
                origyearshtml = inst.yearshtml;
                setTimeout(function() {
                    //assure that inst.yearshtml didn't change.
                    if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                        inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
                    }
                    origyearshtml = inst.yearshtml = null;
                }, 0);
            }
        },

        // #6694 - don't focus the input if it's already focused
        // this breaks the change event in IE
        // Support: IE and jQuery <1.9
        _shouldFocusInput: function(inst) {
            return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus");
        },

        /* Check positioning to remain on screen. */
        _checkOffset: function(inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth(),
                dpHeight = inst.dpDiv.outerHeight(),
                inputWidth = inst.input ? inst.input.outerWidth() : 0,
                inputHeight = inst.input ? inst.input.outerHeight() : 0,
                viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
                viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

            offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
            offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
            offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

            // now check if datepicker is showing outside window viewport - move to a better place if so.
            offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
                Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
                Math.abs(dpHeight + inputHeight) : 0);

            return offset;
        },

        /* Find an object's position on the screen. */
        _findPos: function(obj) {
            var position,
                inst = this._getInst(obj),
                isRTL = this._get(inst, "isRTL");

            while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
                obj = obj[isRTL ? "previousSibling" : "nextSibling"];
            }

            position = $(obj).offset();
            return [position.left, position.top];
        },

        /* Hide the date picker from view.
         * @param  input  element - the input field attached to the date picker
         */
        _hideDatepicker: function(input) {
            var showAnim, duration, postProcess, onClose,
                inst = this._curInst;

            if (!inst || (input && inst !== $.data(input, "datepicker"))) {
                return;
            }

            if (this._datepickerShowing) {
                showAnim = this._get(inst, "showAnim");
                duration = this._get(inst, "duration");
                postProcess = function() {
                    $.datepicker._tidyDialog(inst);
                };

                // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
                if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {
                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
                } else {
                    inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
                        (showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
                }

                if (!showAnim) {
                    postProcess();
                }
                this._datepickerShowing = false;

                onClose = this._get(inst, "onClose");
                if (onClose) {
                    onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
                }

                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({
                        position: "absolute",
                        left: "0",
                        top: "-100px"
                    });
                    if ($.blockUI) {
                        $.unblockUI();
                        $("body").append(this.dpDiv);
                    }
                }
                this._inDialog = false;
            }
        },

        /* Tidy up after a dialog display. */
        _tidyDialog: function(inst) {
            inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
        },

        /* Close date picker if clicked elsewhere. */
        _checkExternalClick: function(event) {
            if (!$.datepicker._curInst) {
                return;
            }

            var $target = $(event.target),
                inst = $.datepicker._getInst($target[0]);

            if ((($target[0].id !== $.datepicker._mainDivId &&
                    $target.parents("#" + $.datepicker._mainDivId).length === 0 &&
                    !$target.hasClass($.datepicker.markerClassName) &&
                    !$target.closest("." + $.datepicker._triggerClass).length &&
                    $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI))) ||
                ($target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst)) {
                $.datepicker._hideDatepicker();
            }
        },

        /* Adjust one of the date sub-fields. */
        _adjustDate: function(id, offset, period) {
            var target = $(id),
                inst = this._getInst(target[0]);

            if (this._isDisabledDatepicker(target[0])) {
                return;
            }
            this._adjustInstDate(inst, offset +
                (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
                period);
            this._updateDatepicker(inst);
        },

        /* Action for current link. */
        _gotoToday: function(id) {
            var date,
                target = $(id),
                inst = this._getInst(target[0]);

            if (this._get(inst, "gotoCurrent") && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear;
            } else {
                date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
            }
            this._notifyChange(inst);
            this._adjustDate(target);
        },

        /* Action for selecting a new month/year. */
        _selectMonthYear: function(id, select, period) {
            var target = $(id),
                inst = this._getInst(target[0]);

            inst["selected" + (period === "M" ? "Month" : "Year")] =
                inst["draw" + (period === "M" ? "Month" : "Year")] =
                parseInt(select.options[select.selectedIndex].value, 10);

            this._notifyChange(inst);
            this._adjustDate(target);
        },

        /* Action for selecting a day. */
        _selectDay: function(id, month, year, td) {
            var inst,
                target = $(id);

            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                return;
            }

            inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $("a", td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst,
                inst.currentDay, inst.currentMonth, inst.currentYear));
        },

        /* Erase the input field and hide the date picker. */
        _clearDate: function(id) {
            var target = $(id);
            this._selectDate(target, "");
        },

        /* Update the input field with the selected date. */
        _selectDate: function(id, dateStr) {
            var onSelect,
                target = $(id),
                inst = this._getInst(target[0]);

            dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
            if (inst.input) {
                inst.input.val(dateStr);
            }
            this._updateAlternate(inst);

            onSelect = this._get(inst, "onSelect");
            if (onSelect) {
                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]); // trigger custom callback
            } else if (inst.input) {
                inst.input.trigger("change"); // fire the change event
            }

            if (inst.inline) {
                this._updateDatepicker(inst);
            } else {
                this._hideDatepicker();
                this._lastInput = inst.input[0];
                if (typeof(inst.input[0]) !== "object") {
                    inst.input.focus(); // restore focus
                }
                this._lastInput = null;
            }
        },

        /* Update any alternate field to synchronise with the main field. */
        _updateAlternate: function(inst) {
            var altFormat, date, dateStr,
                altField = this._get(inst, "altField");

            if (altField) { // update alternate field too
                altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
                date = this._getDate(inst);
                dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).each(function() {
                    $(this).val(dateStr);
                });
            }
        },

        /* Set as beforeShowDay function to prevent selection of weekends.
         * @param  date  Date - the date to customise
         * @return [boolean, string] - is this date selectable?, what is its CSS class?
         */
        noWeekends: function(date) {
            var day = date.getDay();
            return [(day > 0 && day < 6), ""];
        },

        /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
         * @param  date  Date - the date to get the week for
         * @return  number - the number of the week within the year that contains this date
         */
        iso8601Week: function(date) {
            var time,
                checkDate = new Date(date.getTime());

            // Find Thursday of this week starting on Monday
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

            time = checkDate.getTime();
            checkDate.setMonth(0); // Compare with Jan 1
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
        },

        /* Parse a string value into a date object.
         * See formatDate below for the possible formats.
         *
         * @param  format string - the expected format of the date
         * @param  value string - the date in the above format
         * @param  settings Object - attributes include:
         *                  shortYearCutoff  number - the cutoff year for determining the century (optional)
         *                  dayNamesShort   string[7] - abbreviated names of the days from Sunday (optional)
         *                  dayNames        string[7] - names of the days from Sunday (optional)
         *                  monthNamesShort string[12] - abbreviated names of the months (optional)
         *                  monthNames      string[12] - names of the months (optional)
         * @return  Date - the extracted date value or null if value is blank
         */
        parseDate: function(format, value, settings) {
            if (format == null || value == null) {
                throw "Invalid arguments";
            }

            value = (typeof value === "object" ? value.toString() : value + "");
            if (value === "") {
                return null;
            }

            var iFormat, dim, extra,
                iValue = 0,
                shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
                shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
                    new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
                dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
                dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
                monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
                monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
                year = -1,
                month = -1,
                day = -1,
                doy = -1,
                literal = false,
                date,
                // Check whether a format character is doubled
                lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                },
                // Extract a number from the string value
                getNumber = function(match) {
                    var isDoubled = lookAhead(match),
                        size = (match === "@" ? 14 : (match === "!" ? 20 :
                            (match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
                        minSize = (match === "y" ? size : 1),
                        digits = new RegExp("^\\d{" + minSize + "," + size + "}"),
                        num = value.substring(iValue).match(digits);
                    if (!num) {
                        throw "Missing number at position " + iValue;
                    }
                    iValue += num[0].length;
                    return parseInt(num[0], 10);
                },
                // Extract a name from the string value and convert to an index
                getName = function(match, shortNames, longNames) {
                    var index = -1,
                        names = $.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
                            return [
                                [k, v]
                            ];
                        }).sort(function(a, b) {
                            return -(a[1].length - b[1].length);
                        });

                    $.each(names, function(i, pair) {
                        var name = pair[1];
                        if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                            index = pair[0];
                            iValue += name.length;
                            return false;
                        }
                    });
                    if (index !== -1) {
                        return index + 1;
                    } else {
                        throw "Unknown name at position " + iValue;
                    }
                },
                // Confirm that a literal character matches the string value
                checkLiteral = function() {
                    if (value.charAt(iValue) !== format.charAt(iFormat)) {
                        throw "Unexpected literal at position " + iValue;
                    }
                    iValue++;
                };

            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false;
                    } else {
                        checkLiteral();
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                        case "d":
                            day = getNumber("d");
                            break;
                        case "D":
                            getName("D", dayNamesShort, dayNames);
                            break;
                        case "o":
                            doy = getNumber("o");
                            break;
                        case "m":
                            month = getNumber("m");
                            break;
                        case "M":
                            month = getName("M", monthNamesShort, monthNames);
                            break;
                        case "y":
                            year = getNumber("y");
                            break;
                        case "@":
                            date = new Date(getNumber("@"));
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "!":
                            date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "'":
                            if (lookAhead("'")) {
                                checkLiteral();
                            } else {
                                literal = true;
                            }
                            break;
                        default:
                            checkLiteral();
                    }
                }
            }

            if (iValue < value.length) {
                extra = value.substr(iValue);
                if (!/^\s+/.test(extra)) {
                    throw "Extra/unparsed characters found in date: " + extra;
                }
            }

            if (year === -1) {
                year = new Date().getFullYear();
            } else if (year < 100) {
                year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                    (year <= shortYearCutoff ? 0 : -100);
            }

            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim) {
                        break;
                    }
                    month++;
                    day -= dim;
                } while (true);
            }

            date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
                throw "Invalid date"; // E.g. 31/02/00
            }
            return date;
        },

        /* Standard date formats. */
        ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y", // RFC 822
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd", // ISO 8601

        _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
            Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

        /* Format a date object into a string value.
         * The format can be combinations of the following:
         * d  - day of month (no leading zero)
         * dd - day of month (two digit)
         * o  - day of year (no leading zeros)
         * oo - day of year (three digit)
         * D  - day name short
         * DD - day name long
         * m  - month of year (no leading zero)
         * mm - month of year (two digit)
         * M  - month name short
         * MM - month name long
         * y  - year (two digit)
         * yy - year (four digit)
         * @ - Unix timestamp (ms since 01/01/1970)
         * ! - Windows ticks (100ns since 01/01/0001)
         * "..." - literal text
         * '' - single quote
         *
         * @param  format string - the desired format of the date
         * @param  date Date - the date value to format
         * @param  settings Object - attributes include:
         *                  dayNamesShort   string[7] - abbreviated names of the days from Sunday (optional)
         *                  dayNames        string[7] - names of the days from Sunday (optional)
         *                  monthNamesShort string[12] - abbreviated names of the months (optional)
         *                  monthNames      string[12] - names of the months (optional)
         * @return  string - the date in the above format
         */
        formatDate: function(format, date, settings) {
            if (!date) {
                return "";
            }

            var iFormat,
                dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
                dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
                monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
                monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
                // Check whether a format character is doubled
                lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                },
                // Format a number, with leading zero if necessary
                formatNumber = function(match, value, len) {
                    var num = "" + value;
                    if (lookAhead(match)) {
                        while (num.length < len) {
                            num = "0" + num;
                        }
                    }
                    return num;
                },
                // Format a name, short or long as requested
                formatName = function(match, value, shortNames, longNames) {
                    return (lookAhead(match) ? longNames[value] : shortNames[value]);
                },
                output = "",
                literal = false;

            if (date) {
                for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                            literal = false;
                        } else {
                            output += format.charAt(iFormat);
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                            case "d":
                                output += formatNumber("d", date.getDate(), 2);
                                break;
                            case "D":
                                output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                                break;
                            case "o":
                                output += formatNumber("o",
                                    Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                                break;
                            case "m":
                                output += formatNumber("m", date.getMonth() + 1, 2);
                                break;
                            case "M":
                                output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                                break;
                            case "y":
                                output += (lookAhead("y") ? date.getFullYear() :
                                    (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
                                break;
                            case "@":
                                output += date.getTime();
                                break;
                            case "!":
                                output += date.getTime() * 10000 + this._ticksTo1970;
                                break;
                            case "'":
                                if (lookAhead("'")) {
                                    output += "'";
                                } else {
                                    literal = true;
                                }
                                break;
                            default:
                                output += format.charAt(iFormat);
                        }
                    }
                }
            }
            return output;
        },

        /* Extract all possible characters from the date format. */
        _possibleChars: function(format) {
            var iFormat,
                chars = "",
                literal = false,
                // Check whether a format character is doubled
                lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                };

            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false;
                    } else {
                        chars += format.charAt(iFormat);
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                        case "d":
                        case "m":
                        case "y":
                        case "@":
                            chars += "0123456789";
                            break;
                        case "D":
                        case "M":
                            return null; // Accept anything
                        case "'":
                            if (lookAhead("'")) {
                                chars += "'";
                            } else {
                                literal = true;
                            }
                            break;
                        default:
                            chars += format.charAt(iFormat);
                    }
                }
            }
            return chars;
        },

        /* Get a setting value, defaulting if necessary. */
        _get: function(inst, name) {
            return inst.settings[name] !== undefined ?
                inst.settings[name] : this._defaults[name];
        },

        /* Parse existing date and initialise date picker. */
        _setDateFromField: function(inst, noDefault) {
            if (inst.input.val() === inst.lastVal) {
                return;
            }

            var dateFormat = this._get(inst, "dateFormat"),
                dates = inst.lastVal = inst.input ? inst.input.val() : null,
                defaultDate = this._getDefaultDate(inst),
                date = defaultDate,
                settings = this._getFormatConfig(inst);

            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate;
            } catch (event) {
                dates = (noDefault ? "" : dates);
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = (dates ? date.getDate() : 0);
            inst.currentMonth = (dates ? date.getMonth() : 0);
            inst.currentYear = (dates ? date.getFullYear() : 0);
            this._adjustInstDate(inst);
        },

        /* Retrieve the default date shown on opening. */
        _getDefaultDate: function(inst) {
            return this._restrictMinMax(inst,
                this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
        },

        /* A date may be specified as an exact value or a relative one. */
        _determineDate: function(inst, date, defaultDate) {
            var offsetNumeric = function(offset) {
                    var date = new Date();
                    date.setDate(date.getDate() + offset);
                    return date;
                },
                offsetString = function(offset) {
                    try {
                        return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
                            offset, $.datepicker._getFormatConfig(inst));
                    } catch (e) {
                        // Ignore
                    }

                    var date = (offset.toLowerCase().match(/^c/) ?
                            $.datepicker._getDate(inst) : null) || new Date(),
                        year = date.getFullYear(),
                        month = date.getMonth(),
                        day = date.getDate(),
                        pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
                        matches = pattern.exec(offset);

                    while (matches) {
                        switch (matches[2] || "d") {
                            case "d":
                            case "D":
                                day += parseInt(matches[1], 10);
                                break;
                            case "w":
                            case "W":
                                day += parseInt(matches[1], 10) * 7;
                                break;
                            case "m":
                            case "M":
                                month += parseInt(matches[1], 10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;
                            case "y":
                            case "Y":
                                year += parseInt(matches[1], 10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;
                        }
                        matches = pattern.exec(offset);
                    }
                    return new Date(year, month, day);
                },
                newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
                    (typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

            newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
            if (newDate) {
                newDate.setHours(0);
                newDate.setMinutes(0);
                newDate.setSeconds(0);
                newDate.setMilliseconds(0);
            }
            return this._daylightSavingAdjust(newDate);
        },

        /* Handle switch to/from daylight saving.
         * Hours may be non-zero on daylight saving cut-over:
         * > 12 when midnight changeover, but then cannot generate
         * midnight datetime, so jump to 1AM, otherwise reset.
         * @param  date  (Date) the date to check
         * @return  (Date) the corrected date
         */
        _daylightSavingAdjust: function(date) {
            if (!date) {
                return null;
            }
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date;
        },

        /* Set the date(s) directly. */
        _setDate: function(inst, date, noChange) {
            var clear = !date,
                origMonth = inst.selectedMonth,
                origYear = inst.selectedYear,
                newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
                this._notifyChange(inst);
            }
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.val(clear ? "" : this._formatDate(inst));
            }
        },

        /* Retrieve the date(s) directly. */
        _getDate: function(inst) {
            var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
                this._daylightSavingAdjust(new Date(
                    inst.currentYear, inst.currentMonth, inst.currentDay)));
            return startDate;
        },

        /* Attach the onxxx handlers.  These are declared statically so
         * they work with static code transformers like Caja.
         */
        _attachHandlers: function(inst) {
            var stepMonths = this._get(inst, "stepMonths"),
                id = "#" + inst.id.replace(/\\\\/g, "\\");
            inst.dpDiv.find("[data-handler]").map(function() {
                var handler = {
                    prev: function() {
                        $.datepicker._adjustDate(id, -stepMonths, "M");
                    },
                    next: function() {
                        $.datepicker._adjustDate(id, +stepMonths, "M");
                    },
                    hide: function() {
                        $.datepicker._hideDatepicker();
                    },
                    today: function() {
                        $.datepicker._gotoToday(id);
                    },
                    selectDay: function() {
                        $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                        return false;
                    },
                    selectMonth: function() {
                        $.datepicker._selectMonthYear(id, this, "M");
                        return false;
                    },
                    selectYear: function() {
                        $.datepicker._selectMonthYear(id, this, "Y");
                        return false;
                    }
                };
                $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
            });
        },

        /* Generate the HTML for the current state of the date picker. */
        _generateHTML: function(inst) {
            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
                controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
                monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
                selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
                cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
                printDate, dRow, tbody, daySettings, otherMonth, unselectable,
                tempDate = new Date(),
                today = this._daylightSavingAdjust(
                    new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
                isRTL = this._get(inst, "isRTL"),
                showButtonPanel = this._get(inst, "showButtonPanel"),
                hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
                navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
                numMonths = this._getNumberOfMonths(inst),
                showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
                stepMonths = this._get(inst, "stepMonths"),
                isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
                currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
                    new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
                minDate = this._getMinMaxDate(inst, "min"),
                maxDate = this._getMinMaxDate(inst, "max"),
                drawMonth = inst.drawMonth - showCurrentAtPos,
                drawYear = inst.drawYear;

            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--;
            }
            if (maxDate) {
                maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
                    maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
                maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--;
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;

            prevText = this._get(inst, "prevText");
            prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
                this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
                this._getFormatConfig(inst)));

            prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
                "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
                " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
                (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

            nextText = this._get(inst, "nextText");
            nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
                this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
                this._getFormatConfig(inst)));

            next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
                "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
                " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
                (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

            currentText = this._get(inst, "currentText");
            gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
            currentText = (!navigationAsDateFormat ? currentText :
                this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

            controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
                this._get(inst, "closeText") + "</button>" : "");

            buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
                (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
                    ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

            firstDay = parseInt(this._get(inst, "firstDay"), 10);
            firstDay = (isNaN(firstDay) ? 0 : firstDay);

            showWeek = this._get(inst, "showWeek");
            dayNames = this._get(inst, "dayNames");
            dayNamesMin = this._get(inst, "dayNamesMin");
            monthNames = this._get(inst, "monthNames");
            monthNamesShort = this._get(inst, "monthNamesShort");
            beforeShowDay = this._get(inst, "beforeShowDay");
            showOtherMonths = this._get(inst, "showOtherMonths");
            selectOtherMonths = this._get(inst, "selectOtherMonths");
            defaultDate = this._getDefaultDate(inst);
            html = "";
            dow;
            for (row = 0; row < numMonths[0]; row++) {
                group = "";
                this.maxRows = 4;
                for (col = 0; col < numMonths[1]; col++) {
                    selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    cornerClass = " ui-corner-all";
                    calender = "";
                    if (isMultiMonth) {
                        calender += "<div class='ui-datepicker-group";
                        if (numMonths[1] > 1) {
                            switch (col) {
                                case 0:
                                    calender += " ui-datepicker-group-first";
                                    cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
                                    break;
                                case numMonths[1] - 1:
                                    calender += " ui-datepicker-group-last";
                                    cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
                                    break;
                                default:
                                    calender += " ui-datepicker-group-middle";
                                    cornerClass = "";
                                    break;
                            }
                        }
                        calender += "'>";
                    }
                    calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
                        (/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
                        (/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
                        this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
                            row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
                        "</div><table class='ui-datepicker-calendar'><thead>" +
                        "<tr>";
                    thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
                    for (dow = 0; dow < 7; dow++) { // days of the week
                        day = (dow + firstDay) % 7;
                        thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
                            "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
                    }
                    calender += thead + "</tr></thead><tbody>";
                    daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                    }
                    leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
                    numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
                    this.maxRows = numRows;
                    printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
                        calender += "<tr>";
                        tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
                            this._get(inst, "calculateWeek")(printDate) + "</td>");
                        for (dow = 0; dow < 7; dow++) { // create date picker days
                            daySettings = (beforeShowDay ?
                                beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
                            otherMonth = (printDate.getMonth() !== drawMonth);
                            unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
                                (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                            tbody += "<td class='" +
                                ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
                                (otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
                                ((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
                                    (defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
                                    // or defaultDate is current printedDate and defaultDate is selectedDate
                                    " " + this._dayOverClass : "") + // highlight selected day
                                (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + // highlight unselectable days
                                (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
                                    (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
                                    (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
                                ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
                                (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
                                (otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
                                    (unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
                                        (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
                                        (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
                                        (otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
                                        "' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate);
                        }
                        calender += tbody + "</tr>";
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++;
                    }
                    calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
                        ((numMonths[0] > 0 && col === numMonths[1] - 1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                    group += calender;
                }
                html += group;
            }
            html += buttonPanel;
            inst._keyEvent = false;
            return html;
        },

        /* Generate the month and year header. */
        _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
            secondary, monthNames, monthNamesShort) {

            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
                changeMonth = this._get(inst, "changeMonth"),
                changeYear = this._get(inst, "changeYear"),
                showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
                html = "<div class='ui-datepicker-title'>",
                monthHtml = "";

            // month selection
            if (secondary || !changeMonth) {
                monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
            } else {
                inMinYear = (minDate && minDate.getFullYear() === drawYear);
                inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
                monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
                for (month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                        monthHtml += "<option value='" + month + "'" +
                            (month === drawMonth ? " selected='selected'" : "") +
                            ">" + monthNamesShort[month] + "</option>";
                    }
                }
                monthHtml += "</select>";
            }

            if (!showMonthAfterYear) {
                html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
            }

            // year selection
            if (!inst.yearshtml) {
                inst.yearshtml = "";
                if (secondary || !changeYear) {
                    html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
                } else {
                    // determine range of years to display
                    years = this._get(inst, "yearRange").split(":");
                    thisYear = new Date().getFullYear();
                    determineYear = function(value) {
                        var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
                            (value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
                                parseInt(value, 10)));
                        return (isNaN(year) ? thisYear : year);
                    };
                    year = determineYear(years[0]);
                    endYear = Math.max(year, determineYear(years[1] || ""));
                    year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                    endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                    inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
                    for (; year <= endYear; year++) {
                        inst.yearshtml += "<option value='" + year + "'" +
                            (year === drawYear ? " selected='selected'" : "") +
                            ">" + year + "</option>";
                    }
                    inst.yearshtml += "</select>";

                    html += inst.yearshtml;
                    inst.yearshtml = null;
                }
            }

            html += this._get(inst, "yearSuffix");
            if (showMonthAfterYear) {
                html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
            }
            html += "</div>"; // Close datepicker_header
            return html;
        },

        /* Adjust one of the date sub-fields. */
        _adjustInstDate: function(inst, offset, period) {
            var year = inst.drawYear + (period === "Y" ? offset : 0),
                month = inst.drawMonth + (period === "M" ? offset : 0),
                day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
                date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period === "M" || period === "Y") {
                this._notifyChange(inst);
            }
        },

        /* Ensure a date is within any min/max bounds. */
        _restrictMinMax: function(inst, date) {
            var minDate = this._getMinMaxDate(inst, "min"),
                maxDate = this._getMinMaxDate(inst, "max"),
                newDate = (minDate && date < minDate ? minDate : date);
            return (maxDate && newDate > maxDate ? maxDate : newDate);
        },

        /* Notify change of month/year. */
        _notifyChange: function(inst) {
            var onChange = this._get(inst, "onChangeMonthYear");
            if (onChange) {
                onChange.apply((inst.input ? inst.input[0] : null), [inst.selectedYear, inst.selectedMonth + 1, inst]);
            }
        },

        /* Determine the number of months to show. */
        _getNumberOfMonths: function(inst) {
            var numMonths = this._get(inst, "numberOfMonths");
            return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
        },

        /* Determine the current maximum date - ensure no time components are set. */
        _getMinMaxDate: function(inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
        },

        /* Find the number of days in a given month. */
        _getDaysInMonth: function(year, month) {
            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
        },

        /* Find the day of the week of the first of a month. */
        _getFirstDayOfMonth: function(year, month) {
            return new Date(year, month, 1).getDay();
        },

        /* Determines if we should allow a "next/prev" month display change. */
        _canAdjustMonth: function(inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst),
                date = this._daylightSavingAdjust(new Date(curYear,
                    curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

            if (offset < 0) {
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
            }
            return this._isInRange(inst, date);
        },

        /* Is the given date in the accepted range? */
        _isInRange: function(inst, date) {
            var yearSplit, currentYear,
                minDate = this._getMinMaxDate(inst, "min"),
                maxDate = this._getMinMaxDate(inst, "max"),
                minYear = null,
                maxYear = null,
                years = this._get(inst, "yearRange");
            if (years) {
                yearSplit = years.split(":");
                currentYear = new Date().getFullYear();
                minYear = parseInt(yearSplit[0], 10);
                maxYear = parseInt(yearSplit[1], 10);
                if (yearSplit[0].match(/[+\-].*/)) {
                    minYear += currentYear;
                }
                if (yearSplit[1].match(/[+\-].*/)) {
                    maxYear += currentYear;
                }
            }

            return ((!minDate || date.getTime() >= minDate.getTime()) &&
                (!maxDate || date.getTime() <= maxDate.getTime()) &&
                (!minYear || date.getFullYear() >= minYear) &&
                (!maxYear || date.getFullYear() <= maxYear));
        },

        /* Provide the configuration settings for formatting/parsing. */
        _getFormatConfig: function(inst) {
            var shortYearCutoff = this._get(inst, "shortYearCutoff");
            shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
                new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
            return {
                shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, "dayNamesShort"),
                dayNames: this._get(inst, "dayNames"),
                monthNamesShort: this._get(inst, "monthNamesShort"),
                monthNames: this._get(inst, "monthNames")
            };
        },

        /* Format the given date for display. */
        _formatDate: function(inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear;
            }
            var date = (day ? (typeof day === "object" ? day :
                    this._daylightSavingAdjust(new Date(year, month, day))) :
                this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
        }
    });

    /*
     * Bind hover events for datepicker elements.
     * Done via delegate so the binding only occurs once in the lifetime of the parent div.
     * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
     */
    function datepicker_bindHover(dpDiv) {
        var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return dpDiv.delegate(selector, "mouseout", function() {
                $(this).removeClass("ui-state-hover");
                if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                    $(this).removeClass("ui-datepicker-prev-hover");
                }
                if (this.className.indexOf("ui-datepicker-next") !== -1) {
                    $(this).removeClass("ui-datepicker-next-hover");
                }
            })
            .delegate(selector, "mouseover", datepicker_handleMouseover);
    }

    function datepicker_handleMouseover() {
        if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
            $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
            $(this).addClass("ui-state-hover");
            if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                $(this).addClass("ui-datepicker-prev-hover");
            }
            if (this.className.indexOf("ui-datepicker-next") !== -1) {
                $(this).addClass("ui-datepicker-next-hover");
            }
        }
    }

    /* jQuery extend now ignores nulls! */
    function datepicker_extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props) {
            if (props[name] == null) {
                target[name] = props[name];
            }
        }
        return target;
    }

    /* Invoke the datepicker functionality.
       @param  options  string - a command, optionally followed by additional parameters or
                        Object - settings for attaching new datepicker functionality
       @return  jQuery object */
    $.fn.datepicker = function(options) {

        /* Verify an empty collection wasn't passed - Fixes #6976 */
        if (!this.length) {
            return this;
        }

        /* Initialise the date picker. */
        if (!$.datepicker.initialized) {
            $(document).mousedown($.datepicker._checkExternalClick);
            $.datepicker.initialized = true;
        }

        /* Append datepicker main container to body if not exist. */
        if ($("#" + $.datepicker._mainDivId).length === 0) {
            $("body").append($.datepicker.dpDiv);
        }

        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
            return $.datepicker["_" + options + "Datepicker"].
            apply($.datepicker, [this[0]].concat(otherArgs));
        }
        if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
            return $.datepicker["_" + options + "Datepicker"].
            apply($.datepicker, [this[0]].concat(otherArgs));
        }
        return this.each(function() {
            typeof options === "string" ?
                $.datepicker["_" + options + "Datepicker"].
            apply($.datepicker, [this].concat(otherArgs)):
                $.datepicker._attachDatepicker(this, options);
        });
    };

    $.datepicker = new Datepicker(); // singleton instance
    $.datepicker.initialized = false;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = "1.11.4";

    var datepicker = $.datepicker;



}));
/*!
 * jQuery Cycle2; version: 2.1.6 build: 20141007
 * http://jquery.malsup.com/cycle2/
 * Copyright (c) 2014 M. Alsup; Dual licensed: MIT/GPL
 */

/* Cycle2 core engine */
;
(function($) {
    "use strict";

    var version = '2.1.6';

    $.fn.cycle = function(options) {
        // fix mistakes with the ready state
        var o;
        if (this.length === 0 && !$.isReady) {
            o = {
                s: this.selector,
                c: this.context
            };
            $.fn.cycle.log('requeuing slideshow (dom not ready)');
            $(function() {
                $(o.s, o.c).cycle(options);
            });
            return this;
        }

        return this.each(function() {
            var data, opts, shortName, val;
            var container = $(this);
            var log = $.fn.cycle.log;

            if (container.data('cycle.opts'))
                return; // already initialized

            if (container.data('cycle-log') === false ||
                (options && options.log === false) ||
                (opts && opts.log === false)) {
                log = $.noop;
            }

            log('--c2 init--');
            data = container.data();
            for (var p in data) {
                // allow props to be accessed sans 'cycle' prefix and log the overrides
                if (data.hasOwnProperty(p) && /^cycle[A-Z]+/.test(p)) {
                    val = data[p];
                    shortName = p.match(/^cycle(.*)/)[1].replace(/^[A-Z]/, lowerCase);
                    log(shortName + ':', val, '(' + typeof val + ')');
                    data[shortName] = val;
                }
            }

            opts = $.extend({}, $.fn.cycle.defaults, data, options || {});

            opts.timeoutId = 0;
            opts.paused = opts.paused || false; // #57
            opts.container = container;
            opts._maxZ = opts.maxZ;

            opts.API = $.extend({
                _container: container
            }, $.fn.cycle.API);
            opts.API.log = log;
            opts.API.trigger = function(eventName, args) {
                opts.container.trigger(eventName, args);
                return opts.API;
            };

            container.data('cycle.opts', opts);
            container.data('cycle.API', opts.API);

            // opportunity for plugins to modify opts and API
            opts.API.trigger('cycle-bootstrap', [opts, opts.API]);

            opts.API.addInitialSlides();
            opts.API.preInitSlideshow();

            if (opts.slides.length)
                opts.API.initSlideshow();
        });
    };

    $.fn.cycle.API = {
        opts: function() {
            return this._container.data('cycle.opts');
        },
        addInitialSlides: function() {
            var opts = this.opts();
            var slides = opts.slides;
            opts.slideCount = 0;
            opts.slides = $(); // empty set

            // add slides that already exist
            slides = slides.jquery ? slides : opts.container.find(slides);

            if (opts.random) {
                slides.sort(function() {
                    return Math.random() - 0.5;
                });
            }

            opts.API.add(slides);
        },

        preInitSlideshow: function() {
            var opts = this.opts();
            opts.API.trigger('cycle-pre-initialize', [opts]);
            var tx = $.fn.cycle.transitions[opts.fx];
            if (tx && $.isFunction(tx.preInit))
                tx.preInit(opts);
            opts._preInitialized = true;
        },

        postInitSlideshow: function() {
            var opts = this.opts();
            opts.API.trigger('cycle-post-initialize', [opts]);
            var tx = $.fn.cycle.transitions[opts.fx];
            if (tx && $.isFunction(tx.postInit))
                tx.postInit(opts);
        },

        initSlideshow: function() {
            var opts = this.opts();
            var pauseObj = opts.container;
            var slideOpts;
            opts.API.calcFirstSlide();

            if (opts.container.css('position') == 'static')
                opts.container.css('position', 'relative');

            $(opts.slides[opts.currSlide]).css({
                opacity: 1,
                display: 'block',
                visibility: 'visible'
            });
            opts.API.stackSlides(opts.slides[opts.currSlide], opts.slides[opts.nextSlide], !opts.reverse);

            if (opts.pauseOnHover) {
                // allow pauseOnHover to specify an element
                if (opts.pauseOnHover !== true)
                    pauseObj = $(opts.pauseOnHover);

                pauseObj.hover(
                    function() {
                        opts.API.pause(true);
                    },
                    function() {
                        opts.API.resume(true);
                    }
                );
            }

            // stage initial transition
            if (opts.timeout) {
                slideOpts = opts.API.getSlideOpts(opts.currSlide);
                opts.API.queueTransition(slideOpts, slideOpts.timeout + opts.delay);
            }

            opts._initialized = true;
            opts.API.updateView(true);
            opts.API.trigger('cycle-initialized', [opts]);
            opts.API.postInitSlideshow();
        },

        pause: function(hover) {
            var opts = this.opts(),
                slideOpts = opts.API.getSlideOpts(),
                alreadyPaused = opts.hoverPaused || opts.paused;

            if (hover)
                opts.hoverPaused = true;
            else
                opts.paused = true;

            if (!alreadyPaused) {
                opts.container.addClass('cycle-paused');
                opts.API.trigger('cycle-paused', [opts]).log('cycle-paused');

                if (slideOpts.timeout) {
                    clearTimeout(opts.timeoutId);
                    opts.timeoutId = 0;

                    // determine how much time is left for the current slide
                    opts._remainingTimeout -= ($.now() - opts._lastQueue);
                    if (opts._remainingTimeout < 0 || isNaN(opts._remainingTimeout))
                        opts._remainingTimeout = undefined;
                }
            }
        },

        resume: function(hover) {
            var opts = this.opts(),
                alreadyResumed = !opts.hoverPaused && !opts.paused,
                remaining;

            if (hover)
                opts.hoverPaused = false;
            else
                opts.paused = false;


            if (!alreadyResumed) {
                opts.container.removeClass('cycle-paused');
                // #gh-230; if an animation is in progress then don't queue a new transition; it will
                // happen naturally
                if (opts.slides.filter(':animated').length === 0)
                    opts.API.queueTransition(opts.API.getSlideOpts(), opts._remainingTimeout);
                opts.API.trigger('cycle-resumed', [opts, opts._remainingTimeout]).log('cycle-resumed');
            }
        },

        add: function(slides, prepend) {
            var opts = this.opts();
            var oldSlideCount = opts.slideCount;
            var startSlideshow = false;
            var len;

            if ($.type(slides) == 'string')
                slides = $.trim(slides);

            $(slides).each(function(i) {
                var slideOpts;
                var slide = $(this);

                if (prepend)
                    opts.container.prepend(slide);
                else
                    opts.container.append(slide);

                opts.slideCount++;
                slideOpts = opts.API.buildSlideOpts(slide);

                if (prepend)
                    opts.slides = $(slide).add(opts.slides);
                else
                    opts.slides = opts.slides.add(slide);

                opts.API.initSlide(slideOpts, slide, --opts._maxZ);

                slide.data('cycle.opts', slideOpts);
                opts.API.trigger('cycle-slide-added', [opts, slideOpts, slide]);
            });

            opts.API.updateView(true);

            startSlideshow = opts._preInitialized && (oldSlideCount < 2 && opts.slideCount >= 1);
            if (startSlideshow) {
                if (!opts._initialized)
                    opts.API.initSlideshow();
                else if (opts.timeout) {
                    len = opts.slides.length;
                    opts.nextSlide = opts.reverse ? len - 1 : 1;
                    if (!opts.timeoutId) {
                        opts.API.queueTransition(opts);
                    }
                }
            }
        },

        calcFirstSlide: function() {
            var opts = this.opts();
            var firstSlideIndex;
            firstSlideIndex = parseInt(opts.startingSlide || 0, 10);
            if (firstSlideIndex >= opts.slides.length || firstSlideIndex < 0)
                firstSlideIndex = 0;

            opts.currSlide = firstSlideIndex;
            if (opts.reverse) {
                opts.nextSlide = firstSlideIndex - 1;
                if (opts.nextSlide < 0)
                    opts.nextSlide = opts.slides.length - 1;
            } else {
                opts.nextSlide = firstSlideIndex + 1;
                if (opts.nextSlide == opts.slides.length)
                    opts.nextSlide = 0;
            }
        },

        calcNextSlide: function() {
            var opts = this.opts();
            var roll;
            if (opts.reverse) {
                roll = (opts.nextSlide - 1) < 0;
                opts.nextSlide = roll ? opts.slideCount - 1 : opts.nextSlide - 1;
                opts.currSlide = roll ? 0 : opts.nextSlide + 1;
            } else {
                roll = (opts.nextSlide + 1) == opts.slides.length;
                opts.nextSlide = roll ? 0 : opts.nextSlide + 1;
                opts.currSlide = roll ? opts.slides.length - 1 : opts.nextSlide - 1;
            }
        },

        calcTx: function(slideOpts, manual) {
            var opts = slideOpts;
            var tx;

            if (opts._tempFx)
                tx = $.fn.cycle.transitions[opts._tempFx];
            else if (manual && opts.manualFx)
                tx = $.fn.cycle.transitions[opts.manualFx];

            if (!tx)
                tx = $.fn.cycle.transitions[opts.fx];

            opts._tempFx = null;
            this.opts()._tempFx = null;

            if (!tx) {
                tx = $.fn.cycle.transitions.fade;
                opts.API.log('Transition "' + opts.fx + '" not found.  Using fade.');
            }
            return tx;
        },

        prepareTx: function(manual, fwd) {
            var opts = this.opts();
            var after, curr, next, slideOpts, tx;

            if (opts.slideCount < 2) {
                opts.timeoutId = 0;
                return;
            }
            if (manual && (!opts.busy || opts.manualTrump)) {
                opts.API.stopTransition();
                opts.busy = false;
                clearTimeout(opts.timeoutId);
                opts.timeoutId = 0;
            }
            if (opts.busy)
                return;
            if (opts.timeoutId === 0 && !manual)
                return;

            curr = opts.slides[opts.currSlide];
            next = opts.slides[opts.nextSlide];
            slideOpts = opts.API.getSlideOpts(opts.nextSlide);
            tx = opts.API.calcTx(slideOpts, manual);

            opts._tx = tx;

            if (manual && slideOpts.manualSpeed !== undefined)
                slideOpts.speed = slideOpts.manualSpeed;

            // if ( opts.nextSlide === opts.currSlide )
            //     opts.API.calcNextSlide();

            // ensure that:
            //      1. advancing to a different slide
            //      2. this is either a manual event (prev/next, pager, cmd) or 
            //              a timer event and slideshow is not paused
            if (opts.nextSlide != opts.currSlide &&
                (manual || (!opts.paused && !opts.hoverPaused && opts.timeout))) { // #62

                opts.API.trigger('cycle-before', [slideOpts, curr, next, fwd]);
                if (tx.before)
                    tx.before(slideOpts, curr, next, fwd);

                after = function() {
                    opts.busy = false;
                    // #76; bail if slideshow has been destroyed
                    if (!opts.container.data('cycle.opts'))
                        return;

                    if (tx.after)
                        tx.after(slideOpts, curr, next, fwd);
                    opts.API.trigger('cycle-after', [slideOpts, curr, next, fwd]);
                    opts.API.queueTransition(slideOpts);
                    opts.API.updateView(true);
                };

                opts.busy = true;
                if (tx.transition)
                    tx.transition(slideOpts, curr, next, fwd, after);
                else
                    opts.API.doTransition(slideOpts, curr, next, fwd, after);

                opts.API.calcNextSlide();
                opts.API.updateView();
            } else {
                opts.API.queueTransition(slideOpts);
            }
        },

        // perform the actual animation
        doTransition: function(slideOpts, currEl, nextEl, fwd, callback) {
            var opts = slideOpts;
            var curr = $(currEl),
                next = $(nextEl);
            var fn = function() {
                // make sure animIn has something so that callback doesn't trigger immediately
                next.animate(opts.animIn || {
                    opacity: 1
                }, opts.speed, opts.easeIn || opts.easing, callback);
            };

            next.css(opts.cssBefore || {});
            curr.animate(opts.animOut || {}, opts.speed, opts.easeOut || opts.easing, function() {
                curr.css(opts.cssAfter || {});
                if (!opts.sync) {
                    fn();
                }
            });
            if (opts.sync) {
                fn();
            }
        },

        queueTransition: function(slideOpts, specificTimeout) {
            var opts = this.opts();
            var timeout = specificTimeout !== undefined ? specificTimeout : slideOpts.timeout;
            if (opts.nextSlide === 0 && --opts.loop === 0) {
                opts.API.log('terminating; loop=0');
                opts.timeout = 0;
                if (timeout) {
                    setTimeout(function() {
                        opts.API.trigger('cycle-finished', [opts]);
                    }, timeout);
                } else {
                    opts.API.trigger('cycle-finished', [opts]);
                }
                // reset nextSlide
                opts.nextSlide = opts.currSlide;
                return;
            }
            if (opts.continueAuto !== undefined) {
                if (opts.continueAuto === false ||
                    ($.isFunction(opts.continueAuto) && opts.continueAuto() === false)) {
                    opts.API.log('terminating automatic transitions');
                    opts.timeout = 0;
                    if (opts.timeoutId)
                        clearTimeout(opts.timeoutId);
                    return;
                }
            }
            if (timeout) {
                opts._lastQueue = $.now();
                if (specificTimeout === undefined)
                    opts._remainingTimeout = slideOpts.timeout;

                if (!opts.paused && !opts.hoverPaused) {
                    opts.timeoutId = setTimeout(function() {
                        opts.API.prepareTx(false, !opts.reverse);
                    }, timeout);
                }
            }
        },

        stopTransition: function() {
            var opts = this.opts();
            if (opts.slides.filter(':animated').length) {
                opts.slides.stop(false, true);
                opts.API.trigger('cycle-transition-stopped', [opts]);
            }

            if (opts._tx && opts._tx.stopTransition)
                opts._tx.stopTransition(opts);
        },

        // advance slide forward or back
        advanceSlide: function(val) {
            var opts = this.opts();
            clearTimeout(opts.timeoutId);
            opts.timeoutId = 0;
            opts.nextSlide = opts.currSlide + val;

            if (opts.nextSlide < 0)
                opts.nextSlide = opts.slides.length - 1;
            else if (opts.nextSlide >= opts.slides.length)
                opts.nextSlide = 0;

            opts.API.prepareTx(true, val >= 0);
            return false;
        },

        buildSlideOpts: function(slide) {
            var opts = this.opts();
            var val, shortName;
            var slideOpts = slide.data() || {};
            for (var p in slideOpts) {
                // allow props to be accessed sans 'cycle' prefix and log the overrides
                if (slideOpts.hasOwnProperty(p) && /^cycle[A-Z]+/.test(p)) {
                    val = slideOpts[p];
                    shortName = p.match(/^cycle(.*)/)[1].replace(/^[A-Z]/, lowerCase);
                    opts.API.log('[' + (opts.slideCount - 1) + ']', shortName + ':', val, '(' + typeof val + ')');
                    slideOpts[shortName] = val;
                }
            }

            slideOpts = $.extend({}, $.fn.cycle.defaults, opts, slideOpts);
            slideOpts.slideNum = opts.slideCount;

            try {
                // these props should always be read from the master state object
                delete slideOpts.API;
                delete slideOpts.slideCount;
                delete slideOpts.currSlide;
                delete slideOpts.nextSlide;
                delete slideOpts.slides;
            } catch (e) {
                // no op
            }
            return slideOpts;
        },

        getSlideOpts: function(index) {
            var opts = this.opts();
            if (index === undefined)
                index = opts.currSlide;

            var slide = opts.slides[index];
            var slideOpts = $(slide).data('cycle.opts');
            return $.extend({}, opts, slideOpts);
        },

        initSlide: function(slideOpts, slide, suggestedZindex) {
            var opts = this.opts();
            slide.css(slideOpts.slideCss || {});
            if (suggestedZindex > 0)
                slide.css('zIndex', suggestedZindex);

            // ensure that speed settings are sane
            if (isNaN(slideOpts.speed))
                slideOpts.speed = $.fx.speeds[slideOpts.speed] || $.fx.speeds._default;
            if (!slideOpts.sync)
                slideOpts.speed = slideOpts.speed / 2;

            slide.addClass(opts.slideClass);
        },

        updateView: function(isAfter, isDuring, forceEvent) {
            var opts = this.opts();
            if (!opts._initialized)
                return;
            var slideOpts = opts.API.getSlideOpts();
            var currSlide = opts.slides[opts.currSlide];

            if (!isAfter && isDuring !== true) {
                opts.API.trigger('cycle-update-view-before', [opts, slideOpts, currSlide]);
                if (opts.updateView < 0)
                    return;
            }

            if (opts.slideActiveClass) {
                opts.slides.removeClass(opts.slideActiveClass)
                    .eq(opts.currSlide).addClass(opts.slideActiveClass);
            }

            if (isAfter && opts.hideNonActive)
                opts.slides.filter(':not(.' + opts.slideActiveClass + ')').css('visibility', 'hidden');

            if (opts.updateView === 0) {
                setTimeout(function() {
                    opts.API.trigger('cycle-update-view', [opts, slideOpts, currSlide, isAfter]);
                }, slideOpts.speed / (opts.sync ? 2 : 1));
            }

            if (opts.updateView !== 0)
                opts.API.trigger('cycle-update-view', [opts, slideOpts, currSlide, isAfter]);

            if (isAfter)
                opts.API.trigger('cycle-update-view-after', [opts, slideOpts, currSlide]);
        },

        getComponent: function(name) {
            var opts = this.opts();
            var selector = opts[name];
            if (typeof selector === 'string') {
                // if selector is a child, sibling combinator, adjancent selector then use find, otherwise query full dom
                return (/^\s*[\>|\+|~]/).test(selector) ? opts.container.find(selector) : $(selector);
            }
            if (selector.jquery)
                return selector;

            return $(selector);
        },

        stackSlides: function(curr, next, fwd) {
            var opts = this.opts();
            if (!curr) {
                curr = opts.slides[opts.currSlide];
                next = opts.slides[opts.nextSlide];
                fwd = !opts.reverse;
            }

            // reset the zIndex for the common case:
            // curr slide on top,  next slide beneath, and the rest in order to be shown
            $(curr).css('zIndex', opts.maxZ);

            var i;
            var z = opts.maxZ - 2;
            var len = opts.slideCount;
            if (fwd) {
                for (i = opts.currSlide + 1; i < len; i++)
                    $(opts.slides[i]).css('zIndex', z--);
                for (i = 0; i < opts.currSlide; i++)
                    $(opts.slides[i]).css('zIndex', z--);
            } else {
                for (i = opts.currSlide - 1; i >= 0; i--)
                    $(opts.slides[i]).css('zIndex', z--);
                for (i = len - 1; i > opts.currSlide; i--)
                    $(opts.slides[i]).css('zIndex', z--);
            }

            $(next).css('zIndex', opts.maxZ - 1);
        },

        getSlideIndex: function(el) {
            return this.opts().slides.index(el);
        }

    }; // API

    // default logger
    $.fn.cycle.log = function log() {
        /*global console:true */
        if (window.console && console.log)
            console.log('[cycle2] ' + Array.prototype.join.call(arguments, ' '));
    };

    $.fn.cycle.version = function() {
        return 'Cycle2: ' + version;
    };

    // helper functions

    function lowerCase(s) {
        return (s || '').toLowerCase();
    }

    // expose transition object
    $.fn.cycle.transitions = {
        custom: {},
        none: {
            before: function(opts, curr, next, fwd) {
                opts.API.stackSlides(next, curr, fwd);
                opts.cssBefore = {
                    opacity: 1,
                    visibility: 'visible',
                    display: 'block'
                };
            }
        },
        fade: {
            before: function(opts, curr, next, fwd) {
                var css = opts.API.getSlideOpts(opts.nextSlide).slideCss || {};
                opts.API.stackSlides(curr, next, fwd);
                opts.cssBefore = $.extend(css, {
                    opacity: 0,
                    visibility: 'visible',
                    display: 'block'
                });
                opts.animIn = {
                    opacity: 1
                };
                opts.animOut = {
                    opacity: 0
                };
            }
        },
        fadeout: {
            before: function(opts, curr, next, fwd) {
                var css = opts.API.getSlideOpts(opts.nextSlide).slideCss || {};
                opts.API.stackSlides(curr, next, fwd);
                opts.cssBefore = $.extend(css, {
                    opacity: 1,
                    visibility: 'visible',
                    display: 'block'
                });
                opts.animOut = {
                    opacity: 0
                };
            }
        },
        scrollHorz: {
            before: function(opts, curr, next, fwd) {
                opts.API.stackSlides(curr, next, fwd);
                var w = opts.container.css('overflow', 'hidden').width();
                opts.cssBefore = {
                    left: fwd ? w : -w,
                    top: 0,
                    opacity: 1,
                    visibility: 'visible',
                    display: 'block'
                };
                opts.cssAfter = {
                    zIndex: opts._maxZ - 2,
                    left: 0
                };
                opts.animIn = {
                    left: 0
                };
                opts.animOut = {
                    left: fwd ? -w : w
                };
            }
        }
    };

    // @see: http://jquery.malsup.com/cycle2/api
    $.fn.cycle.defaults = {
        allowWrap: true,
        autoSelector: '.cycle-slideshow[data-cycle-auto-init!=false]',
        delay: 0,
        easing: null,
        fx: 'fade',
        hideNonActive: true,
        loop: 0,
        manualFx: undefined,
        manualSpeed: undefined,
        manualTrump: true,
        maxZ: 100,
        pauseOnHover: false,
        reverse: false,
        slideActiveClass: 'cycle-slide-active',
        slideClass: 'cycle-slide',
        slideCss: {
            position: 'absolute',
            top: 0,
            left: 0
        },
        slides: '> img',
        speed: 500,
        startingSlide: 0,
        sync: true,
        timeout: 4000,
        updateView: 0
    };

    // automatically find and run slideshows
    $(document).ready(function() {
        $($.fn.cycle.defaults.autoSelector).cycle();
    });

})(jQuery);

/*! Cycle2 autoheight plugin; Copyright (c) M.Alsup, 2012; version: 20130913 */
(function($) {
    "use strict";

    $.extend($.fn.cycle.defaults, {
        autoHeight: 0, // setting this option to false disables autoHeight logic
        autoHeightSpeed: 250,
        autoHeightEasing: null
    });

    $(document).on('cycle-initialized', function(e, opts) {
        var autoHeight = opts.autoHeight;
        var t = $.type(autoHeight);
        var resizeThrottle = null;
        var ratio;

        if (t !== 'string' && t !== 'number')
            return;

        // bind events
        opts.container.on('cycle-slide-added cycle-slide-removed', initAutoHeight);
        opts.container.on('cycle-destroyed', onDestroy);

        if (autoHeight == 'container') {
            opts.container.on('cycle-before', onBefore);
        } else if (t === 'string' && /\d+\:\d+/.test(autoHeight)) {
            // use ratio
            ratio = autoHeight.match(/(\d+)\:(\d+)/);
            ratio = ratio[1] / ratio[2];
            opts._autoHeightRatio = ratio;
        }

        // if autoHeight is a number then we don't need to recalculate the sentinel
        // index on resize
        if (t !== 'number') {
            // bind unique resize handler per slideshow (so it can be 'off-ed' in onDestroy)
            opts._autoHeightOnResize = function() {
                clearTimeout(resizeThrottle);
                resizeThrottle = setTimeout(onResize, 50);
            };

            $(window).on('resize orientationchange', opts._autoHeightOnResize);
        }

        setTimeout(onResize, 30);

        function onResize() {
            initAutoHeight(e, opts);
        }
    });

    function initAutoHeight(e, opts) {
        var clone, height, sentinelIndex;
        var autoHeight = opts.autoHeight;

        if (autoHeight == 'container') {
            height = $(opts.slides[opts.currSlide]).outerHeight();
            opts.container.height(height);
        } else if (opts._autoHeightRatio) {
            opts.container.height(opts.container.width() / opts._autoHeightRatio);
        } else if (autoHeight === 'calc' || ($.type(autoHeight) == 'number' && autoHeight >= 0)) {
            if (autoHeight === 'calc')
                sentinelIndex = calcSentinelIndex(e, opts);
            else if (autoHeight >= opts.slides.length)
                sentinelIndex = 0;
            else
                sentinelIndex = autoHeight;

            // only recreate sentinel if index is different
            if (sentinelIndex == opts._sentinelIndex)
                return;

            opts._sentinelIndex = sentinelIndex;
            if (opts._sentinel)
                opts._sentinel.remove();

            // clone existing slide as sentinel
            clone = $(opts.slides[sentinelIndex].cloneNode(true));

            // #50; remove special attributes from cloned content
            clone.removeAttr('id name rel').find('[id],[name],[rel]').removeAttr('id name rel');

            clone.css({
                position: 'static',
                visibility: 'hidden',
                display: 'block'
            }).prependTo(opts.container).addClass('cycle-sentinel cycle-slide').removeClass('cycle-slide-active');
            clone.find('*').css('visibility', 'hidden');

            opts._sentinel = clone;
        }
    }

    function calcSentinelIndex(e, opts) {
        var index = 0,
            max = -1;

        // calculate tallest slide index
        opts.slides.each(function(i) {
            var h = $(this).height();
            if (h > max) {
                max = h;
                index = i;
            }
        });
        return index;
    }

    function onBefore(e, opts, outgoing, incoming, forward) {
        var h = $(incoming).outerHeight();
        opts.container.animate({
            height: h
        }, opts.autoHeightSpeed, opts.autoHeightEasing);
    }

    function onDestroy(e, opts) {
        if (opts._autoHeightOnResize) {
            $(window).off('resize orientationchange', opts._autoHeightOnResize);
            opts._autoHeightOnResize = null;
        }
        opts.container.off('cycle-slide-added cycle-slide-removed', initAutoHeight);
        opts.container.off('cycle-destroyed', onDestroy);
        opts.container.off('cycle-before', onBefore);

        if (opts._sentinel) {
            opts._sentinel.remove();
            opts._sentinel = null;
        }
    }

})(jQuery);

/*! caption plugin for Cycle2;  version: 20130306 */
(function($) {
    "use strict";

    $.extend($.fn.cycle.defaults, {
        caption: '> .cycle-caption',
        captionTemplate: '{{slideNum}} / {{slideCount}}',
        overlay: '> .cycle-overlay',
        overlayTemplate: '<div>{{title}}</div><div>{{desc}}</div>',
        captionModule: 'caption'
    });

    $(document).on('cycle-update-view', function(e, opts, slideOpts, currSlide) {
        if (opts.captionModule !== 'caption')
            return;
        var el;
        $.each(['caption', 'overlay'], function() {
            var name = this;
            var template = slideOpts[name + 'Template'];
            var el = opts.API.getComponent(name);
            if (el.length && template) {
                el.html(opts.API.tmpl(template, slideOpts, opts, currSlide));
                el.show();
            } else {
                el.hide();
            }
        });
    });

    $(document).on('cycle-destroyed', function(e, opts) {
        var el;
        $.each(['caption', 'overlay'], function() {
            var name = this,
                template = opts[name + 'Template'];
            if (opts[name] && template) {
                el = opts.API.getComponent('caption');
                el.empty();
            }
        });
    });

})(jQuery);

/*! command plugin for Cycle2;  version: 20140415 */
(function($) {
    "use strict";

    var c2 = $.fn.cycle;

    $.fn.cycle = function(options) {
        var cmd, cmdFn, opts;
        var args = $.makeArray(arguments);

        if ($.type(options) == 'number') {
            return this.cycle('goto', options);
        }

        if ($.type(options) == 'string') {
            return this.each(function() {
                var cmdArgs;
                cmd = options;
                opts = $(this).data('cycle.opts');

                if (opts === undefined) {
                    c2.log('slideshow must be initialized before sending commands; "' + cmd + '" ignored');
                    return;
                } else {
                    cmd = cmd == 'goto' ? 'jump' : cmd; // issue #3; change 'goto' to 'jump' internally
                    cmdFn = opts.API[cmd];
                    if ($.isFunction(cmdFn)) {
                        cmdArgs = $.makeArray(args);
                        cmdArgs.shift();
                        return cmdFn.apply(opts.API, cmdArgs);
                    } else {
                        c2.log('unknown command: ', cmd);
                    }
                }
            });
        } else {
            return c2.apply(this, arguments);
        }
    };

    // copy props
    $.extend($.fn.cycle, c2);

    $.extend(c2.API, {
        next: function() {
            var opts = this.opts();
            if (opts.busy && !opts.manualTrump)
                return;

            var count = opts.reverse ? -1 : 1;
            if (opts.allowWrap === false && (opts.currSlide + count) >= opts.slideCount)
                return;

            opts.API.advanceSlide(count);
            opts.API.trigger('cycle-next', [opts]).log('cycle-next');
        },

        prev: function() {
            var opts = this.opts();
            if (opts.busy && !opts.manualTrump)
                return;
            var count = opts.reverse ? 1 : -1;
            if (opts.allowWrap === false && (opts.currSlide + count) < 0)
                return;

            opts.API.advanceSlide(count);
            opts.API.trigger('cycle-prev', [opts]).log('cycle-prev');
        },

        destroy: function() {
            this.stop(); //#204

            var opts = this.opts();
            var clean = $.isFunction($._data) ? $._data : $.noop; // hack for #184 and #201
            clearTimeout(opts.timeoutId);
            opts.timeoutId = 0;
            opts.API.stop();
            opts.API.trigger('cycle-destroyed', [opts]).log('cycle-destroyed');
            opts.container.removeData();
            clean(opts.container[0], 'parsedAttrs', false);

            // #75; remove inline styles
            if (!opts.retainStylesOnDestroy) {
                opts.container.removeAttr('style');
                opts.slides.removeAttr('style');
                opts.slides.removeClass(opts.slideActiveClass);
            }
            opts.slides.each(function() {
                var slide = $(this);
                slide.removeData();
                slide.removeClass(opts.slideClass);
                clean(this, 'parsedAttrs', false);
            });
        },

        jump: function(index, fx) {
            // go to the requested slide
            var fwd;
            var opts = this.opts();
            if (opts.busy && !opts.manualTrump)
                return;
            var num = parseInt(index, 10);
            if (isNaN(num) || num < 0 || num >= opts.slides.length) {
                opts.API.log('goto: invalid slide index: ' + num);
                return;
            }
            if (num == opts.currSlide) {
                opts.API.log('goto: skipping, already on slide', num);
                return;
            }
            opts.nextSlide = num;
            clearTimeout(opts.timeoutId);
            opts.timeoutId = 0;
            opts.API.log('goto: ', num, ' (zero-index)');
            fwd = opts.currSlide < opts.nextSlide;
            opts._tempFx = fx;
            opts.API.prepareTx(true, fwd);
        },

        stop: function() {
            var opts = this.opts();
            var pauseObj = opts.container;
            clearTimeout(opts.timeoutId);
            opts.timeoutId = 0;
            opts.API.stopTransition();
            if (opts.pauseOnHover) {
                if (opts.pauseOnHover !== true)
                    pauseObj = $(opts.pauseOnHover);
                pauseObj.off('mouseenter mouseleave');
            }
            opts.API.trigger('cycle-stopped', [opts]).log('cycle-stopped');
        },

        reinit: function() {
            var opts = this.opts();
            opts.API.destroy();
            opts.container.cycle();
        },

        remove: function(index) {
            var opts = this.opts();
            var slide, slideToRemove, slides = [],
                slideNum = 1;
            for (var i = 0; i < opts.slides.length; i++) {
                slide = opts.slides[i];
                if (i == index) {
                    slideToRemove = slide;
                } else {
                    slides.push(slide);
                    $(slide).data('cycle.opts').slideNum = slideNum;
                    slideNum++;
                }
            }
            if (slideToRemove) {
                opts.slides = $(slides);
                opts.slideCount--;
                $(slideToRemove).remove();
                if (index == opts.currSlide)
                    opts.API.advanceSlide(1);
                else if (index < opts.currSlide)
                    opts.currSlide--;
                else
                    opts.currSlide++;

                opts.API.trigger('cycle-slide-removed', [opts, index, slideToRemove]).log('cycle-slide-removed');
                opts.API.updateView();
            }
        }

    });

    // listen for clicks on elements with data-cycle-cmd attribute
    $(document).on('click.cycle', '[data-cycle-cmd]', function(e) {
        // issue cycle command
        e.preventDefault();
        var el = $(this);
        var command = el.data('cycle-cmd');
        var context = el.data('cycle-context') || '.cycle-slideshow';
        $(context).cycle(command, el.data('cycle-arg'));
    });


})(jQuery);

/*! hash plugin for Cycle2;  version: 20130905 */
(function($) {
    "use strict";

    $(document).on('cycle-pre-initialize', function(e, opts) {
        onHashChange(opts, true);

        opts._onHashChange = function() {
            onHashChange(opts, false);
        };

        $(window).on('hashchange', opts._onHashChange);
    });

    $(document).on('cycle-update-view', function(e, opts, slideOpts) {
        if (slideOpts.hash && ('#' + slideOpts.hash) != window.location.hash) {
            opts._hashFence = true;
            window.location.hash = slideOpts.hash;
        }
    });

    $(document).on('cycle-destroyed', function(e, opts) {
        if (opts._onHashChange) {
            $(window).off('hashchange', opts._onHashChange);
        }
    });

    function onHashChange(opts, setStartingSlide) {
        var hash;
        if (opts._hashFence) {
            opts._hashFence = false;
            return;
        }

        hash = window.location.hash.substring(1);

        opts.slides.each(function(i) {
            if ($(this).data('cycle-hash') == hash) {
                if (setStartingSlide === true) {
                    opts.startingSlide = i;
                } else {
                    var fwd = opts.currSlide < i;
                    opts.nextSlide = i;
                    opts.API.prepareTx(true, fwd);
                }
                return false;
            }
        });
    }

})(jQuery);

/*! loader plugin for Cycle2;  version: 20131121 */
(function($) {
    "use strict";

    $.extend($.fn.cycle.defaults, {
        loader: false
    });

    $(document).on('cycle-bootstrap', function(e, opts) {
        var addFn;

        if (!opts.loader)
            return;

        // override API.add for this slideshow
        addFn = opts.API.add;
        opts.API.add = add;

        function add(slides, prepend) {
            var slideArr = [];
            if ($.type(slides) == 'string')
                slides = $.trim(slides);
            else if ($.type(slides) === 'array') {
                for (var i = 0; i < slides.length; i++)
                    slides[i] = $(slides[i])[0];
            }

            slides = $(slides);
            var slideCount = slides.length;

            if (!slideCount)
                return;

            slides.css('visibility', 'hidden').appendTo('body').each(function(i) { // appendTo fixes #56
                var count = 0;
                var slide = $(this);
                var images = slide.is('img') ? slide : slide.find('img');
                slide.data('index', i);
                // allow some images to be marked as unimportant (and filter out images w/o src value)
                images = images.filter(':not(.cycle-loader-ignore)').filter(':not([src=""])');
                if (!images.length) {
                    --slideCount;
                    slideArr.push(slide);
                    return;
                }

                count = images.length;
                images.each(function() {
                    // add images that are already loaded
                    if (this.complete) {
                        imageLoaded();
                    } else {
                        $(this).load(function() {
                            imageLoaded();
                        }).on("error", function() {
                            if (--count === 0) {
                                // ignore this slide
                                opts.API.log('slide skipped; img not loaded:', this.src);
                                if (--slideCount === 0 && opts.loader == 'wait') {
                                    addFn.apply(opts.API, [slideArr, prepend]);
                                }
                            }
                        });
                    }
                });

                function imageLoaded() {
                    if (--count === 0) {
                        --slideCount;
                        addSlide(slide);
                    }
                }
            });

            if (slideCount)
                opts.container.addClass('cycle-loading');


            function addSlide(slide) {
                var curr;
                if (opts.loader == 'wait') {
                    slideArr.push(slide);
                    if (slideCount === 0) {
                        // #59; sort slides into original markup order
                        slideArr.sort(sorter);
                        addFn.apply(opts.API, [slideArr, prepend]);
                        opts.container.removeClass('cycle-loading');
                    }
                } else {
                    curr = $(opts.slides[opts.currSlide]);
                    addFn.apply(opts.API, [slide, prepend]);
                    curr.show();
                    opts.container.removeClass('cycle-loading');
                }
            }

            function sorter(a, b) {
                return a.data('index') - b.data('index');
            }
        }
    });

})(jQuery);

/*! pager plugin for Cycle2;  version: 20140415 */
(function($) {
    "use strict";

    $.extend($.fn.cycle.defaults, {
        pager: '> .cycle-pager',
        pagerActiveClass: 'cycle-pager-active',
        pagerEvent: 'click.cycle',
        pagerEventBubble: undefined,
        pagerTemplate: '<span>&bull;</span>'
    });

    $(document).on('cycle-bootstrap', function(e, opts, API) {
        // add method to API
        API.buildPagerLink = buildPagerLink;
    });

    $(document).on('cycle-slide-added', function(e, opts, slideOpts, slideAdded) {
        if (opts.pager) {
            opts.API.buildPagerLink(opts, slideOpts, slideAdded);
            opts.API.page = page;
        }
    });

    $(document).on('cycle-slide-removed', function(e, opts, index, slideRemoved) {
        if (opts.pager) {
            var pagers = opts.API.getComponent('pager');
            pagers.each(function() {
                var pager = $(this);
                $(pager.children()[index]).remove();
            });
        }
    });

    $(document).on('cycle-update-view', function(e, opts, slideOpts) {
        var pagers;

        if (opts.pager) {
            pagers = opts.API.getComponent('pager');
            pagers.each(function() {
                $(this).children().removeClass(opts.pagerActiveClass)
                    .eq(opts.currSlide).addClass(opts.pagerActiveClass);
            });
        }
    });

    $(document).on('cycle-destroyed', function(e, opts) {
        var pager = opts.API.getComponent('pager');

        if (pager) {
            pager.children().off(opts.pagerEvent); // #202
            if (opts.pagerTemplate)
                pager.empty();
        }
    });

    function buildPagerLink(opts, slideOpts, slide) {
        var pagerLink;
        var pagers = opts.API.getComponent('pager');
        pagers.each(function() {
            var pager = $(this);
            if (slideOpts.pagerTemplate) {
                var markup = opts.API.tmpl(slideOpts.pagerTemplate, slideOpts, opts, slide[0]);
                pagerLink = $(markup).appendTo(pager);
            } else {
                pagerLink = pager.children().eq(opts.slideCount - 1);
            }
            pagerLink.on(opts.pagerEvent, function(e) {
                if (!opts.pagerEventBubble)
                    e.preventDefault();
                opts.API.page(pager, e.currentTarget);
            });
        });
    }

    function page(pager, target) {
        /*jshint validthis:true */
        var opts = this.opts();
        if (opts.busy && !opts.manualTrump)
            return;

        var index = pager.children().index(target);
        var nextSlide = index;
        var fwd = opts.currSlide < nextSlide;
        if (opts.currSlide == nextSlide) {
            return; // no op, clicked pager for the currently displayed slide
        }
        opts.nextSlide = nextSlide;
        opts._tempFx = opts.pagerFx;
        opts.API.prepareTx(true, fwd);
        opts.API.trigger('cycle-pager-activated', [opts, pager, target]);
    }

})(jQuery);

/*! prevnext plugin for Cycle2;  version: 20140408 */
(function($) {
    "use strict";

    $.extend($.fn.cycle.defaults, {
        next: '> .cycle-next',
        nextEvent: 'click.cycle',
        disabledClass: 'disabled',
        prev: '> .cycle-prev',
        prevEvent: 'click.cycle',
        swipe: false
    });

    $(document).on('cycle-initialized', function(e, opts) {
        opts.API.getComponent('next').on(opts.nextEvent, function(e) {
            e.preventDefault();
            opts.API.next();
        });

        opts.API.getComponent('prev').on(opts.prevEvent, function(e) {
            e.preventDefault();
            opts.API.prev();
        });

        if (opts.swipe) {
            var nextEvent = opts.swipeVert ? 'swipeUp.cycle' : 'swipeLeft.cycle swipeleft.cycle';
            var prevEvent = opts.swipeVert ? 'swipeDown.cycle' : 'swipeRight.cycle swiperight.cycle';
            opts.container.on(nextEvent, function(e) {
                opts._tempFx = opts.swipeFx;
                opts.API.next();
            });
            opts.container.on(prevEvent, function() {
                opts._tempFx = opts.swipeFx;
                opts.API.prev();
            });
        }
    });

    $(document).on('cycle-update-view', function(e, opts, slideOpts, currSlide) {
        if (opts.allowWrap)
            return;

        var cls = opts.disabledClass;
        var next = opts.API.getComponent('next');
        var prev = opts.API.getComponent('prev');
        var prevBoundry = opts._prevBoundry || 0;
        var nextBoundry = (opts._nextBoundry !== undefined) ? opts._nextBoundry : opts.slideCount - 1;

        if (opts.currSlide == nextBoundry)
            next.addClass(cls).prop('disabled', true);
        else
            next.removeClass(cls).prop('disabled', false);

        if (opts.currSlide === prevBoundry)
            prev.addClass(cls).prop('disabled', true);
        else
            prev.removeClass(cls).prop('disabled', false);
    });


    $(document).on('cycle-destroyed', function(e, opts) {
        opts.API.getComponent('prev').off(opts.nextEvent);
        opts.API.getComponent('next').off(opts.prevEvent);
        opts.container.off('swipeleft.cycle swiperight.cycle swipeLeft.cycle swipeRight.cycle swipeUp.cycle swipeDown.cycle');
    });

})(jQuery);

/*! progressive loader plugin for Cycle2;  version: 20130315 */
(function($) {
    "use strict";

    $.extend($.fn.cycle.defaults, {
        progressive: false
    });

    $(document).on('cycle-pre-initialize', function(e, opts) {
        if (!opts.progressive)
            return;

        var API = opts.API;
        var nextFn = API.next;
        var prevFn = API.prev;
        var prepareTxFn = API.prepareTx;
        var type = $.type(opts.progressive);
        var slides, scriptEl;

        if (type == 'array') {
            slides = opts.progressive;
        } else if ($.isFunction(opts.progressive)) {
            slides = opts.progressive(opts);
        } else if (type == 'string') {
            scriptEl = $(opts.progressive);
            slides = $.trim(scriptEl.html());
            if (!slides)
                return;
            // is it json array?
            if (/^(\[)/.test(slides)) {
                try {
                    slides = $.parseJSON(slides);
                } catch (err) {
                    API.log('error parsing progressive slides', err);
                    return;
                }
            } else {
                // plain text, split on delimeter
                slides = slides.split(new RegExp(scriptEl.data('cycle-split') || '\n'));

                // #95; look for empty slide
                if (!slides[slides.length - 1])
                    slides.pop();
            }
        }



        if (prepareTxFn) {
            API.prepareTx = function(manual, fwd) {
                var index, slide;

                if (manual || slides.length === 0) {
                    prepareTxFn.apply(opts.API, [manual, fwd]);
                    return;
                }

                if (fwd && opts.currSlide == (opts.slideCount - 1)) {
                    slide = slides[0];
                    slides = slides.slice(1);
                    opts.container.one('cycle-slide-added', function(e, opts) {
                        setTimeout(function() {
                            opts.API.advanceSlide(1);
                        }, 50);
                    });
                    opts.API.add(slide);
                } else if (!fwd && opts.currSlide === 0) {
                    index = slides.length - 1;
                    slide = slides[index];
                    slides = slides.slice(0, index);
                    opts.container.one('cycle-slide-added', function(e, opts) {
                        setTimeout(function() {
                            opts.currSlide = 1;
                            opts.API.advanceSlide(-1);
                        }, 50);
                    });
                    opts.API.add(slide, true);
                } else {
                    prepareTxFn.apply(opts.API, [manual, fwd]);
                }
            };
        }

        if (nextFn) {
            API.next = function() {
                var opts = this.opts();
                if (slides.length && opts.currSlide == (opts.slideCount - 1)) {
                    var slide = slides[0];
                    slides = slides.slice(1);
                    opts.container.one('cycle-slide-added', function(e, opts) {
                        nextFn.apply(opts.API);
                        opts.container.removeClass('cycle-loading');
                    });
                    opts.container.addClass('cycle-loading');
                    opts.API.add(slide);
                } else {
                    nextFn.apply(opts.API);
                }
            };
        }

        if (prevFn) {
            API.prev = function() {
                var opts = this.opts();
                if (slides.length && opts.currSlide === 0) {
                    var index = slides.length - 1;
                    var slide = slides[index];
                    slides = slides.slice(0, index);
                    opts.container.one('cycle-slide-added', function(e, opts) {
                        opts.currSlide = 1;
                        opts.API.advanceSlide(-1);
                        opts.container.removeClass('cycle-loading');
                    });
                    opts.container.addClass('cycle-loading');
                    opts.API.add(slide, true);
                } else {
                    prevFn.apply(opts.API);
                }
            };
        }
    });

})(jQuery);

/*! tmpl plugin for Cycle2;  version: 20121227 */
(function($) {
    "use strict";

    $.extend($.fn.cycle.defaults, {
        tmplRegex: '{{((.)?.*?)}}'
    });

    $.extend($.fn.cycle.API, {
        tmpl: function(str, opts /*, ... */ ) {
            var regex = new RegExp(opts.tmplRegex || $.fn.cycle.defaults.tmplRegex, 'g');
            var args = $.makeArray(arguments);
            args.shift();
            return str.replace(regex, function(_, str) {
                var i, j, obj, prop, names = str.split('.');
                for (i = 0; i < args.length; i++) {
                    obj = args[i];
                    if (!obj)
                        continue;
                    if (names.length > 1) {
                        prop = obj;
                        for (j = 0; j < names.length; j++) {
                            obj = prop;
                            prop = prop[names[j]] || str;
                        }
                    } else {
                        prop = obj[str];
                    }

                    if ($.isFunction(prop))
                        return prop.apply(obj, args);
                    if (prop !== undefined && prop !== null && prop != str)
                        return prop;
                }
                return str;
            });
        }
    });

})(jQuery);
//@ sourceMappingURL=jquery.cycle2.js.map
/*! carousel transition plugin for Cycle2;  version: 20130528 */
(function($) {
    "use strict";

    $(document).on('cycle-bootstrap', function(e, opts, API) {
        if (opts.fx !== 'carousel')
            return;

        API.getSlideIndex = function(el) {
            var slides = this.opts()._carouselWrap.children();
            var i = slides.index(el);
            return i % slides.length;
        };

        // override default 'next' function
        API.next = function() {
            var count = opts.reverse ? -1 : 1;
            if (opts.allowWrap === false && (opts.currSlide + count) > opts.slideCount - opts.carouselVisible)
                return;
            opts.API.advanceSlide(count);
            opts.API.trigger('cycle-next', [opts]).log('cycle-next');
        };

    });


    $.fn.cycle.transitions.carousel = {
        // transition API impl
        preInit: function(opts) {
            opts.hideNonActive = false;

            opts.container.on('cycle-destroyed', $.proxy(this.onDestroy, opts.API));
            // override default API implementation
            opts.API.stopTransition = this.stopTransition;

            // issue #10
            for (var i = 0; i < opts.startingSlide; i++) {
                opts.container.append(opts.slides[0]);
            }
        },

        // transition API impl
        postInit: function(opts) {
            var i, j, slide, pagerCutoffIndex, wrap;
            var vert = opts.carouselVertical;
            if (opts.carouselVisible && opts.carouselVisible > opts.slideCount)
                opts.carouselVisible = opts.slideCount - 1;
            var visCount = opts.carouselVisible || opts.slides.length;
            var slideCSS = {
                display: vert ? 'block' : 'inline-block',
                position: 'static'
            };

            // required styles
            opts.container.css({
                position: 'relative',
                overflow: 'hidden'
            });
            opts.slides.css(slideCSS);

            opts._currSlide = opts.currSlide;

            // wrap slides in a div; this div is what is animated
            wrap = $('<div class="cycle-carousel-wrap"></div>')
                .prependTo(opts.container)
                .css({
                    margin: 0,
                    padding: 0,
                    top: 0,
                    left: 0,
                    position: 'absolute'
                })
                .append(opts.slides);

            opts._carouselWrap = wrap;

            if (!vert)
                wrap.css('white-space', 'nowrap');

            if (opts.allowWrap !== false) {
                // prepend and append extra slides so we don't see any empty space when we
                // near the end of the carousel.  for fluid containers, add even more clones
                // so there is plenty to fill the screen
                // @todo: optimzie this based on slide sizes

                for (j = 0; j < (opts.carouselVisible === undefined ? 2 : 1); j++) {
                    for (i = 0; i < opts.slideCount; i++) {
                        wrap.append(opts.slides[i].cloneNode(true));
                    }
                    i = opts.slideCount;
                    while (i--) { // #160, #209
                        wrap.prepend(opts.slides[i].cloneNode(true));
                    }
                }

                wrap.find('.cycle-slide-active').removeClass('cycle-slide-active');
                opts.slides.eq(opts.startingSlide).addClass('cycle-slide-active');
            }

            if (opts.pager && opts.allowWrap === false) {
                // hide "extra" pagers
                pagerCutoffIndex = opts.slideCount - visCount;
                $(opts.pager).children().filter(':gt(' + pagerCutoffIndex + ')').hide();
            }

            opts._nextBoundry = opts.slideCount - opts.carouselVisible;

            this.prepareDimensions(opts);
        },

        prepareDimensions: function(opts) {
            var dim, offset, pagerCutoffIndex, tmp, j;
            var vert = opts.carouselVertical;
            var visCount = opts.carouselVisible || opts.slides.length;

            if (opts.carouselFluid && opts.carouselVisible) {
                if (!opts._carouselResizeThrottle) {
                    // fluid container AND fluid slides; slides need to be resized to fit container
                    this.fluidSlides(opts);
                }
            } else if (opts.carouselVisible && opts.carouselSlideDimension) {
                dim = visCount * opts.carouselSlideDimension;
                opts.container[vert ? 'height' : 'width'](dim);
            } else if (opts.carouselVisible) {
                dim = visCount * $(opts.slides[0])[vert ? 'outerHeight' : 'outerWidth'](true);
                opts.container[vert ? 'height' : 'width'](dim);
            }
            // else {
            //     // fluid; don't size the container
            // }

            offset = (opts.carouselOffset || 0);
            if (opts.allowWrap !== false) {
                if (opts.carouselSlideDimension) {
                    offset -= ((opts.slideCount + opts.currSlide) * opts.carouselSlideDimension);
                } else {
                    // calculate offset based on actual slide dimensions
                    tmp = opts._carouselWrap.children();
                    for (j = 0; j < (opts.slideCount + opts.currSlide); j++) {
                        offset -= $(tmp[j])[vert ? 'outerHeight' : 'outerWidth'](true);
                    }
                }
            }

            opts._carouselWrap.css(vert ? 'top' : 'left', offset);
        },

        fluidSlides: function(opts) {
            var timeout;
            var slide = opts.slides.eq(0);
            var adjustment = slide.outerWidth() - slide.width();
            var prepareDimensions = this.prepareDimensions;

            // throttle resize event
            $(window).on('resize', resizeThrottle);

            opts._carouselResizeThrottle = resizeThrottle;
            onResize();

            function resizeThrottle() {
                clearTimeout(timeout);
                timeout = setTimeout(onResize, 20);
            }

            function onResize() {
                opts._carouselWrap.stop(false, true);
                var slideWidth = opts.container.width() / opts.carouselVisible;
                slideWidth = Math.ceil(slideWidth - adjustment);
                opts._carouselWrap.children().width(slideWidth);
                if (opts._sentinel)
                    opts._sentinel.width(slideWidth);
                prepareDimensions(opts);
            }
        },

        // transition API impl
        transition: function(opts, curr, next, fwd, callback) {
            var moveBy, props = {};
            var hops = opts.nextSlide - opts.currSlide;
            var vert = opts.carouselVertical;
            var speed = opts.speed;

            // handle all the edge cases for wrapping & non-wrapping
            if (opts.allowWrap === false) {
                fwd = hops > 0;
                var currSlide = opts._currSlide;
                var maxCurr = opts.slideCount - opts.carouselVisible;
                if (hops > 0 && opts.nextSlide > maxCurr && currSlide == maxCurr) {
                    hops = 0;
                } else if (hops > 0 && opts.nextSlide > maxCurr) {
                    hops = opts.nextSlide - currSlide - (opts.nextSlide - maxCurr);
                } else if (hops < 0 && opts.currSlide > maxCurr && opts.nextSlide > maxCurr) {
                    hops = 0;
                } else if (hops < 0 && opts.currSlide > maxCurr) {
                    hops += opts.currSlide - maxCurr;
                } else
                    currSlide = opts.currSlide;

                moveBy = this.getScroll(opts, vert, currSlide, hops);
                opts.API.opts()._currSlide = opts.nextSlide > maxCurr ? maxCurr : opts.nextSlide;
            } else {
                if (fwd && opts.nextSlide === 0) {
                    // moving from last slide to first
                    moveBy = this.getDim(opts, opts.currSlide, vert);
                    callback = this.genCallback(opts, fwd, vert, callback);
                } else if (!fwd && opts.nextSlide == opts.slideCount - 1) {
                    // moving from first slide to last
                    moveBy = this.getDim(opts, opts.currSlide, vert);
                    callback = this.genCallback(opts, fwd, vert, callback);
                } else {
                    moveBy = this.getScroll(opts, vert, opts.currSlide, hops);
                }
            }

            props[vert ? 'top' : 'left'] = fwd ? ("-=" + moveBy) : ("+=" + moveBy);

            // throttleSpeed means to scroll slides at a constant rate, rather than
            // a constant speed
            if (opts.throttleSpeed)
                speed = (moveBy / $(opts.slides[0])[vert ? 'height' : 'width']()) * opts.speed;

            opts._carouselWrap.animate(props, speed, opts.easing, callback);
        },

        getDim: function(opts, index, vert) {
            var slide = $(opts.slides[index]);
            return slide[vert ? 'outerHeight' : 'outerWidth'](true);
        },

        getScroll: function(opts, vert, currSlide, hops) {
            var i, moveBy = 0;

            if (hops > 0) {
                for (i = currSlide; i < currSlide + hops; i++)
                    moveBy += this.getDim(opts, i, vert);
            } else {
                for (i = currSlide; i > currSlide + hops; i--)
                    moveBy += this.getDim(opts, i, vert);
            }
            return moveBy;
        },

        genCallback: function(opts, fwd, vert, callback) {
            // returns callback fn that resets the left/top wrap position to the "real" slides
            return function() {
                var pos = $(opts.slides[opts.nextSlide]).position();
                var offset = 0 - pos[vert ? 'top' : 'left'] + (opts.carouselOffset || 0);
                opts._carouselWrap.css(opts.carouselVertical ? 'top' : 'left', offset);
                callback();
            };
        },

        // core API override
        stopTransition: function() {
            var opts = this.opts();
            opts.slides.stop(false, true);
            opts._carouselWrap.stop(false, true);
        },

        // core API supplement
        onDestroy: function(e) {
            var opts = this.opts();
            if (opts._carouselResizeThrottle)
                $(window).off('resize', opts._carouselResizeThrottle);
            opts.slides.prependTo(opts.container);
            opts._carouselWrap.remove();
        }
    };

})(jQuery);
/*!
 * jQuery Cookie Plugin v1.4.0
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function(factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as anonymous module.
        define(['jquery'], factory);
    } else {
        // Browser globals.
        factory(jQuery);
    }
}(function($) {

    var pluses = /\+/g;

    function encode(s) {
        return config.raw ? s : encodeURIComponent(s);
    }

    function decode(s) {
        return config.raw ? s : decodeURIComponent(s);
    }

    function stringifyCookieValue(value) {
        return encode(config.json ? JSON.stringify(value) : String(value));
    }

    function parseCookieValue(s) {
        if (s.indexOf('"') === 0) {
            // This is a quoted cookie as according to RFC2068, unescape...
            s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
        }

        try {
            // Replace server-side written pluses with spaces.
            // If we can't decode the cookie, ignore it, it's unusable.
            s = decodeURIComponent(s.replace(pluses, ' '));
        } catch (e) {
            return;
        }

        try {
            // If we can't parse the cookie, ignore it, it's unusable.
            return config.json ? JSON.parse(s) : s;
        } catch (e) {}
    }

    function read(s, converter) {
        var value = config.raw ? s : parseCookieValue(s);
        return $.isFunction(converter) ? converter(value) : value;
    }

    var config = $.cookie = function(key, value, options) {

        // Write
        if (value !== undefined && !$.isFunction(value)) {
            options = $.extend({}, config.defaults, options);

            if (typeof options.expires === 'number') {
                var days = options.expires,
                    t = options.expires = new Date();
                t.setDate(t.getDate() + days);
            }

            return (document.cookie = [
                encode(key), '=', stringifyCookieValue(value),
                options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
                options.path ? '; path=' + options.path : '',
                options.domain ? '; domain=' + options.domain : '',
                options.secure ? '; secure' : ''
            ].join(''));
        }

        // Read

        var result = key ? undefined : {};

        // To prevent the for loop in the first place assign an empty array
        // in case there are no cookies at all. Also prevents odd result when
        // calling $.cookie().
        var cookies = document.cookie ? document.cookie.split('; ') : [];

        for (var i = 0, l = cookies.length; i < l; i++) {
            var parts = cookies[i].split('=');
            var name = decode(parts.shift());
            var cookie = parts.join('=');

            if (key && key === name) {
                // If second argument (value) is a function it's a converter...
                result = read(cookie, value);
                break;
            }

            // Prevent storing a cookie that we couldn't decode.
            if (!key && (cookie = read(cookie)) !== undefined) {
                result[name] = cookie;
            }
        }

        return result;
    };

    config.defaults = {};

    $.removeCookie = function(key, options) {
        if ($.cookie(key) !== undefined) {
            // Must not alter options, thus extending a fresh object...
            $.cookie(key, '', $.extend({}, options, {
                expires: -1
            }));
            return true;
        }
        return false;
    };

}));

/*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 * 
 * Open source under the BSD License. 
 * 
 * Copyright © 2008 George McGinley Smith
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
 */

// t: current time, b: begInnIng value, c: change In value, d: duration
jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend(jQuery.easing, {
    def: 'easeOutQuad',
    swing: function(x, t, b, c, d) {
        //alert(jQuery.easing.default);
        return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
    },
    easeInQuad: function(x, t, b, c, d) {
        return c * (t /= d) * t + b;
    },
    easeOutQuad: function(x, t, b, c, d) {
        return -c * (t /= d) * (t - 2) + b;
    },
    easeInOutQuad: function(x, t, b, c, d) {
        if ((t /= d / 2) < 1) return c / 2 * t * t + b;
        return -c / 2 * ((--t) * (t - 2) - 1) + b;
    },
    easeInCubic: function(x, t, b, c, d) {
        return c * (t /= d) * t * t + b;
    },
    easeOutCubic: function(x, t, b, c, d) {
        return c * ((t = t / d - 1) * t * t + 1) + b;
    },
    easeInOutCubic: function(x, t, b, c, d) {
        if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
        return c / 2 * ((t -= 2) * t * t + 2) + b;
    },
    easeInQuart: function(x, t, b, c, d) {
        return c * (t /= d) * t * t * t + b;
    },
    easeOutQuart: function(x, t, b, c, d) {
        return -c * ((t = t / d - 1) * t * t * t - 1) + b;
    },
    easeInOutQuart: function(x, t, b, c, d) {
        if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
        return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
    },
    easeInQuint: function(x, t, b, c, d) {
        return c * (t /= d) * t * t * t * t + b;
    },
    easeOutQuint: function(x, t, b, c, d) {
        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
    },
    easeInOutQuint: function(x, t, b, c, d) {
        if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
        return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
    },
    easeInSine: function(x, t, b, c, d) {
        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
    },
    easeOutSine: function(x, t, b, c, d) {
        return c * Math.sin(t / d * (Math.PI / 2)) + b;
    },
    easeInOutSine: function(x, t, b, c, d) {
        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
    },
    easeInExpo: function(x, t, b, c, d) {
        return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
    },
    easeOutExpo: function(x, t, b, c, d) {
        return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
    },
    easeInOutExpo: function(x, t, b, c, d) {
        if (t == 0) return b;
        if (t == d) return b + c;
        if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
        return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    easeInCirc: function(x, t, b, c, d) {
        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
    },
    easeOutCirc: function(x, t, b, c, d) {
        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
    },
    easeInOutCirc: function(x, t, b, c, d) {
        if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
        return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
    },
    easeInElastic: function(x, t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (t == 0) return b;
        if ((t /= d) == 1) return b + c;
        if (!p) p = d * .3;
        if (a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        } else var s = p / (2 * Math.PI) * Math.asin(c / a);
        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    },
    easeOutElastic: function(x, t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (t == 0) return b;
        if ((t /= d) == 1) return b + c;
        if (!p) p = d * .3;
        if (a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        } else var s = p / (2 * Math.PI) * Math.asin(c / a);
        return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
    },
    easeInOutElastic: function(x, t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (t == 0) return b;
        if ((t /= d / 2) == 2) return b + c;
        if (!p) p = d * (.3 * 1.5);
        if (a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        } else var s = p / (2 * Math.PI) * Math.asin(c / a);
        if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
    },
    easeInBack: function(x, t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        return c * (t /= d) * t * ((s + 1) * t - s) + b;
    },
    easeOutBack: function(x, t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
    },
    easeInOutBack: function(x, t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
        return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
    },
    easeInBounce: function(x, t, b, c, d) {
        return c - jQuery.easing.easeOutBounce(x, d - t, 0, c, d) + b;
    },
    easeOutBounce: function(x, t, b, c, d) {
        if ((t /= d) < (1 / 2.75)) {
            return c * (7.5625 * t * t) + b;
        } else if (t < (2 / 2.75)) {
            return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
        } else if (t < (2.5 / 2.75)) {
            return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
        } else {
            return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
        }
    },
    easeInOutBounce: function(x, t, b, c, d) {
        if (t < d / 2) return jQuery.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;
        return jQuery.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
    }
});

/*
 *
 * TERMS OF USE - EASING EQUATIONS
 * 
 * Open source under the BSD License. 
 * 
 * Copyright © 2001 Robert Penner
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
 */
/* Copyright (c) 2009 José Joaquín Núñez (josejnv@gmail.com) http://joaquinnunez.cl/blog/
 * Licensed under GPL (http://www.opensource.org/licenses/gpl-2.0.php)
 * Use only for non-commercial usage.
 *
 * Version : 0.1
 *
 * Requires: jQuery 1.2+
 */

(function(jQuery) {
    jQuery.fn.clock = function(options) {
        var defaults = {
            offset: '+0',
            type: 'analog'
        };
        var _this = this;
        var opts = jQuery.extend(defaults, options);

        setInterval(function() {
            var seconds = jQuery.calcTime(opts.offset).getSeconds();
            if (opts.type == 'analog') {
                var sdegree = seconds * 6;
                var srotate = "rotate(" + sdegree + "deg)";
                jQuery(_this).find(".sec").css({
                    "-moz-transform": srotate,
                    "-webkit-transform": srotate
                });
            } else {
                jQuery(_this).find(".sec").html(seconds);
            }
        }, 1000);

        setInterval(function() {
            var hours = jQuery.calcTime(opts.offset).getHours();
            if (opts.type == 'analog') {
                var hdegree = hours * 30 + (mins / 2);
                var hrotate = "rotate(" + hdegree + "deg)";
                jQuery(_this).find(".hour").css({
                    "-moz-transform": hrotate,
                    "-webkit-transform": hrotate
                });
            } else {
                var modhours = hours > 12 ? hours - 12 : hours;
                jQuery(_this).find(".hour").html(modhours + ' :');
            }
            var meridiem = hours < 12 ? 'AM' : 'PM';
            jQuery(_this).find('.meridiem').html(meridiem);
        }, 1000);

        setInterval(function() {
            var mins = jQuery.calcTime(opts.offset).getMinutes();
            mins = (mins < 10 ? '0' : '') + mins;
            if (opts.type == 'analog') {
                var mdegree = mins * 6;
                var mrotate = "rotate(" + mdegree + "deg)";
                jQuery(_this).find(".min").css({
                    "-moz-transform": mrotate,
                    "-webkit-transform": mrotate
                });
            } else {
                jQuery(_this).find(".min").html(mins);
            }
        }, 1000);
    }
})(jQuery);

jQuery.calcTime = function(offset) {
    d = new Date();
    utc = d.getTime() + (d.getTimezoneOffset() * 60000);

    nd = new Date(utc + (1000 * offset));
    return nd;
};

/*! Magnific Popup - v1.1.0 - 2016-02-20
 * http://dimsemenov.com/plugins/magnific-popup/
 * Copyright (c) 2016 Dmitry Semenov; */
;
(function(factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module. 
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS 
        factory(require('jquery'));
    } else {
        // Browser globals 
        factory(window.jQuery || window.Zepto);
    }
}(function($) {

    /*>>core*/
    /**
     * 
     * Magnific Popup Core JS file
     * 
     */


    /**
     * Private static constants
     */
    var CLOSE_EVENT = 'Close',
        BEFORE_CLOSE_EVENT = 'BeforeClose',
        AFTER_CLOSE_EVENT = 'AfterClose',
        BEFORE_APPEND_EVENT = 'BeforeAppend',
        MARKUP_PARSE_EVENT = 'MarkupParse',
        OPEN_EVENT = 'Open',
        CHANGE_EVENT = 'Change',
        NS = 'mfp',
        EVENT_NS = '.' + NS,
        READY_CLASS = 'mfp-ready',
        REMOVING_CLASS = 'mfp-removing',
        PREVENT_CLOSE_CLASS = 'mfp-prevent-close';


    /**
     * Private vars 
     */
    /*jshint -W079 */
    var mfp, // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
        MagnificPopup = function() {},
        _isJQ = !!(window.jQuery),
        _prevStatus,
        _window = $(window),
        _document,
        _prevContentType,
        _wrapClasses,
        _currPopupType;


    /**
     * Private functions
     */
    var _mfpOn = function(name, f) {
            mfp.ev.on(NS + name + EVENT_NS, f);
        },
        _getEl = function(className, appendTo, html, raw) {
            var el = document.createElement('div');
            el.className = 'mfp-' + className;
            if (html) {
                el.innerHTML = html;
            }
            if (!raw) {
                el = $(el);
                if (appendTo) {
                    el.appendTo(appendTo);
                }
            } else if (appendTo) {
                appendTo.appendChild(el);
            }
            return el;
        },
        _mfpTrigger = function(e, data) {
            mfp.ev.triggerHandler(NS + e, data);

            if (mfp.st.callbacks) {
                // converts "mfpEventName" to "eventName" callback and triggers it if it's present
                e = e.charAt(0).toLowerCase() + e.slice(1);
                if (mfp.st.callbacks[e]) {
                    mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
                }
            }
        },
        _getCloseBtn = function(type) {
            if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
                mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace('%title%', mfp.st.tClose));
                _currPopupType = type;
            }
            return mfp.currTemplate.closeBtn;
        },
        // Initialize Magnific Popup only when called at least once
        _checkInstance = function() {
            if (!$.magnificPopup.instance) {
                /*jshint -W020 */
                mfp = new MagnificPopup();
                mfp.init();
                $.magnificPopup.instance = mfp;
            }
        },
        // CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
        supportsTransitions = function() {
            var s = document.createElement('p').style, // 's' for style. better to create an element if body yet to exist
                v = ['ms', 'O', 'Moz', 'Webkit']; // 'v' for vendor

            if (s['transition'] !== undefined) {
                return true;
            }

            while (v.length) {
                if (v.pop() + 'Transition' in s) {
                    return true;
                }
            }

            return false;
        };



    /**
     * Public functions
     */
    MagnificPopup.prototype = {

        constructor: MagnificPopup,

        /**
         * Initializes Magnific Popup plugin. 
         * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
         */
        init: function() {
            var appVersion = navigator.appVersion;
            mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;
            mfp.isAndroid = (/android/gi).test(appVersion);
            mfp.isIOS = (/iphone|ipad|ipod/gi).test(appVersion);
            mfp.supportsTransition = supportsTransitions();

            // We disable fixed positioned lightbox on devices that don't handle it nicely.
            // If you know a better way of detecting this - let me know.
            mfp.probablyMobile = (mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent));
            _document = $(document);

            mfp.popupsCache = {};
        },

        /**
         * Opens popup
         * @param  data [description]
         */
        open: function(data) {

            var i;

            if (data.isObj === false) {
                // convert jQuery collection to array to avoid conflicts later
                mfp.items = data.items.toArray();

                mfp.index = 0;
                var items = data.items,
                    item;
                for (i = 0; i < items.length; i++) {
                    item = items[i];
                    if (item.parsed) {
                        item = item.el[0];
                    }
                    if (item === data.el[0]) {
                        mfp.index = i;
                        break;
                    }
                }
            } else {
                mfp.items = $.isArray(data.items) ? data.items : [data.items];
                mfp.index = data.index || 0;
            }

            // if popup is already opened - we just update the content
            if (mfp.isOpen) {
                mfp.updateItemHTML();
                return;
            }

            mfp.types = [];
            _wrapClasses = '';
            if (data.mainEl && data.mainEl.length) {
                mfp.ev = data.mainEl.eq(0);
            } else {
                mfp.ev = _document;
            }

            if (data.key) {
                if (!mfp.popupsCache[data.key]) {
                    mfp.popupsCache[data.key] = {};
                }
                mfp.currTemplate = mfp.popupsCache[data.key];
            } else {
                mfp.currTemplate = {};
            }



            mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
            mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;

            if (mfp.st.modal) {
                mfp.st.closeOnContentClick = false;
                mfp.st.closeOnBgClick = false;
                mfp.st.showCloseBtn = false;
                mfp.st.enableEscapeKey = false;
            }


            // Building markup
            // main containers are created only once
            if (!mfp.bgOverlay) {

                // Dark overlay
                mfp.bgOverlay = _getEl('bg').on('click' + EVENT_NS, function() {
                    mfp.close();
                });

                mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click' + EVENT_NS, function(e) {
                    if (mfp._checkIfClose(e.target)) {
                        mfp.close();
                    }
                });

                mfp.container = _getEl('container', mfp.wrap);
            }

            mfp.contentContainer = _getEl('content');
            if (mfp.st.preloader) {
                mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);
            }


            // Initializing modules
            var modules = $.magnificPopup.modules;
            for (i = 0; i < modules.length; i++) {
                var n = modules[i];
                n = n.charAt(0).toUpperCase() + n.slice(1);
                mfp['init' + n].call(mfp);
            }
            _mfpTrigger('BeforeOpen');


            if (mfp.st.showCloseBtn) {
                // Close button
                if (!mfp.st.closeBtnInside) {
                    mfp.wrap.append(_getCloseBtn());
                } else {
                    _mfpOn(MARKUP_PARSE_EVENT, function(e, template, values, item) {
                        values.close_replaceWith = _getCloseBtn(item.type);
                    });
                    _wrapClasses += ' mfp-close-btn-in';
                }
            }

            if (mfp.st.alignTop) {
                _wrapClasses += ' mfp-align-top';
            }



            if (mfp.fixedContentPos) {
                mfp.wrap.css({
                    overflow: mfp.st.overflowY,
                    overflowX: 'hidden',
                    overflowY: mfp.st.overflowY
                });
            } else {
                mfp.wrap.css({
                    top: _window.scrollTop(),
                    position: 'absolute'
                });
            }
            if (mfp.st.fixedBgPos === false || (mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos)) {
                mfp.bgOverlay.css({
                    height: _document.height(),
                    position: 'absolute'
                });
            }



            if (mfp.st.enableEscapeKey) {
                // Close on ESC key
                _document.on('keyup' + EVENT_NS, function(e) {
                    if (e.keyCode === 27) {
                        mfp.close();
                    }
                });
            }

            _window.on('resize' + EVENT_NS, function() {
                mfp.updateSize();
            });


            if (!mfp.st.closeOnContentClick) {
                _wrapClasses += ' mfp-auto-cursor';
            }

            if (_wrapClasses)
                mfp.wrap.addClass(_wrapClasses);


            // this triggers recalculation of layout, so we get it once to not to trigger twice
            var windowHeight = mfp.wH = _window.height();


            var windowStyles = {};

            if (mfp.fixedContentPos) {
                if (mfp._hasScrollBar(windowHeight)) {
                    var s = mfp._getScrollbarSize();
                    if (s) {
                        windowStyles.marginRight = s;
                    }
                }
            }

            if (mfp.fixedContentPos) {
                if (!mfp.isIE7) {
                    windowStyles.overflow = 'hidden';
                } else {
                    // ie7 double-scroll bug
                    $('body, html').css('overflow', 'hidden');
                }
            }



            var classesToadd = mfp.st.mainClass;
            if (mfp.isIE7) {
                classesToadd += ' mfp-ie7';
            }
            if (classesToadd) {
                mfp._addClassToMFP(classesToadd);
            }

            // add content
            mfp.updateItemHTML();

            _mfpTrigger('BuildControls');

            // remove scrollbar, add margin e.t.c
            $('html').css(windowStyles);

            // add everything to DOM
            mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || $(document.body));

            // Save last focused element
            mfp._lastFocusedEl = document.activeElement;

            // Wait for next cycle to allow CSS transition
            setTimeout(function() {

                if (mfp.content) {
                    mfp._addClassToMFP(READY_CLASS);
                    mfp._setFocus();
                } else {
                    // if content is not defined (not loaded e.t.c) we add class only for BG
                    mfp.bgOverlay.addClass(READY_CLASS);
                }

                // Trap the focus in popup
                _document.on('focusin' + EVENT_NS, mfp._onFocusIn);

            }, 16);

            mfp.isOpen = true;
            mfp.updateSize(windowHeight);
            _mfpTrigger(OPEN_EVENT);

            return data;
        },

        /**
         * Closes the popup
         */
        close: function() {
            if (!mfp.isOpen) return;
            _mfpTrigger(BEFORE_CLOSE_EVENT);

            mfp.isOpen = false;
            // for CSS3 animation
            if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
                mfp._addClassToMFP(REMOVING_CLASS);
                setTimeout(function() {
                    mfp._close();
                }, mfp.st.removalDelay);
            } else {
                mfp._close();
            }
        },

        /**
         * Helper for close() function
         */
        _close: function() {
            _mfpTrigger(CLOSE_EVENT);

            var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';

            mfp.bgOverlay.detach();
            mfp.wrap.detach();
            mfp.container.empty();

            if (mfp.st.mainClass) {
                classesToRemove += mfp.st.mainClass + ' ';
            }

            mfp._removeClassFromMFP(classesToRemove);

            if (mfp.fixedContentPos) {
                var windowStyles = {
                    marginRight: ''
                };
                if (mfp.isIE7) {
                    $('body, html').css('overflow', '');
                } else {
                    windowStyles.overflow = '';
                }
                $('html').css(windowStyles);
            }

            _document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);
            mfp.ev.off(EVENT_NS);

            // clean up DOM elements that aren't removed
            mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');
            mfp.bgOverlay.attr('class', 'mfp-bg');
            mfp.container.attr('class', 'mfp-container');

            // remove close button from target element
            if (mfp.st.showCloseBtn &&
                (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
                if (mfp.currTemplate.closeBtn)
                    mfp.currTemplate.closeBtn.detach();
            }


            if (mfp.st.autoFocusLast && mfp._lastFocusedEl) {
                $(mfp._lastFocusedEl).focus(); // put tab focus back
            }
            mfp.currItem = null;
            mfp.content = null;
            mfp.currTemplate = null;
            mfp.prevHeight = 0;

            _mfpTrigger(AFTER_CLOSE_EVENT);
        },

        updateSize: function(winHeight) {

            if (mfp.isIOS) {
                // fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
                var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
                var height = window.innerHeight * zoomLevel;
                mfp.wrap.css('height', height);
                mfp.wH = height;
            } else {
                mfp.wH = winHeight || _window.height();
            }
            // Fixes #84: popup incorrectly positioned with position:relative on body
            if (!mfp.fixedContentPos) {
                mfp.wrap.css('height', mfp.wH);
            }

            _mfpTrigger('Resize');

        },

        /**
         * Set content of popup based on current index
         */
        updateItemHTML: function() {
            var item = mfp.items[mfp.index];

            // Detach and perform modifications
            mfp.contentContainer.detach();

            if (mfp.content)
                mfp.content.detach();

            if (!item.parsed) {
                item = mfp.parseEl(mfp.index);
            }

            var type = item.type;

            _mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]);
            // BeforeChange event works like so:
            // _mfpOn('BeforeChange', function(e, prevType, newType) { });

            mfp.currItem = item;

            if (!mfp.currTemplate[type]) {
                var markup = mfp.st[type] ? mfp.st[type].markup : false;

                // allows to modify markup
                _mfpTrigger('FirstMarkupParse', markup);

                if (markup) {
                    mfp.currTemplate[type] = $(markup);
                } else {
                    // if there is no markup found we just define that template is parsed
                    mfp.currTemplate[type] = true;
                }
            }

            if (_prevContentType && _prevContentType !== item.type) {
                mfp.container.removeClass('mfp-' + _prevContentType + '-holder');
            }

            var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
            mfp.appendContent(newContent, type);

            item.preloaded = true;

            _mfpTrigger(CHANGE_EVENT, item);
            _prevContentType = item.type;

            // Append container back after its content changed
            mfp.container.prepend(mfp.contentContainer);

            _mfpTrigger('AfterChange');
        },


        /**
         * Set HTML content of popup
         */
        appendContent: function(newContent, type) {
            mfp.content = newContent;

            if (newContent) {
                if (mfp.st.showCloseBtn && mfp.st.closeBtnInside &&
                    mfp.currTemplate[type] === true) {
                    // if there is no markup, we just append close button element inside
                    if (!mfp.content.find('.mfp-close').length) {
                        mfp.content.append(_getCloseBtn());
                    }
                } else {
                    mfp.content = newContent;
                }
            } else {
                mfp.content = '';
            }

            _mfpTrigger(BEFORE_APPEND_EVENT);
            mfp.container.addClass('mfp-' + type + '-holder');

            mfp.contentContainer.append(mfp.content);
        },


        /**
         * Creates Magnific Popup data object based on given data
         * @param  {int} index Index of item to parse
         */
        parseEl: function(index) {
            var item = mfp.items[index],
                type;

            if (item.tagName) {
                item = {
                    el: $(item)
                };
            } else {
                type = item.type;
                item = {
                    data: item,
                    src: item.src
                };
            }

            if (item.el) {
                var types = mfp.types;

                // check for 'mfp-TYPE' class
                for (var i = 0; i < types.length; i++) {
                    if (item.el.hasClass('mfp-' + types[i])) {
                        type = types[i];
                        break;
                    }
                }

                item.src = item.el.attr('data-mfp-src');
                if (!item.src) {
                    item.src = item.el.attr('href');
                }
            }

            item.type = type || mfp.st.type || 'inline';
            item.index = index;
            item.parsed = true;
            mfp.items[index] = item;
            _mfpTrigger('ElementParse', item);

            return mfp.items[index];
        },


        /**
         * Initializes single popup or a group of popups
         */
        addGroup: function(el, options) {
            var eHandler = function(e) {
                e.mfpEl = this;
                mfp._openClick(e, el, options);
            };

            if (!options) {
                options = {};
            }

            var eName = 'click.magnificPopup';
            options.mainEl = el;

            if (options.items) {
                options.isObj = true;
                el.off(eName).on(eName, eHandler);
            } else {
                options.isObj = false;
                if (options.delegate) {
                    el.off(eName).on(eName, options.delegate, eHandler);
                } else {
                    options.items = el;
                    el.off(eName).on(eName, eHandler);
                }
            }
        },
        _openClick: function(e, el, options) {
            var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;


            if (!midClick && (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)) {
                return;
            }

            var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;

            if (disableOn) {
                if ($.isFunction(disableOn)) {
                    if (!disableOn.call(mfp)) {
                        return true;
                    }
                } else { // else it's number
                    if (_window.width() < disableOn) {
                        return true;
                    }
                }
            }

            if (e.type) {
                e.preventDefault();

                // This will prevent popup from closing if element is inside and popup is already opened
                if (mfp.isOpen) {
                    e.stopPropagation();
                }
            }

            options.el = $(e.mfpEl);
            if (options.delegate) {
                options.items = el.find(options.delegate);
            }
            mfp.open(options);
        },


        /**
         * Updates text on preloader
         */
        updateStatus: function(status, text) {

            if (mfp.preloader) {
                if (_prevStatus !== status) {
                    mfp.container.removeClass('mfp-s-' + _prevStatus);
                }

                if (!text && status === 'loading') {
                    text = mfp.st.tLoading;
                }

                var data = {
                    status: status,
                    text: text
                };
                // allows to modify status
                _mfpTrigger('UpdateStatus', data);

                status = data.status;
                text = data.text;

                mfp.preloader.html(text);

                mfp.preloader.find('a').on('click', function(e) {
                    e.stopImmediatePropagation();
                });

                mfp.container.addClass('mfp-s-' + status);
                _prevStatus = status;
            }
        },


        /*
        	"Private" helpers that aren't private at all
         */
        // Check to close popup or not
        // "target" is an element that was clicked
        _checkIfClose: function(target) {

            if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
                return;
            }

            var closeOnContent = mfp.st.closeOnContentClick;
            var closeOnBg = mfp.st.closeOnBgClick;

            if (closeOnContent && closeOnBg) {
                return true;
            } else {

                // We close the popup if click is on close button or on preloader. Or if there is no content.
                if (!mfp.content || $(target).hasClass('mfp-close') || (mfp.preloader && target === mfp.preloader[0])) {
                    return true;
                }

                // if click is outside the content
                if ((target !== mfp.content[0] && !$.contains(mfp.content[0], target))) {
                    if (closeOnBg) {
                        // last check, if the clicked element is in DOM, (in case it's removed onclick)
                        if ($.contains(document, target)) {
                            return true;
                        }
                    }
                } else if (closeOnContent) {
                    return true;
                }

            }
            return false;
        },
        _addClassToMFP: function(cName) {
            mfp.bgOverlay.addClass(cName);
            mfp.wrap.addClass(cName);
        },
        _removeClassFromMFP: function(cName) {
            this.bgOverlay.removeClass(cName);
            mfp.wrap.removeClass(cName);
        },
        _hasScrollBar: function(winHeight) {
            return ((mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height()));
        },
        _setFocus: function() {
            (mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
        },
        _onFocusIn: function(e) {
            if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
                mfp._setFocus();
                return false;
            }
        },
        _parseMarkup: function(template, values, item) {
            var arr;
            if (item.data) {
                values = $.extend(item.data, values);
            }
            _mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);

            $.each(values, function(key, value) {
                if (value === undefined || value === false) {
                    return true;
                }
                arr = key.split('_');
                if (arr.length > 1) {
                    var el = template.find(EVENT_NS + '-' + arr[0]);

                    if (el.length > 0) {
                        var attr = arr[1];
                        if (attr === 'replaceWith') {
                            if (el[0] !== value[0]) {
                                el.replaceWith(value);
                            }
                        } else if (attr === 'img') {
                            if (el.is('img')) {
                                el.attr('src', value);
                            } else {
                                el.replaceWith($('<img>').attr('src', value).attr('class', el.attr('class')));
                            }
                        } else {
                            el.attr(arr[1], value);
                        }
                    }

                } else {
                    template.find(EVENT_NS + '-' + key).html(value);
                }
            });
        },

        _getScrollbarSize: function() {
            // thx David
            if (mfp.scrollbarSize === undefined) {
                var scrollDiv = document.createElement("div");
                scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
                document.body.appendChild(scrollDiv);
                mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
                document.body.removeChild(scrollDiv);
            }
            return mfp.scrollbarSize;
        }

    }; /* MagnificPopup core prototype end */




    /**
     * Public static functions
     */
    $.magnificPopup = {
        instance: null,
        proto: MagnificPopup.prototype,
        modules: [],

        open: function(options, index) {
            _checkInstance();

            if (!options) {
                options = {};
            } else {
                options = $.extend(true, {}, options);
            }

            options.isObj = true;
            options.index = index || 0;
            return this.instance.open(options);
        },

        close: function() {
            return $.magnificPopup.instance && $.magnificPopup.instance.close();
        },

        registerModule: function(name, module) {
            if (module.options) {
                $.magnificPopup.defaults[name] = module.options;
            }
            $.extend(this.proto, module.proto);
            this.modules.push(name);
        },

        defaults: {

            // Info about options is in docs:
            // http://dimsemenov.com/plugins/magnific-popup/documentation.html#options

            disableOn: 0,

            key: null,

            midClick: false,

            mainClass: '',

            preloader: true,

            focus: '', // CSS selector of input to focus after popup is opened

            closeOnContentClick: false,

            closeOnBgClick: true,

            closeBtnInside: true,

            showCloseBtn: true,

            enableEscapeKey: true,

            modal: false,

            alignTop: false,

            removalDelay: 0,

            prependTo: null,

            fixedContentPos: 'auto',

            fixedBgPos: 'auto',

            overflowY: 'auto',

            closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',

            tClose: 'Close (Esc)',

            tLoading: 'Loading...',

            autoFocusLast: true

        }
    };



    $.fn.magnificPopup = function(options) {
        _checkInstance();

        var jqEl = $(this);

        // We call some API method of first param is a string
        if (typeof options === "string") {

            if (options === 'open') {
                var items,
                    itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,
                    index = parseInt(arguments[1], 10) || 0;

                if (itemOpts.items) {
                    items = itemOpts.items[index];
                } else {
                    items = jqEl;
                    if (itemOpts.delegate) {
                        items = items.find(itemOpts.delegate);
                    }
                    items = items.eq(index);
                }
                mfp._openClick({
                    mfpEl: items
                }, jqEl, itemOpts);
            } else {
                if (mfp.isOpen)
                    mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
            }

        } else {
            // clone options obj
            options = $.extend(true, {}, options);

            /*
             * As Zepto doesn't support .data() method for objects
             * and it works only in normal browsers
             * we assign "options" object directly to the DOM element. FTW!
             */
            if (_isJQ) {
                jqEl.data('magnificPopup', options);
            } else {
                jqEl[0].magnificPopup = options;
            }

            mfp.addGroup(jqEl, options);

        }
        return jqEl;
    };

    /*>>core*/

    /*>>inline*/

    var INLINE_NS = 'inline',
        _hiddenClass,
        _inlinePlaceholder,
        _lastInlineElement,
        _putInlineElementsBack = function() {
            if (_lastInlineElement) {
                _inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();
                _lastInlineElement = null;
            }
        };

    $.magnificPopup.registerModule(INLINE_NS, {
        options: {
            hiddenClass: 'hide', // will be appended with `mfp-` prefix
            markup: '',
            tNotFound: 'Content not found'
        },
        proto: {

            initInline: function() {
                mfp.types.push(INLINE_NS);

                _mfpOn(CLOSE_EVENT + '.' + INLINE_NS, function() {
                    _putInlineElementsBack();
                });
            },

            getInline: function(item, template) {

                _putInlineElementsBack();

                if (item.src) {
                    var inlineSt = mfp.st.inline,
                        el = $(item.src);

                    if (el.length) {

                        // If target element has parent - we replace it with placeholder and put it back after popup is closed
                        var parent = el[0].parentNode;
                        if (parent && parent.tagName) {
                            if (!_inlinePlaceholder) {
                                _hiddenClass = inlineSt.hiddenClass;
                                _inlinePlaceholder = _getEl(_hiddenClass);
                                _hiddenClass = 'mfp-' + _hiddenClass;
                            }
                            // replace target inline element with placeholder
                            _lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
                        }

                        mfp.updateStatus('ready');
                    } else {
                        mfp.updateStatus('error', inlineSt.tNotFound);
                        el = $('<div>');
                    }

                    item.inlineElement = el;
                    return el;
                }

                mfp.updateStatus('ready');
                mfp._parseMarkup(template, {}, item);
                return template;
            }
        }
    });

    /*>>inline*/

    /*>>ajax*/
    var AJAX_NS = 'ajax',
        _ajaxCur,
        _removeAjaxCursor = function() {
            if (_ajaxCur) {
                $(document.body).removeClass(_ajaxCur);
            }
        },
        _destroyAjaxRequest = function() {
            _removeAjaxCursor();
            if (mfp.req) {
                mfp.req.abort();
            }
        };

    $.magnificPopup.registerModule(AJAX_NS, {

        options: {
            settings: null,
            cursor: 'mfp-ajax-cur',
            tError: '<a href="%url%">The content</a> could not be loaded.'
        },

        proto: {
            initAjax: function() {
                mfp.types.push(AJAX_NS);
                _ajaxCur = mfp.st.ajax.cursor;

                _mfpOn(CLOSE_EVENT + '.' + AJAX_NS, _destroyAjaxRequest);
                _mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);
            },
            getAjax: function(item) {

                if (_ajaxCur) {
                    $(document.body).addClass(_ajaxCur);
                }

                mfp.updateStatus('loading');

                var opts = $.extend({
                    url: item.src,
                    success: function(data, textStatus, jqXHR) {
                        var temp = {
                            data: data,
                            xhr: jqXHR
                        };

                        _mfpTrigger('ParseAjax', temp);

                        mfp.appendContent($(temp.data), AJAX_NS);

                        item.finished = true;

                        _removeAjaxCursor();

                        mfp._setFocus();

                        setTimeout(function() {
                            mfp.wrap.addClass(READY_CLASS);
                        }, 16);

                        mfp.updateStatus('ready');

                        _mfpTrigger('AjaxContentAdded');
                    },
                    error: function() {
                        _removeAjaxCursor();
                        item.finished = item.loadError = true;
                        mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));
                    }
                }, mfp.st.ajax.settings);

                mfp.req = $.ajax(opts);

                return '';
            }
        }
    });

    /*>>ajax*/

    /*>>image*/
    var _imgInterval,
        _getTitle = function(item) {
            if (item.data && item.data.title !== undefined)
                return item.data.title;

            var src = mfp.st.image.titleSrc;

            if (src) {
                if ($.isFunction(src)) {
                    return src.call(mfp, item);
                } else if (item.el) {
                    return item.el.attr(src) || '';
                }
            }
            return '';
        };

    $.magnificPopup.registerModule('image', {

        options: {
            markup: '<div class="mfp-figure">' +
                '<div class="mfp-close"></div>' +
                '<figure>' +
                '<div class="mfp-img"></div>' +
                '<figcaption>' +
                '<div class="mfp-bottom-bar">' +
                '<div class="mfp-title"></div>' +
                '<div class="mfp-counter"></div>' +
                '</div>' +
                '</figcaption>' +
                '</figure>' +
                '</div>',
            cursor: 'mfp-zoom-out-cur',
            titleSrc: 'title',
            verticalFit: true,
            tError: '<a href="%url%">The image</a> could not be loaded.'
        },

        proto: {
            initImage: function() {
                var imgSt = mfp.st.image,
                    ns = '.image';

                mfp.types.push('image');

                _mfpOn(OPEN_EVENT + ns, function() {
                    if (mfp.currItem.type === 'image' && imgSt.cursor) {
                        $(document.body).addClass(imgSt.cursor);
                    }
                });

                _mfpOn(CLOSE_EVENT + ns, function() {
                    if (imgSt.cursor) {
                        $(document.body).removeClass(imgSt.cursor);
                    }
                    _window.off('resize' + EVENT_NS);
                });

                _mfpOn('Resize' + ns, mfp.resizeImage);
                if (mfp.isLowIE) {
                    _mfpOn('AfterChange', mfp.resizeImage);
                }
            },
            resizeImage: function() {
                var item = mfp.currItem;
                if (!item || !item.img) return;

                if (mfp.st.image.verticalFit) {
                    var decr = 0;
                    // fix box-sizing in ie7/8
                    if (mfp.isLowIE) {
                        decr = parseInt(item.img.css('padding-top'), 10) + parseInt(item.img.css('padding-bottom'), 10);
                    }
                    item.img.css('max-height', mfp.wH - decr);
                }
            },
            _onImageHasSize: function(item) {
                if (item.img) {

                    item.hasSize = true;

                    if (_imgInterval) {
                        clearInterval(_imgInterval);
                    }

                    item.isCheckingImgSize = false;

                    _mfpTrigger('ImageHasSize', item);

                    if (item.imgHidden) {
                        if (mfp.content)
                            mfp.content.removeClass('mfp-loading');

                        item.imgHidden = false;
                    }

                }
            },

            /**
             * Function that loops until the image has size to display elements that rely on it asap
             */
            findImageSize: function(item) {

                var counter = 0,
                    img = item.img[0],
                    mfpSetInterval = function(delay) {

                        if (_imgInterval) {
                            clearInterval(_imgInterval);
                        }
                        // decelerating interval that checks for size of an image
                        _imgInterval = setInterval(function() {
                            if (img.naturalWidth > 0) {
                                mfp._onImageHasSize(item);
                                return;
                            }

                            if (counter > 200) {
                                clearInterval(_imgInterval);
                            }

                            counter++;
                            if (counter === 3) {
                                mfpSetInterval(10);
                            } else if (counter === 40) {
                                mfpSetInterval(50);
                            } else if (counter === 100) {
                                mfpSetInterval(500);
                            }
                        }, delay);
                    };

                mfpSetInterval(1);
            },

            getImage: function(item, template) {

                var guard = 0,

                    // image load complete handler
                    onLoadComplete = function() {
                        if (item) {
                            if (item.img[0].complete) {
                                item.img.off('.mfploader');

                                if (item === mfp.currItem) {
                                    mfp._onImageHasSize(item);

                                    mfp.updateStatus('ready');
                                }

                                item.hasSize = true;
                                item.loaded = true;

                                _mfpTrigger('ImageLoadComplete');

                            } else {
                                // if image complete check fails 200 times (20 sec), we assume that there was an error.
                                guard++;
                                if (guard < 200) {
                                    setTimeout(onLoadComplete, 100);
                                } else {
                                    onLoadError();
                                }
                            }
                        }
                    },

                    // image error handler
                    onLoadError = function() {
                        if (item) {
                            item.img.off('.mfploader');
                            if (item === mfp.currItem) {
                                mfp._onImageHasSize(item);
                                mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
                            }

                            item.hasSize = true;
                            item.loaded = true;
                            item.loadError = true;
                        }
                    },
                    imgSt = mfp.st.image;


                var el = template.find('.mfp-img');
                if (el.length) {
                    var img = document.createElement('img');
                    img.className = 'mfp-img';
                    if (item.el && item.el.find('img').length) {
                        img.alt = item.el.find('img').attr('alt');
                    }
                    item.img = $(img).on('load.mfploader', onLoadComplete).on('error.mfploader', onLoadError);
                    img.src = item.src;

                    // without clone() "error" event is not firing when IMG is replaced by new IMG
                    // TODO: find a way to avoid such cloning
                    if (el.is('img')) {
                        item.img = item.img.clone();
                    }

                    img = item.img[0];
                    if (img.naturalWidth > 0) {
                        item.hasSize = true;
                    } else if (!img.width) {
                        item.hasSize = false;
                    }
                }

                mfp._parseMarkup(template, {
                    title: _getTitle(item),
                    img_replaceWith: item.img
                }, item);

                mfp.resizeImage();

                if (item.hasSize) {
                    if (_imgInterval) clearInterval(_imgInterval);

                    if (item.loadError) {
                        template.addClass('mfp-loading');
                        mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
                    } else {
                        template.removeClass('mfp-loading');
                        mfp.updateStatus('ready');
                    }
                    return template;
                }

                mfp.updateStatus('loading');
                item.loading = true;

                if (!item.hasSize) {
                    item.imgHidden = true;
                    template.addClass('mfp-loading');
                    mfp.findImageSize(item);
                }

                return template;
            }
        }
    });

    /*>>image*/

    /*>>zoom*/
    var hasMozTransform,
        getHasMozTransform = function() {
            if (hasMozTransform === undefined) {
                hasMozTransform = document.createElement('p').style.MozTransform !== undefined;
            }
            return hasMozTransform;
        };

    $.magnificPopup.registerModule('zoom', {

        options: {
            enabled: false,
            easing: 'ease-in-out',
            duration: 300,
            opener: function(element) {
                return element.is('img') ? element : element.find('img');
            }
        },

        proto: {

            initZoom: function() {
                var zoomSt = mfp.st.zoom,
                    ns = '.zoom',
                    image;

                if (!zoomSt.enabled || !mfp.supportsTransition) {
                    return;
                }

                var duration = zoomSt.duration,
                    getElToAnimate = function(image) {
                        var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),
                            transition = 'all ' + (zoomSt.duration / 1000) + 's ' + zoomSt.easing,
                            cssObj = {
                                position: 'fixed',
                                zIndex: 9999,
                                left: 0,
                                top: 0,
                                '-webkit-backface-visibility': 'hidden'
                            },
                            t = 'transition';

                        cssObj['-webkit-' + t] = cssObj['-moz-' + t] = cssObj['-o-' + t] = cssObj[t] = transition;

                        newImg.css(cssObj);
                        return newImg;
                    },
                    showMainContent = function() {
                        mfp.content.css('visibility', 'visible');
                    },
                    openTimeout,
                    animatedImg;

                _mfpOn('BuildControls' + ns, function() {
                    if (mfp._allowZoom()) {

                        clearTimeout(openTimeout);
                        mfp.content.css('visibility', 'hidden');

                        // Basically, all code below does is clones existing image, puts in on top of the current one and animated it

                        image = mfp._getItemToZoom();

                        if (!image) {
                            showMainContent();
                            return;
                        }

                        animatedImg = getElToAnimate(image);

                        animatedImg.css(mfp._getOffset());

                        mfp.wrap.append(animatedImg);

                        openTimeout = setTimeout(function() {
                            animatedImg.css(mfp._getOffset(true));
                            openTimeout = setTimeout(function() {

                                showMainContent();

                                setTimeout(function() {
                                    animatedImg.remove();
                                    image = animatedImg = null;
                                    _mfpTrigger('ZoomAnimationEnded');
                                }, 16); // avoid blink when switching images

                            }, duration); // this timeout equals animation duration

                        }, 16); // by adding this timeout we avoid short glitch at the beginning of animation


                        // Lots of timeouts...
                    }
                });
                _mfpOn(BEFORE_CLOSE_EVENT + ns, function() {
                    if (mfp._allowZoom()) {

                        clearTimeout(openTimeout);

                        mfp.st.removalDelay = duration;

                        if (!image) {
                            image = mfp._getItemToZoom();
                            if (!image) {
                                return;
                            }
                            animatedImg = getElToAnimate(image);
                        }

                        animatedImg.css(mfp._getOffset(true));
                        mfp.wrap.append(animatedImg);
                        mfp.content.css('visibility', 'hidden');

                        setTimeout(function() {
                            animatedImg.css(mfp._getOffset());
                        }, 16);
                    }

                });

                _mfpOn(CLOSE_EVENT + ns, function() {
                    if (mfp._allowZoom()) {
                        showMainContent();
                        if (animatedImg) {
                            animatedImg.remove();
                        }
                        image = null;
                    }
                });
            },

            _allowZoom: function() {
                return mfp.currItem.type === 'image';
            },

            _getItemToZoom: function() {
                if (mfp.currItem.hasSize) {
                    return mfp.currItem.img;
                } else {
                    return false;
                }
            },

            // Get element postion relative to viewport
            _getOffset: function(isLarge) {
                var el;
                if (isLarge) {
                    el = mfp.currItem.img;
                } else {
                    el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
                }

                var offset = el.offset();
                var paddingTop = parseInt(el.css('padding-top'), 10);
                var paddingBottom = parseInt(el.css('padding-bottom'), 10);
                offset.top -= ($(window).scrollTop() - paddingTop);


                /*

                Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.

                 */
                var obj = {
                    width: el.width(),
                    // fix Zepto height+padding issue
                    height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
                };

                // I hate to do this, but there is no another option
                if (getHasMozTransform()) {
                    obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';
                } else {
                    obj.left = offset.left;
                    obj.top = offset.top;
                }
                return obj;
            }

        }
    });



    /*>>zoom*/

    /*>>iframe*/

    var IFRAME_NS = 'iframe',
        _emptyPage = '//about:blank',

        _fixIframeBugs = function(isShowing) {
            if (mfp.currTemplate[IFRAME_NS]) {
                var el = mfp.currTemplate[IFRAME_NS].find('iframe');
                if (el.length) {
                    // reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
                    if (!isShowing) {
                        el[0].src = _emptyPage;
                    }

                    // IE8 black screen bug fix
                    if (mfp.isIE8) {
                        el.css('display', isShowing ? 'block' : 'none');
                    }
                }
            }
        };

    $.magnificPopup.registerModule(IFRAME_NS, {

        options: {
            markup: '<div class="mfp-iframe-scaler">' +
                '<div class="mfp-close"></div>' +
                '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>' +
                '</div>',

            srcAction: 'iframe_src',

            // we don't care and support only one default type of URL by default
            patterns: {
                youtube: {
                    index: 'youtube.com',
                    id: 'v=',
                    src: '//www.youtube.com/embed/%id%?autoplay=1'
                },
                vimeo: {
                    index: 'vimeo.com/',
                    id: '/',
                    src: '//player.vimeo.com/video/%id%?autoplay=1'
                },
                gmaps: {
                    index: '//maps.google.',
                    src: '%id%&output=embed'
                }
            }
        },

        proto: {
            initIframe: function() {
                mfp.types.push(IFRAME_NS);

                _mfpOn('BeforeChange', function(e, prevType, newType) {
                    if (prevType !== newType) {
                        if (prevType === IFRAME_NS) {
                            _fixIframeBugs(); // iframe if removed
                        } else if (newType === IFRAME_NS) {
                            _fixIframeBugs(true); // iframe is showing
                        }
                    } // else {
                    // iframe source is switched, don't do anything
                    //}
                });

                _mfpOn(CLOSE_EVENT + '.' + IFRAME_NS, function() {
                    _fixIframeBugs();
                });
            },

            getIframe: function(item, template) {
                var embedSrc = item.src;
                var iframeSt = mfp.st.iframe;

                $.each(iframeSt.patterns, function() {
                    if (embedSrc.indexOf(this.index) > -1) {
                        if (this.id) {
                            if (typeof this.id === 'string') {
                                embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length);
                            } else {
                                embedSrc = this.id.call(this, embedSrc);
                            }
                        }
                        embedSrc = this.src.replace('%id%', embedSrc);
                        return false; // break;
                    }
                });

                var dataObj = {};
                if (iframeSt.srcAction) {
                    dataObj[iframeSt.srcAction] = embedSrc;
                }
                mfp._parseMarkup(template, dataObj, item);

                mfp.updateStatus('ready');

                return template;
            }
        }
    });



    /*>>iframe*/

    /*>>gallery*/
    /**
     * Get looped index depending on number of slides
     */
    var _getLoopedId = function(index) {
            var numSlides = mfp.items.length;
            if (index > numSlides - 1) {
                return index - numSlides;
            } else if (index < 0) {
                return numSlides + index;
            }
            return index;
        },
        _replaceCurrTotal = function(text, curr, total) {
            return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
        };

    $.magnificPopup.registerModule('gallery', {

        options: {
            enabled: false,
            arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
            preload: [0, 2],
            navigateByImgClick: true,
            arrows: true,

            tPrev: 'Previous (Left arrow key)',
            tNext: 'Next (Right arrow key)',
            tCounter: '%curr% of %total%'
        },

        proto: {
            initGallery: function() {

                var gSt = mfp.st.gallery,
                    ns = '.mfp-gallery';

                mfp.direction = true; // true - next, false - prev

                if (!gSt || !gSt.enabled) return false;

                _wrapClasses += ' mfp-gallery';

                _mfpOn(OPEN_EVENT + ns, function() {

                    if (gSt.navigateByImgClick) {
                        mfp.wrap.on('click' + ns, '.mfp-img', function() {
                            if (mfp.items.length > 1) {
                                mfp.next();
                                return false;
                            }
                        });
                    }

                    _document.on('keydown' + ns, function(e) {
                        if (e.keyCode === 37) {
                            mfp.prev();
                        } else if (e.keyCode === 39) {
                            mfp.next();
                        }
                    });
                });

                _mfpOn('UpdateStatus' + ns, function(e, data) {
                    if (data.text) {
                        data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);
                    }
                });

                _mfpOn(MARKUP_PARSE_EVENT + ns, function(e, element, values, item) {
                    var l = mfp.items.length;
                    values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : '';
                });

                _mfpOn('BuildControls' + ns, function() {
                    if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
                        var markup = gSt.arrowMarkup,
                            arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, 'left')).addClass(PREVENT_CLOSE_CLASS),
                            arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, 'right')).addClass(PREVENT_CLOSE_CLASS);

                        arrowLeft.click(function() {
                            mfp.prev();
                        });
                        arrowRight.click(function() {
                            mfp.next();
                        });

                        mfp.container.append(arrowLeft.add(arrowRight));
                    }
                });

                _mfpOn(CHANGE_EVENT + ns, function() {
                    if (mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);

                    mfp._preloadTimeout = setTimeout(function() {
                        mfp.preloadNearbyImages();
                        mfp._preloadTimeout = null;
                    }, 16);
                });


                _mfpOn(CLOSE_EVENT + ns, function() {
                    _document.off(ns);
                    mfp.wrap.off('click' + ns);
                    mfp.arrowRight = mfp.arrowLeft = null;
                });

            },
            next: function() {
                mfp.direction = true;
                mfp.index = _getLoopedId(mfp.index + 1);
                mfp.updateItemHTML();
            },
            prev: function() {
                mfp.direction = false;
                mfp.index = _getLoopedId(mfp.index - 1);
                mfp.updateItemHTML();
            },
            goTo: function(newIndex) {
                mfp.direction = (newIndex >= mfp.index);
                mfp.index = newIndex;
                mfp.updateItemHTML();
            },
            preloadNearbyImages: function() {
                var p = mfp.st.gallery.preload,
                    preloadBefore = Math.min(p[0], mfp.items.length),
                    preloadAfter = Math.min(p[1], mfp.items.length),
                    i;

                for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
                    mfp._preloadItem(mfp.index + i);
                }
                for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
                    mfp._preloadItem(mfp.index - i);
                }
            },
            _preloadItem: function(index) {
                index = _getLoopedId(index);

                if (mfp.items[index].preloaded) {
                    return;
                }

                var item = mfp.items[index];
                if (!item.parsed) {
                    item = mfp.parseEl(index);
                }

                _mfpTrigger('LazyLoad', item);

                if (item.type === 'image') {
                    item.img = $('<img class="mfp-img" />').on('load.mfploader', function() {
                        item.hasSize = true;
                    }).on('error.mfploader', function() {
                        item.hasSize = true;
                        item.loadError = true;
                        _mfpTrigger('LazyLoadError', item);
                    }).attr('src', item.src);
                }


                item.preloaded = true;
            }
        }
    });

    /*>>gallery*/

    /*>>retina*/

    var RETINA_NS = 'retina';

    $.magnificPopup.registerModule(RETINA_NS, {
        options: {
            replaceSrc: function(item) {
                return item.src.replace(/\.\w+$/, function(m) {
                    return '@2x' + m;
                });
            },
            ratio: 1 // Function or number.  Set to 1 to disable.
        },
        proto: {
            initRetina: function() {
                if (window.devicePixelRatio > 1) {

                    var st = mfp.st.retina,
                        ratio = st.ratio;

                    ratio = !isNaN(ratio) ? ratio : ratio();

                    if (ratio > 1) {
                        _mfpOn('ImageHasSize' + '.' + RETINA_NS, function(e, item) {
                            item.img.css({
                                'max-width': item.img[0].naturalWidth / ratio,
                                'width': '100%'
                            });
                        });
                        _mfpOn('ElementParse' + '.' + RETINA_NS, function(e, item) {
                            item.src = st.replaceSrc(item, ratio);
                        });
                    }
                }

            }
        }
    });

    /*>>retina*/
    _checkInstance();
}));
/**
 * Plugin: jquery.zWeatherFeed
 * 
 * Version: 1.3.1
 * (c) Copyright 2011-2015, Zazar Ltd
 * 
 * Description: jQuery plugin for display of Yahoo! Weather feeds
 * 
 * History:
 * 1.3.1 - Forecast day option and background image code fix (credit to Romiko)
 * 1.3.0 - Added refresh timer
 * 1.2.1 - Handle invalid locations
 * 1.2.0 - Added forecast data option
 * 1.1.0 - Added user callback function
 *         New option to use WOEID identifiers
 *         New day/night CSS class for feed items
 *         Updated full forecast link to feed link location
 * 1.0.3 - Changed full forecast link to Weather Channel due to invalid Yahoo! link
	   Add 'linktarget' option for forecast link
 * 1.0.2 - Correction to options / link
 * 1.0.1 - Added hourly caching to YQL to avoid rate limits
 *         Uses Weather Channel location ID and not Yahoo WOEID
 *         Displays day or night background images
 **/

(function($) {

    $.fn.weatherfeed = function(locations, options, fn) {

        // Set plugin defaults
        var defaults = {
            unit: 'c',
            image: true,
            country: false,
            highlow: true,
            wind: true,
            humidity: false,
            visibility: false,
            sunrise: false,
            sunset: false,
            forecast: false,
            forecastdays: 5,
            link: true,
            showerror: true,
            linktarget: '_self',
            woeid: false,
            refresh: 0
        };
        var options = $.extend(defaults, options);
        var row = 'odd';

        // Functions
        return this.each(function(i, e) {
            var $e = $(e);

            // Add feed class to user div
            if (!$e.hasClass('weatherFeed')) $e.addClass('weatherFeed');

            // Check and append locations
            if (!$.isArray(locations)) return false;

            var count = locations.length;
            if (count > 10) count = 10;

            var locationid = '';

            for (var i = 0; i < count; i++) {
                if (locationid != '') locationid += ',';
                locationid += "'" + locations[i] + "'";
            }

            // Cache results for an hour to prevent overuse
            now = new Date();

            // Select location ID type
            var queryType = options.woeid ? 'woeid' : 'location';

            // Create Yahoo Weather feed API address
            // IMPORTANT: Updating locationid with cityname since the Yahoo api changed which caused this widget to crash
            // Old: var query = "select * from weather.forecast where "+ queryType +" in ("+ locationid +") and u='"+ options.unit +"'";
            var query = "select * from weather.forecast where woeid in (select woeid from geo.places(1) where text=" + locationid + ") and u='" + options.unit + "'";
            var api = 'https://query.yahooapis.com/v1/public/yql?q=' + encodeURIComponent(query) + '&rnd=' + now.getFullYear() + now.getMonth() + now.getDay() + now.getHours() + '&format=json&callback=?';

            // Request feed data
            sendRequest(query, api, options);

            if (options.refresh > 0) {

                // Set timer interval for scrolling		
                var interval = setInterval(function() {
                    sendRequest(query, api, options);
                }, options.refresh * 60000);
            }

            // Function to gather new weather data
            function sendRequest(query, api, options) {

                // Reset odd and even classes
                row = 'odd';

                // Clear user div
                $e.html('');

                $.ajax({
                    type: 'GET',
                    url: api,
                    dataType: 'json',
                    success: function(data) {

                        if (data.query) {

                            if (data.query.results.channel.length > 0) {

                                // Multiple locations
                                var result = data.query.results.channel.length;
                                for (var i = 0; i < result; i++) {

                                    // Create weather feed item
                                    _process(e, data.query.results.channel[i], options);
                                }
                            } else {

                                // Single location only
                                _process(e, data.query.results.channel, options);
                            }

                            // Optional user callback function
                            if ($.isFunction(fn)) fn.call(this, $e);

                        } else {
                            if (options.showerror) $e.html('<p>Weather information unavailable</p>');
                        }
                    },
                    error: function(data) {
                        if (options.showerror) $e.html('<p>Weather request failed</p>');
                    }
                });
            };

            // Function to each feed item
            var _process = function(e, feed, options) {
                var $e = $(e);

                // Check for invalid location
                if (feed.description != 'Yahoo! Weather Error') {

                    // Format feed items
                    var wd = feed.wind.direction;
                    if (wd >= 348.75 && wd <= 360) {
                        wd = "N"
                    };
                    if (wd >= 0 && wd < 11.25) {
                        wd = "N"
                    };
                    if (wd >= 11.25 && wd < 33.75) {
                        wd = "NNE"
                    };
                    if (wd >= 33.75 && wd < 56.25) {
                        wd = "NE"
                    };
                    if (wd >= 56.25 && wd < 78.75) {
                        wd = "ENE"
                    };
                    if (wd >= 78.75 && wd < 101.25) {
                        wd = "E"
                    };
                    if (wd >= 101.25 && wd < 123.75) {
                        wd = "ESE"
                    };
                    if (wd >= 123.75 && wd < 146.25) {
                        wd = "SE"
                    };
                    if (wd >= 146.25 && wd < 168.75) {
                        wd = "SSE"
                    };
                    if (wd >= 168.75 && wd < 191.25) {
                        wd = "S"
                    };
                    if (wd >= 191.25 && wd < 213.75) {
                        wd = "SSW"
                    };
                    if (wd >= 213.75 && wd < 236.25) {
                        wd = "SW"
                    };
                    if (wd >= 236.25 && wd < 258.75) {
                        wd = "WSW"
                    };
                    if (wd >= 258.75 && wd < 281.25) {
                        wd = "W"
                    };
                    if (wd >= 281.25 && wd < 303.75) {
                        wd = "WNW"
                    };
                    if (wd >= 303.75 && wd < 326.25) {
                        wd = "NW"
                    };
                    if (wd >= 326.25 && wd < 348.75) {
                        wd = "NNW"
                    };
                    var wf = feed.item.forecast[0];

                    // Determine day or night image
                    wpd = feed.item.pubDate;
                    n = wpd.indexOf(":");
                    tpb = _getTimeAsDate(wpd.substr(n - 2, 8));
                    tsr = _getTimeAsDate(feed.astronomy.sunrise);
                    tss = _getTimeAsDate(feed.astronomy.sunset);

                    // Get night or day
                    if (tpb > tsr && tpb < tss) {
                        daynight = 'day';
                    } else {
                        daynight = 'night';
                    }

                    // Add item container
                    var html = '<div class="weatherItem ' + row + ' ' + daynight + '"';
                    if (options.image) html += ' style="background-image: url(https://s.yimg.com/zz/combo?a/i/us/nws/weather/gr/' + feed.item.condition.code.substring(0, 2) + daynight.substring(0, 1) + '.png); background-repeat: no-repeat;"';
                    html += '>';

                    // Add item data
                    html += '<div class="weatherCity">' + feed.location.city + '</div>';
                    if (options.country) html += '<div class="weatherCountry">' + feed.location.country + '</div>';
                    html += '<div class="weatherTemp">' + feed.item.condition.temp + '&deg;</div>';
                    html += '<div class="weatherDesc">' + feed.item.condition.text + '</div>';

                    // Add optional data
                    if (options.highlow) html += '<div class="weatherRange">High: ' + wf.high + '&deg; Low: ' + wf.low + '&deg;</div>';
                    if (options.wind) html += '<div class="weatherWind">Wind: ' + wd + ' ' + feed.wind.speed + feed.units.speed + '</div>';
                    if (options.humidity) html += '<div class="weatherHumidity">Humidity: ' + feed.atmosphere.humidity + '</div>';
                    if (options.visibility) html += '<div class="weatherVisibility">Visibility: ' + feed.atmosphere.visibility + '</div>';
                    if (options.sunrise) html += '<div class="weatherSunrise">Sunrise: ' + feed.astronomy.sunrise + '</div>';
                    if (options.sunset) html += '<div class="weatherSunset">Sunset: ' + feed.astronomy.sunset + '</div>';

                    // Add item forecast data
                    if (options.forecast) {

                        html += '<div class="weatherForecast">';

                        var wfi = feed.item.forecast;
                        var wfid = options.forecastdays;
                        if (wfid > wfi.length) wfid = wfi.length;

                        for (var i = 0; i < wfid; i++) {
                            html += '<div class="weatherForecastItem day' + (i + 1) + '" style="background-image: url(https://s.yimg.com/zz/combo?a/i/us/nws/weather/gr/' + wfi[i].code + 's.png); background-repeat: no-repeat;">';
                            html += '<div class="weatherForecastDay">' + wfi[i].day + '</div>';
                            html += '<div class="weatherForecastDate">' + wfi[i].date + '</div>';
                            html += '<div class="weatherForecastText">' + wfi[i].text + '</div>';
                            html += '<div class="weatherForecastRange">High: ' + wfi[i].high + ' Low: ' + wfi[i].low + '</div>';
                            html += '</div>'
                        }

                        html += '</div>'
                    }

                    if (options.link) html += '<div class="weatherLink"><a href="' + feed.link + '" target="' + options.linktarget + '" title="Read full forecast">Full forecast</a></div>';

                } else {
                    var html = '<div class="weatherItem ' + row + '">';
                    html += '<div class="weatherError">City not found</div>';
                }

                html += '</div>';

                // Alternate row classes
                if (row == 'odd') {
                    row = 'even';
                } else {
                    row = 'odd';
                }

                // Apply new weather content
                $e.append(html);
            };

            // Get time string as date
            var _getTimeAsDate = function(t) {

                d = new Date();
                r = new Date(d.toDateString() + ' ' + t);

                return r;
            };

        });
    };

})(jQuery);
var onform = false; // Added for Booking Form closing
var focusform = false; // Added for Booking Form closing
var timer; // Added for Booking Form closing
var clicktrack = false;
var accordionopen = false;
var calWidth = 50; //222;
var interval;
var interval1;
var flag = false;

if ("ontouchstart" in document.documentElement) {
    $('body').addClass('touch')
} else {
    $('body').addClass('no-touch')
}

//JssorSlider
var slideshowTransitions = {
    "Fade": [{
        $Duration: 800,
        $Opacity: 2
    }],
    "FadeinL": [{
        $Duration: 800,
        x: 0.3,
        $During: {
            $Left: [0.3, 0.7]
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeinR": [{
        $Duration: 800,
        x: -0.3,
        $During: {
            $Left: [0.3, 0.7]
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeinT": [{
        $Duration: 800,
        y: 0.3,
        $During: {
            $Top: [0.3, 0.7]
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeinB": [{
        $Duration: 800,
        y: -0.3,
        $During: {
            $Top: [0.3, 0.7]
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeinLR": [{
        $Duration: 800,
        x: 0.3,
        $Cols: 2,
        $During: {
            $Left: [0.3, 0.7]
        },
        $ChessMode: {
            $Column: 3
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeinLRChess": [{
        $Duration: 800,
        y: 0.3,
        $Cols: 2,
        $During: {
            $Top: [0.3, 0.7]
        },
        $ChessMode: {
            $Column: 12
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeinTB": [{
        $Duration: 800,
        y: 0.3,
        $Rows: 2,
        $During: {
            $Top: [0.3, 0.7]
        },
        $ChessMode: {
            $Row: 12
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeinTBChess": [{
        $Duration: 800,
        x: 0.3,
        $Rows: 2,
        $During: {
            $Left: [0.3, 0.7]
        },
        $ChessMode: {
            $Row: 3
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeinCorners": [{
        $Duration: 800,
        x: 0.3,
        y: 0.3,
        $Cols: 2,
        $Rows: 2,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $ChessMode: {
            $Column: 3,
            $Row: 12
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeoutL": [{
        $Duration: 800,
        x: 0.3,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeoutR": [{
        $Duration: 800,
        x: -0.3,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeoutT": [{
        $Duration: 800,
        y: 0.3,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeoutB": [{
        $Duration: 800,
        y: -0.3,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeoutLR": [{
        $Duration: 800,
        x: 0.3,
        $Cols: 2,
        $SlideOut: true,
        $ChessMode: {
            $Column: 3
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeoutLRChess": [{
        $Duration: 800,
        y: -0.3,
        $Cols: 2,
        $SlideOut: true,
        $ChessMode: {
            $Column: 12
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeoutTB": [{
        $Duration: 800,
        y: 0.3,
        $Rows: 2,
        $SlideOut: true,
        $ChessMode: {
            $Row: 12
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeoutTBChess": [{
        $Duration: 800,
        x: -0.3,
        $Rows: 2,
        $SlideOut: true,
        $ChessMode: {
            $Row: 3
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeoutCorners": [{
        $Duration: 800,
        x: 0.3,
        y: 0.3,
        $Cols: 2,
        $Rows: 2,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $ChessMode: {
            $Column: 3,
            $Row: 12
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeFlyinL": [{
        $Duration: 800,
        x: 0.3,
        $During: {
            $Left: [0.3, 0.7]
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyinR": [{
        $Duration: 800,
        x: -0.3,
        $During: {
            $Left: [0.3, 0.7]
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyinT": [{
        $Duration: 800,
        y: 0.3,
        $During: {
            $Top: [0.3, 0.7]
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyinB": [{
        $Duration: 800,
        y: -0.3,
        $During: {
            $Top: [0.3, 0.7]
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyinLR": [{
        $Duration: 800,
        x: 0.3,
        $Cols: 2,
        $During: {
            $Left: [0.3, 0.7]
        },
        $ChessMode: {
            $Column: 3
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyinLRChess": [{
        $Duration: 800,
        y: 0.3,
        $Cols: 2,
        $During: {
            $Top: [0.3, 0.7]
        },
        $ChessMode: {
            $Column: 12
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyinTB": [{
        $Duration: 800,
        y: 0.3,
        $Rows: 2,
        $During: {
            $Top: [0.3, 0.7]
        },
        $ChessMode: {
            $Row: 12
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyinTBChess": [{
        $Duration: 800,
        x: 0.3,
        $Rows: 2,
        $During: {
            $Left: [0.3, 0.7]
        },
        $ChessMode: {
            $Row: 3
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyinCorners": [{
        $Duration: 800,
        x: 0.3,
        y: 0.3,
        $Cols: 2,
        $Rows: 2,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $ChessMode: {
            $Column: 3,
            $Row: 12
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyoutL": [{
        $Duration: 800,
        x: 0.3,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyoutR": [{
        $Duration: 800,
        x: -0.3,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyoutT": [{
        $Duration: 800,
        y: 0.3,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyoutB": [{
        $Duration: 800,
        y: -0.3,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyoutLR": [{
        $Duration: 800,
        x: 0.3,
        $Cols: 2,
        $SlideOut: true,
        $ChessMode: {
            $Column: 3
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyoutLRChess": [{
        $Duration: 800,
        y: 0.3,
        $Cols: 2,
        $SlideOut: true,
        $ChessMode: {
            $Column: 12
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyoutTB": [{
        $Duration: 800,
        y: 0.3,
        $Rows: 2,
        $SlideOut: true,
        $ChessMode: {
            $Row: 12
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyoutTBChess": [{
        $Duration: 800,
        x: 0.3,
        $Rows: 2,
        $SlideOut: true,
        $ChessMode: {
            $Row: 3
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeFlyoutCorners": [{
        $Duration: 800,
        x: 0.3,
        y: 0.3,
        $Cols: 2,
        $Rows: 2,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $ChessMode: {
            $Column: 3,
            $Row: 12
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Outside: true
    }],
    "FadeClipinH": [{
        $Duration: 800,
        $Delay: 20,
        $Clip: 3,
        $Assembly: 260,
        $Easing: {
            $Clip: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeClipinV": [{
        $Duration: 800,
        $Delay: 20,
        $Clip: 12,
        $Assembly: 260,
        $Easing: {
            $Clip: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeClipoutH": [{
        $Duration: 800,
        $Delay: 20,
        $Clip: 3,
        $SlideOut: true,
        $Assembly: 260,
        $Easing: {
            $Clip: $Jease$.$OutCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeClipoutV": [{
        $Duration: 800,
        $Delay: 20,
        $Clip: 12,
        $SlideOut: true,
        $Assembly: 260,
        $Easing: {
            $Clip: $Jease$.$OutCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "FadeStairs": [{
        $Duration: 600,
        $Delay: 20,
        $Cols: 8,
        $Rows: 4,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 2050,
        $Opacity: 2
    }],
    "FadeRandom": [{
        $Duration: 600,
        $Delay: 60,
        $Cols: 8,
        $Rows: 4,
        $Opacity: 2
    }],
    "FadeSwirl": [{
        $Duration: 600,
        $Delay: 20,
        $Cols: 8,
        $Rows: 4,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Opacity: 2
    }],
    "FadeZigZag": [{
        $Duration: 600,
        $Delay: 20,
        $Cols: 8,
        $Rows: 4,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Opacity: 2
    }],
    "FadeTwins": [{
        $Duration: 700,
        $Opacity: 2,
        $Brother: {
            $Duration: 700,
            $Opacity: 2
        }
    }],
    "Rotateaway": [{
        $Duration: 800,
        $Zoom: 1,
        $Rotate: 0.5,
        $Easing: {
            $Rotate: $Jease$.$InSine,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 800,
            $Zoom: 11,
            $Rotate: -0.5,
            $Easing: {
                $Rotate: $Jease$.$InSine,
                $Zoom: $Jease$.$Swing
            },
            $Opacity: 2,
            $Shift: 200
        }
    }],
    "Rotateawayacw": [{
        $Duration: 800,
        $Zoom: 1,
        $Rotate: -0.5,
        $Easing: {
            $Rotate: $Jease$.$InSine,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 800,
            $Zoom: 11,
            $Rotate: 0.5,
            $Easing: {
                $Rotate: $Jease$.$InSine,
                $Zoom: $Jease$.$Swing
            },
            $Opacity: 2,
            $Shift: 200
        }
    }],
    "Rotateback": [{
        $Duration: 800,
        $Zoom: 11,
        $Rotate: 0.5,
        $Easing: {
            $Rotate: $Jease$.$InSine,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 800,
            $Zoom: 1,
            $Rotate: -0.5,
            $Easing: {
                $Rotate: $Jease$.$InSine,
                $Zoom: $Jease$.$Swing
            },
            $Opacity: 2,
            $Shift: 200
        }
    }],
    "Rotatebackacw": [{
        $Duration: 800,
        $Zoom: 11,
        $Rotate: -0.5,
        $Easing: {
            $Rotate: $Jease$.$InSine,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 800,
            $Zoom: 1,
            $Rotate: 0.5,
            $Easing: {
                $Rotate: $Jease$.$InSine,
                $Zoom: $Jease$.$Swing
            },
            $Opacity: 2,
            $Shift: 200
        }
    }],
    "Switch": [{
        $Duration: 800,
        x: 0.25,
        $Zoom: 1.5,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Zoom: $Jease$.$InCubic
        },
        $Opacity: 2,
        $ZIndex: -10,
        $Brother: {
            $Duration: 800,
            x: -0.25,
            $Zoom: 1.5,
            $Easing: {
                $Left: $Jease$.$InWave,
                $Zoom: $Jease$.$InCubic
            },
            $Opacity: 2,
            $ZIndex: -10
        }
    }],
    "RotateRelay": [{
        $Duration: 800,
        $Zoom: 11,
        $Rotate: 1,
        $Easing: {
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuad,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 1
        },
        $ZIndex: -10,
        $Brother: {
            $Duration: 800,
            $Zoom: 11,
            $Rotate: -1,
            $Easing: {
                $Opacity: $Jease$.$Linear,
                $Rotate: $Jease$.$InQuad,
                $Zoom: $Jease$.$Swing
            },
            $Opacity: 2,
            $Round: {
                $Rotate: 1
            },
            $ZIndex: -10,
            $Shift: 400
        }
    }],
    "RotateRelayacw": [{
        $Duration: 800,
        $Zoom: 11,
        $Rotate: -1,
        $Easing: {
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuad,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 1
        },
        $ZIndex: -10,
        $Brother: {
            $Duration: 800,
            $Zoom: 11,
            $Rotate: 1,
            $Easing: {
                $Opacity: $Jease$.$Linear,
                $Rotate: $Jease$.$InQuad,
                $Zoom: $Jease$.$Swing
            },
            $Opacity: 2,
            $Round: {
                $Rotate: 1
            },
            $ZIndex: -10,
            $Shift: 400
        }
    }],
    "Doors": [{
        $Duration: 1200,
        x: 0.5,
        $Cols: 2,
        $ChessMode: {
            $Column: 3
        },
        $Easing: {
            $Left: $Jease$.$InOutCubic
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 1200,
            $Opacity: 2
        }
    }],
    "Doorsclose": [{
        $Duration: 1200,
        $Opacity: 2,
        $Brother: {
            $Duration: 1200,
            x: 0.5,
            $Cols: 2,
            $ChessMode: {
                $Column: 3
            },
            $Easing: {
                $Left: $Jease$.$InOutCubic
            },
            $Opacity: 2
        }
    }],
    "Rotatein+out-": [{
        $Duration: 1000,
        x: -0.3,
        y: 0.5,
        $Zoom: 1,
        $Rotate: 0.1,
        $During: {
            $Left: [0.6, 0.4],
            $Top: [0.6, 0.4],
            $Rotate: [0.6, 0.4],
            $Zoom: [0.6, 0.4]
        },
        $Easing: {
            $Left: $Jease$.$InSine,
            $Top: $Jease$.$InSine,
            $Rotate: $Jease$.$InSine,
            $Zoom: $Jease$.$InSine
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 600,
            $Zoom: 11,
            $Rotate: -0.5,
            $Easing: {
                $Rotate: $Jease$.$InSine,
                $Zoom: $Jease$.$InSine
            },
            $Opacity: 2
        }
    }],
    "Rotatein-ou+": [{
        $Duration: 1000,
        x: -0.6,
        y: 1,
        $Zoom: 11,
        $Rotate: 0.1,
        $During: {
            $Left: [0.6, 0.4],
            $Top: [0.6, 0.4],
            $Rotate: [0.6, 0.4],
            $Zoom: [0.6, 0.4]
        },
        $Easing: {
            $Left: $Jease$.$InSine,
            $Top: $Jease$.$InSine,
            $Rotate: $Jease$.$InSine,
            $Zoom: $Jease$.$InSine
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 600,
            $Zoom: 1,
            $Rotate: -0.5,
            $Easing: {
                $Rotate: $Jease$.$InCubic,
                $Zoom: $Jease$.$InSine
            },
            $Opacity: 2
        }
    }],
    "FlyTwins": [{
        $Duration: 600,
        x: 0.3,
        $During: {
            $Left: [0.6, 0.4]
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 600,
            x: -0.3,
            $Easing: {
                $Left: $Jease$.$InCubic,
                $Opacity: $Jease$.$Linear
            },
            $Opacity: 2
        }
    }],
    "ChessReplaceTB": [{
        $Duration: 1000,
        x: 1,
        $Rows: 2,
        $ChessMode: {
            $Row: 3
        },
        $Easing: {
            $Left: $Jease$.$InOutQuart,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 1000,
            x: -1,
            $Rows: 2,
            $ChessMode: {
                $Row: 3
            },
            $Easing: {
                $Left: $Jease$.$InOutQuart,
                $Opacity: $Jease$.$Linear
            },
            $Opacity: 2
        }
    }],
    "ChessReplaceLR": [{
        $Duration: 1000,
        y: -1,
        $Cols: 2,
        $ChessMode: {
            $Column: 12
        },
        $Easing: {
            $Top: $Jease$.$InOutQuart,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 1000,
            y: 1,
            $Cols: 2,
            $ChessMode: {
                $Column: 12
            },
            $Easing: {
                $Top: $Jease$.$InOutQuart,
                $Opacity: $Jease$.$Linear
            },
            $Opacity: 2
        }
    }],
    "Zoomback": [{
        $Duration: 800,
        $Zoom: 11,
        $Easing: {
            $Zoom: $Jease$.$InOutExpo
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 600,
            $Zoom: 1.5,
            $Easing: {
                $Zoom: $Jease$.$InOutExpo
            },
            $Opacity: 2,
            $Shift: -100
        }
    }],
    "Zoomaway": [{
        $Duration: 800,
        $Zoom: 1.9,
        $Easing: {
            $Zoom: $Jease$.$InOutExpo
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 600,
            $Zoom: 11,
            $Easing: {
                $Zoom: $Jease$.$InOutExpo
            },
            $Opacity: 2,
            $Shift: -100
        }
    }],
    "Zoomreturn": [{
        $Duration: 800,
        $Zoom: 11,
        $Easing: {
            $Zoom: $Jease$.$InOutExpo
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 600,
            $Zoom: 11,
            $Easing: {
                $Zoom: $Jease$.$InOutExpo
            },
            $Opacity: 2,
            $Shift: -100
        }
    }],
    "ShiftTB": [{
        $Duration: 800,
        y: 1,
        $Easing: {
            $Top: $Jease$.$InOutQuart,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 800,
            y: -1,
            $Easing: {
                $Top: $Jease$.$InOutQuart,
                $Opacity: $Jease$.$Linear
            },
            $Opacity: 2
        }
    }],
    "ShiftLR": [{
        $Duration: 800,
        x: 1,
        $Easing: {
            $Left: $Jease$.$InOutQuart,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 800,
            x: -1,
            $Easing: {
                $Left: $Jease$.$InOutQuart,
                $Opacity: $Jease$.$Linear
            },
            $Opacity: 2
        }
    }],
    "ReturnTB": [{
        $Duration: 800,
        y: -1,
        $Easing: {
            $Top: $Jease$.$InOutQuart,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $ZIndex: -10,
        $Brother: {
            $Duration: 800,
            y: -1,
            $Easing: {
                $Top: $Jease$.$InOutQuart,
                $Opacity: $Jease$.$Linear
            },
            $Opacity: 2,
            $ZIndex: -10,
            $Shift: -100
        }
    }],
    "ReturnLR": [{
        $Duration: 800,
        x: 1,
        $Delay: 40,
        $Cols: 6,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Easing: {
            $Left: $Jease$.$InOutQuart,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $ZIndex: -10,
        $Brother: {
            $Duration: 800,
            x: 1,
            $Delay: 40,
            $Cols: 6,
            $Formation: $JssorSlideshowFormations$.$FormationStraight,
            $Easing: {
                $Left: $Jease$.$InOutQuart,
                $Opacity: $Jease$.$Linear
            },
            $Opacity: 2,
            $ZIndex: -10,
            $Shift: -60
        }
    }],
    "RotateAxisup": [{
        $Duration: 800,
        x: 0.25,
        y: 0.5,
        $Rotate: -0.1,
        $Easing: {
            $Left: $Jease$.$InQuad,
            $Top: $Jease$.$InQuad,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuad
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 800,
            x: -0.1,
            y: -0.7,
            $Rotate: 0.1,
            $Easing: {
                $Left: $Jease$.$InQuad,
                $Top: $Jease$.$InQuad,
                $Opacity: $Jease$.$Linear,
                $Rotate: $Jease$.$InQuad
            },
            $Opacity: 2
        }
    }],
    "RotateAxisdown": [{
        $Duration: 1000,
        x: -0.1,
        y: -0.7,
        $Rotate: 0.1,
        $During: {
            $Left: [0.6, 0.4],
            $Top: [0.6, 0.4],
            $Rotate: [0.6, 0.4]
        },
        $Easing: {
            $Left: $Jease$.$InQuad,
            $Top: $Jease$.$InQuad,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuad
        },
        $Opacity: 2,
        $Brother: {
            $Duration: 1000,
            x: 0.2,
            y: 0.5,
            $Rotate: -0.1,
            $Easing: {
                $Left: $Jease$.$InQuad,
                $Top: $Jease$.$InQuad,
                $Opacity: $Jease$.$Linear,
                $Rotate: $Jease$.$InQuad
            },
            $Opacity: 2
        }
    }],
    "ExtrudeReplace": [{
        $Duration: 800,
        x: -0.2,
        $Delay: 40,
        $Cols: 12,
        $During: {
            $Left: [0.4, 0.6]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InOutExpo,
            $Opacity: $Jease$.$InOutQuad
        },
        $Opacity: 2,
        $Outside: true,
        $Round: {
            $Top: 0.5
        },
        $Brother: {
            $Duration: 800,
            x: 0.2,
            $Delay: 40,
            $Cols: 12,
            $Formation: $JssorSlideshowFormations$.$FormationStraight,
            $Assembly: 1028,
            $Easing: {
                $Left: $Jease$.$InOutExpo,
                $Opacity: $Jease$.$InOutQuad
            },
            $Opacity: 2,
            $Round: {
                $Top: 0.5
            },
            $Shift: -200
        }
    }],
    "ExtrudeReturn": [{
        $Duration: 800,
        x: 0.2,
        $Delay: 40,
        $Cols: 12,
        $During: {
            $Left: [0.4, 0.6]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Easing: {
            $Left: $Jease$.$InOutExpo,
            $Opacity: $Jease$.$InOutQuad
        },
        $Opacity: 2,
        $Outside: true,
        $Round: {
            $Top: 0.5
        },
        $Brother: {
            $Duration: 800,
            x: 0.2,
            $Delay: 40,
            $Cols: 12,
            $Formation: $JssorSlideshowFormations$.$FormationStraight,
            $Assembly: 1028,
            $Easing: {
                $Left: $Jease$.$InOutExpo,
                $Opacity: $Jease$.$InOutQuad
            },
            $Opacity: 2,
            $Round: {
                $Top: 0.5
            },
            $Shift: -200
        }
    }],
    "RotateVDouble+in": [{
        $Duration: 1200,
        x: -1,
        y: 2,
        $Rows: 2,
        $Zoom: 11,
        $Rotate: 1,
        $Assembly: 2049,
        $ChessMode: {
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateHDouble+in": [{
        $Duration: 1200,
        x: 2,
        y: 1,
        $Cols: 2,
        $Zoom: 11,
        $Rotate: 1,
        $Assembly: 2049,
        $ChessMode: {
            $Column: 15
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateVDouble-in": [{
        $Duration: 1200,
        x: -0.5,
        y: 1,
        $Rows: 2,
        $Zoom: 1,
        $Rotate: 1,
        $Assembly: 2049,
        $ChessMode: {
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateHDouble-in": [{
        $Duration: 1200,
        x: 0.5,
        y: 0.3,
        $Cols: 2,
        $Zoom: 1,
        $Rotate: 1,
        $Assembly: 2049,
        $ChessMode: {
            $Column: 15
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateVDouble+out": [{
        $Duration: 1000,
        x: -1,
        y: 2,
        $Rows: 2,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Assembly: 2049,
        $ChessMode: {
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InExpo
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.85
        }
    }],
    "RotateHDouble+out": [{
        $Duration: 1000,
        x: 4,
        y: 2,
        $Cols: 2,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Assembly: 2049,
        $ChessMode: {
            $Column: 15
        },
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InExpo
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateVDouble-out": [{
        $Duration: 1000,
        x: -0.5,
        y: 1,
        $Rows: 2,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Assembly: 2049,
        $ChessMode: {
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InExpo
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateHDouble-out": [{
        $Duration: 1000,
        x: 0.5,
        y: 0.3,
        $Cols: 2,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Assembly: 2049,
        $ChessMode: {
            $Column: 15
        },
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InExpo
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateVFork+in": [{
        $Duration: 1200,
        x: -4,
        y: 2,
        $Rows: 2,
        $Zoom: 11,
        $Rotate: 1,
        $Assembly: 2049,
        $ChessMode: {
            $Row: 28
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateHFork+in": [{
        $Duration: 1200,
        x: 1,
        y: 2,
        $Cols: 2,
        $Zoom: 11,
        $Rotate: 1,
        $Assembly: 2049,
        $ChessMode: {
            $Column: 19
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateVFork+out": [{
        $Duration: 1000,
        x: -3,
        y: 1,
        $Rows: 2,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Assembly: 2049,
        $ChessMode: {
            $Row: 28
        },
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InExpo
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateHFork+out": [{
        $Duration: 1000,
        x: 1,
        y: 2,
        $Cols: 2,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Assembly: 2049,
        $ChessMode: {
            $Column: 19
        },
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InExpo
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateZoom+in": [{
        $Duration: 1200,
        $Zoom: 11,
        $Rotate: 1,
        $Easing: {
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateZoom+inL": [{
        $Duration: 1200,
        x: 4,
        $Zoom: 11,
        $Rotate: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateZoom+inR": [{
        $Duration: 1200,
        x: -4,
        $Zoom: 11,
        $Rotate: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateZoom+inT": [{
        $Duration: 1200,
        y: 4,
        $Zoom: 11,
        $Rotate: 1,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateZoom+inB": [{
        $Duration: 1200,
        y: -4,
        $Zoom: 11,
        $Rotate: 1,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateZoom+inTL": [{
        $Duration: 1200,
        x: 4,
        y: 4,
        $Zoom: 11,
        $Rotate: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateZoom+inTR": [{
        $Duration: 1200,
        x: -4,
        y: 4,
        $Zoom: 11,
        $Rotate: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateZoom+inBL": [{
        $Duration: 1200,
        x: 4,
        y: -4,
        $Zoom: 11,
        $Rotate: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateZoom+inBR": [{
        $Duration: 1200,
        x: -4,
        y: -4,
        $Zoom: 11,
        $Rotate: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.7
        }
    }],
    "RotateZoom+out": [{
        $Duration: 1000,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Zoom: $Jease$.$InQuint,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuint
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateZoom+outL": [{
        $Duration: 1000,
        x: 4,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InQuint,
            $Zoom: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuint
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateZoom+outR": [{
        $Duration: 1000,
        x: -4,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InQuint,
            $Zoom: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuint
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateZoom+outT": [{
        $Duration: 1000,
        y: 4,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InQuint,
            $Zoom: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuint
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateZoom+outB": [{
        $Duration: 1000,
        y: -4,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InQuint,
            $Zoom: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuint
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateZoom+outTL": [{
        $Duration: 1000,
        x: 4,
        y: 4,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InQuint,
            $Top: $Jease$.$InQuint,
            $Zoom: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuint
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateZoom+outTR": [{
        $Duration: 1000,
        x: -4,
        y: 4,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InQuint,
            $Top: $Jease$.$InQuint,
            $Zoom: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuint
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateZoom+outBL": [{
        $Duration: 1000,
        x: 4,
        y: -4,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InQuint,
            $Top: $Jease$.$InQuint,
            $Zoom: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuint
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateZoom+outBR": [{
        $Duration: 1000,
        x: -4,
        y: -4,
        $Zoom: 11,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InQuint,
            $Top: $Jease$.$InQuint,
            $Zoom: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InQuint
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.8
        }
    }],
    "RotateZoom-in": [{
        $Duration: 1200,
        $Zoom: 1,
        $Rotate: 1,
        $During: {
            $Zoom: [0.2, 0.8],
            $Rotate: [0.2, 0.8]
        },
        $Easing: {
            $Zoom: $Jease$.$Swing,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-inL": [{
        $Duration: 1200,
        x: 0.6,
        $Zoom: 1,
        $Rotate: 1,
        $During: {
            $Left: [0.2, 0.8],
            $Zoom: [0.2, 0.8],
            $Rotate: [0.2, 0.8]
        },
        $Easing: $Jease$.$Swing,
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-inR": [{
        $Duration: 1200,
        x: -0.6,
        $Zoom: 1,
        $Rotate: 1,
        $During: {
            $Left: [0.2, 0.8],
            $Zoom: [0.2, 0.8],
            $Rotate: [0.2, 0.8]
        },
        $Easing: $Jease$.$Swing,
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-inT": [{
        $Duration: 1200,
        y: 0.6,
        $Zoom: 1,
        $Rotate: 1,
        $During: {
            $Top: [0.2, 0.8],
            $Zoom: [0.2, 0.8],
            $Rotate: [0.2, 0.8]
        },
        $Easing: $Jease$.$Swing,
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-inB": [{
        $Duration: 1200,
        y: -0.6,
        $Zoom: 1,
        $Rotate: 1,
        $During: {
            $Top: [0.2, 0.8],
            $Zoom: [0.2, 0.8],
            $Rotate: [0.2, 0.8]
        },
        $Easing: $Jease$.$Swing,
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-inTL": [{
        $Duration: 1200,
        x: 0.6,
        y: 0.6,
        $Zoom: 1,
        $Rotate: 1,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8],
            $Zoom: [0.2, 0.8],
            $Rotate: [0.2, 0.8]
        },
        $Easing: $Jease$.$Swing,
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-inTR": [{
        $Duration: 1200,
        x: -0.6,
        y: 0.6,
        $Zoom: 1,
        $Rotate: 1,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8],
            $Zoom: [0.2, 0.8],
            $Rotate: [0.2, 0.8]
        },
        $Easing: $Jease$.$Swing,
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-inBL": [{
        $Duration: 1200,
        x: 0.6,
        y: -0.6,
        $Zoom: 1,
        $Rotate: 1,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8],
            $Zoom: [0.2, 0.8],
            $Rotate: [0.2, 0.8]
        },
        $Easing: $Jease$.$Swing,
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-inBR": [{
        $Duration: 1200,
        x: -0.6,
        y: -0.6,
        $Zoom: 1,
        $Rotate: 1,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8],
            $Zoom: [0.2, 0.8],
            $Rotate: [0.2, 0.8]
        },
        $Easing: $Jease$.$Swing,
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-out": [{
        $Duration: 1000,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-outL": [{
        $Duration: 1000,
        x: 0.5,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-outR": [{
        $Duration: 1000,
        x: -0.5,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-outT": [{
        $Duration: 1000,
        y: 0.5,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-outB": [{
        $Duration: 1000,
        y: -0.5,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-outTL": [{
        $Duration: 1000,
        x: 0.5,
        y: 0.5,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-outTR": [{
        $Duration: 1000,
        x: -0.5,
        y: 0.5,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-outBL": [{
        $Duration: 1000,
        x: 0.5,
        y: -0.5,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "RotateZoom-outBR": [{
        $Duration: 1000,
        x: -0.5,
        y: -0.5,
        $Zoom: 1,
        $Rotate: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear,
            $Rotate: $Jease$.$InCubic
        },
        $Opacity: 2,
        $Round: {
            $Rotate: 0.5
        }
    }],
    "ZoomVDouble+in": [{
        $Duration: 1200,
        y: 2,
        $Rows: 2,
        $Zoom: 11,
        $Assembly: 2049,
        $ChessMode: {
            $Row: 15
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "ZoomHDouble+in": [{
        $Duration: 1200,
        x: 4,
        $Cols: 2,
        $Zoom: 11,
        $Assembly: 2049,
        $ChessMode: {
            $Column: 15
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "ZoomVDouble-in": [{
        $Duration: 1200,
        y: 1,
        $Rows: 2,
        $Zoom: 1,
        $Assembly: 2049,
        $ChessMode: {
            $Row: 15
        },
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "ZoomHDouble-in": [{
        $Duration: 1200,
        x: 0.5,
        $Cols: 2,
        $Zoom: 1,
        $Assembly: 2049,
        $ChessMode: {
            $Column: 15
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "ZoomVDouble+out": [{
        $Duration: 1200,
        y: 2,
        $Rows: 2,
        $Zoom: 11,
        $SlideOut: true,
        $Assembly: 2049,
        $ChessMode: {
            $Row: 15
        },
        $Easing: {
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "ZoomHDouble+out": [{
        $Duration: 1200,
        x: 4,
        $Cols: 2,
        $Zoom: 11,
        $SlideOut: true,
        $Assembly: 2049,
        $ChessMode: {
            $Column: 15
        },
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "ZoomVDouble-out": [{
        $Duration: 1200,
        y: 1,
        $Rows: 2,
        $Zoom: 1,
        $SlideOut: true,
        $Assembly: 2049,
        $ChessMode: {
            $Row: 15
        },
        $Easing: {
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "ZoomHDouble-out": [{
        $Duration: 1200,
        x: 0.5,
        $Cols: 2,
        $Zoom: 1,
        $SlideOut: true,
        $Assembly: 2049,
        $ChessMode: {
            $Column: 15
        },
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom+in": [{
        $Duration: 1000,
        $Zoom: 11,
        $Easing: {
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom+inL": [{
        $Duration: 1000,
        x: 4,
        $Zoom: 11,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom+inR": [{
        $Duration: 1000,
        x: -4,
        $Zoom: 11,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2,
        $Round: {
            $Top: 2.5
        }
    }],
    "Zoom+inT": [{
        $Duration: 1000,
        y: 4,
        $Zoom: 11,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom+inB": [{
        $Duration: 1000,
        y: -4,
        $Zoom: 11,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom+inTL": [{
        $Duration: 1000,
        x: 4,
        y: 4,
        $Zoom: 11,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom+inTR": [{
        $Duration: 1000,
        x: -4,
        y: 4,
        $Zoom: 11,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom+inBL": [{
        $Duration: 1000,
        x: 4,
        y: -4,
        $Zoom: 11,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom+inBR": [{
        $Duration: 1000,
        x: -4,
        y: -4,
        $Zoom: 11,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom+out": [{
        $Duration: 1000,
        $Zoom: 11,
        $SlideOut: true,
        $Easing: {
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom+outL": [{
        $Duration: 1000,
        x: 4,
        $Zoom: 11,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom+outR": [{
        $Duration: 1000,
        x: -4,
        $Zoom: 11,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom+outT": [{
        $Duration: 1000,
        y: 4,
        $Zoom: 11,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom+outB": [{
        $Duration: 1000,
        y: -4,
        $Zoom: 11,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom+outTL": [{
        $Duration: 1000,
        x: 4,
        y: 4,
        $Zoom: 11,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom+outTR": [{
        $Duration: 1000,
        x: -4,
        y: 4,
        $Zoom: 11,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom+outBL": [{
        $Duration: 1000,
        x: 4,
        y: -4,
        $Zoom: 11,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom+outBR": [{
        $Duration: 1000,
        x: -4,
        y: -4,
        $Zoom: 11,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom-in": [{
        $Duration: 1200,
        $Zoom: 1,
        $Easing: {
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom-inL": [{
        $Duration: 1200,
        x: 0.6,
        $Zoom: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom-inR": [{
        $Duration: 1200,
        x: -0.6,
        $Zoom: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom-inT": [{
        $Duration: 1200,
        y: 0.6,
        $Zoom: 1,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom-inB": [{
        $Duration: 1200,
        y: -0.6,
        $Zoom: 1,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom-inTL": [{
        $Duration: 1200,
        x: 0.6,
        y: 0.6,
        $Zoom: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom-inTR": [{
        $Duration: 1200,
        x: -0.6,
        y: 0.6,
        $Zoom: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom-inBL": [{
        $Duration: 1200,
        x: 0.6,
        y: -0.6,
        $Zoom: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom-inBR": [{
        $Duration: 1200,
        x: -0.6,
        y: -0.6,
        $Zoom: 1,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Zoom: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "Zoom-out": [{
        $Duration: 1000,
        $Zoom: 1,
        $SlideOut: true,
        $Easing: {
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom-outL": [{
        $Duration: 1000,
        x: 1,
        $Zoom: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom-outR": [{
        $Duration: 1000,
        x: -1,
        $Zoom: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom-outT": [{
        $Duration: 1000,
        y: 1,
        $Zoom: 1,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom-outB": [{
        $Duration: 1000,
        y: -1,
        $Zoom: 1,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom-outTL": [{
        $Duration: 1000,
        x: 1,
        y: 1,
        $Zoom: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom-outTR": [{
        $Duration: 1000,
        x: -1,
        y: 1,
        $Zoom: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom-outBL": [{
        $Duration: 1000,
        x: 1,
        y: -1,
        $Zoom: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "Zoom-outBR": [{
        $Duration: 1000,
        x: -1,
        y: -1,
        $Zoom: 1,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InExpo,
            $Top: $Jease$.$InExpo,
            $Zoom: $Jease$.$InExpo,
            $Opacity: $Jease$.$Linear
        },
        $Opacity: 2
    }],
    "CollapseStairs": [{
        $Duration: 500,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 2049,
        $Easing: $Jease$.$OutQuad
    }],
    "CollapseSwirl": [{
        $Duration: 500,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Easing: $Jease$.$OutQuad
    }],
    "CollapseRectangleCross": [{
        $Duration: 500,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationRectangleCross,
        $Easing: $Jease$.$OutQuad
    }],
    "CollapseRectangle": [{
        $Duration: 500,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationRectangle,
        $Easing: $Jease$.$OutQuad
    }],
    "CollapseCross": [{
        $Duration: 500,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationCross,
        $Easing: $Jease$.$OutQuad
    }],
    "CollapseCircle": [{
        $Duration: 500,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationCircle,
        $Assembly: 2049
    }],
    "CollapseZigZag": [{
        $Duration: 500,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Easing: $Jease$.$OutQuad
    }],
    "CollapseRandom": [{
        $Duration: 500,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $SlideOut: true,
        $Easing: $Jease$.$OutQuad
    }],
    "ExpandStairs": [{
        $Duration: 500,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 2050,
        $Easing: {
            $Clip: $Jease$.$InSine
        }
    }],
    "ExpandSwirl": [{
        $Duration: 500,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Easing: {
            $Clip: $Jease$.$InSine
        }
    }],
    "ExpandRectangleCross": [{
        $Duration: 500,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $Formation: $JssorSlideshowFormations$.$FormationRectangleCross,
        $Easing: {
            $Clip: $Jease$.$InSine
        }
    }],
    "ExpandRectangle": [{
        $Duration: 500,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $Formation: $JssorSlideshowFormations$.$FormationRectangle,
        $Easing: {
            $Clip: $Jease$.$InSine
        }
    }],
    "ExpandCross": [{
        $Duration: 500,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $Formation: $JssorSlideshowFormations$.$FormationCross,
        $Easing: {
            $Clip: $Jease$.$InSine
        }
    }],
    "ExpandZigZag": [{
        $Duration: 500,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Clip: $Jease$.$InSine
        }
    }],
    "ExpandRandom": [{
        $Duration: 500,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $Easing: $Jease$.$InSine
    }],
    "FloatRightRandom": [{
        $Duration: 500,
        x: -1,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FloatupRandom": [{
        $Duration: 500,
        y: 1,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $SlideOut: true,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FloatupRandomwithChess": [{
        $Duration: 500,
        x: 1,
        y: -1,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $SlideOut: true,
        $ChessMode: {
            $Column: 3,
            $Row: 12
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FloatRightZigZag": [{
        $Duration: 600,
        x: -1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 513,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FloatupZigZag": [{
        $Duration: 600,
        y: 1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 264,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FloatupZigZagwithChess": [{
        $Duration: 600,
        x: -1,
        y: -1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 1028,
        $ChessMode: {
            $Column: 3,
            $Row: 12
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FloatRightSwirl": [{
        $Duration: 600,
        x: -1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $SlideOut: true,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 513,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FloatupSwirl": [{
        $Duration: 600,
        y: 1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $SlideOut: true,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 2049,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FloatupSwirlwithChess": [{
        $Duration: 600,
        x: 1,
        y: 1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $SlideOut: true,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 513,
        $ChessMode: {
            $Column: 3,
            $Row: 12
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FlyRightRandom": [{
        $Duration: 500,
        x: 1,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FlyupRandom": [{
        $Duration: 500,
        y: -1,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FlyupRandomwithChess": [{
        $Duration: 600,
        x: -1,
        y: 1,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $ChessMode: {
            $Column: 3,
            $Row: 12
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FlyRightZigZag": [{
        $Duration: 600,
        x: 1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 514,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FlyupZigZag": [{
        $Duration: 600,
        y: -1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FlyupZigZagwithChess": [{
        $Duration: 600,
        x: 1,
        y: 1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $ChessMode: {
            $Column: 3,
            $Row: 12
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FlyRightSwirl": [{
        $Duration: 600,
        x: 1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 513,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FlyupSwirl": [{
        $Duration: 600,
        y: -1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 2049,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "FlyupSwirlwithChess": [{
        $Duration: 600,
        x: -1,
        y: -1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 513,
        $ChessMode: {
            $Column: 3,
            $Row: 12
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "DominoesStripe": [{
        $Duration: 1600,
        y: -1,
        $Delay: 40,
        $Cols: 24,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Easing: $Jease$.$OutJump,
        $Round: {
            $Top: 1.5
        }
    }],
    "ExtrudeoutStripe": [{
        $Duration: 1000,
        x: -0.2,
        $Delay: 20,
        $Cols: 16,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InOutExpo,
            $Opacity: $Jease$.$InOutQuad
        },
        $Opacity: 2,
        $Outside: true,
        $Round: {
            $Top: 0.5
        }
    }],
    "ExtrudeinStripe": [{
        $Duration: 1000,
        x: 0.2,
        $Delay: 20,
        $Cols: 16,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InOutExpo,
            $Opacity: $Jease$.$InOutQuad
        },
        $Opacity: 2,
        $Outside: true,
        $Round: {
            $Top: 0.5
        }
    }],
    "HorizontalBlindStripe": [{
        $Duration: 400,
        $Delay: 50,
        $Rows: 7,
        $Clip: 4,
        $Formation: $JssorSlideshowFormations$.$FormationStraight
    }],
    "VerticalBlindStripe": [{
        $Duration: 400,
        $Delay: 50,
        $Cols: 10,
        $Clip: 2,
        $Formation: $JssorSlideshowFormations$.$FormationStraight
    }],
    "HorizontalStripe": [{
        $Duration: 400,
        $Rows: 6,
        $Clip: 4
    }],
    "VerticalStripe": [{
        $Duration: 400,
        $Cols: 8,
        $Clip: 1
    }],
    "HorizontalMovingStripe": [{
        $Duration: 400,
        $Rows: 6,
        $Clip: 4,
        $Move: true
    }],
    "VerticalMovingStripe": [{
        $Duration: 400,
        $Cols: 8,
        $Clip: 1,
        $Move: true
    }],
    "HorizontalFadeStripe": [{
        $Duration: 400,
        $Delay: 40,
        $Rows: 10,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Opacity: 2,
        $Assembly: 260
    }],
    "HorizontalFadeStripeReverse": [{
        $Duration: 400,
        $Delay: 40,
        $Rows: 10,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Opacity: 2
    }],
    "VerticalFadeStripe": [{
        $Duration: 400,
        $Delay: 40,
        $Cols: 16,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Opacity: 2,
        $Assembly: 260
    }],
    "VerticalFadeStripeReverse": [{
        $Duration: 400,
        $Delay: 40,
        $Cols: 16,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Opacity: 2
    }],
    "HorizontalFlyStripe": [{
        $Duration: 600,
        x: 1,
        $Delay: 50,
        $Rows: 8,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Assembly: 513,
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "VerticalFlyStripe": [{
        $Duration: 600,
        y: 1,
        $Delay: 50,
        $Cols: 12,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Assembly: 513,
        $Easing: {
            $Top: $Jease$.$InCubic,
            $Opacity: $Jease$.$OutQuad
        },
        $Opacity: 2
    }],
    "HorizontalChessStripe": [{
        $Duration: 600,
        x: -1,
        $Rows: 10,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $ChessMode: {
            $Row: 3
        },
        $Easing: $Jease$.$InCubic
    }],
    "VerticalChessStripe": [{
        $Duration: 600,
        y: -1,
        $Cols: 12,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $ChessMode: {
            $Column: 12
        },
        $Easing: $Jease$.$InCubic
    }],
    "HorizontalRandomFadeStripe": [{
        $Duration: 600,
        $Delay: 40,
        $Rows: 10,
        $Opacity: 2
    }],
    "VerticalRandomFadeStripe": [{
        $Duration: 600,
        $Delay: 40,
        $Cols: 16,
        $Opacity: 2
    }],
    "HorizontalBounceStripe": [{
        $Duration: 600,
        $Delay: 40,
        $Rows: 10,
        $Clip: 8,
        $Move: true,
        $Formation: $JssorSlideshowFormations$.$FormationCircle,
        $Assembly: 264,
        $Easing: $Jease$.$InBounce
    }],
    "VerticalBounceStripe": [{
        $Duration: 600,
        $Delay: 40,
        $Cols: 16,
        $Clip: 1,
        $Move: true,
        $Formation: $JssorSlideshowFormations$.$FormationCircle,
        $Assembly: 264,
        $Easing: $Jease$.$InBounce
    }],
    "ParabolaSwirlin": [{
        $Duration: 600,
        x: -1,
        y: 1,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 264,
        $Easing: {
            $Top: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear
        }
    }],
    "ParabolaSwirlout": [{
        $Duration: 600,
        x: -1,
        y: 1,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 264,
        $Easing: {
            $Top: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear
        }
    }],
    "ParabolaZigZagin": [{
        $Duration: 600,
        x: -1,
        y: 1,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $ChessMode: {
            $Row: 3
        },
        $Easing: {
            $Top: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear
        }
    }],
    "ParabolaZigZagout": [{
        $Duration: 600,
        x: -1,
        y: 1,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $ChessMode: {
            $Row: 3
        },
        $Easing: {
            $Top: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear
        }
    }],
    "ParabolaStairsin": [{
        $Duration: 600,
        x: -1,
        y: 1,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Left: $Jease$.$InQuart,
            $Top: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear
        }
    }],
    "ParabolaStairsout": [{
        $Duration: 600,
        x: -1,
        y: 1,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Left: $Jease$.$InQuart,
            $Top: $Jease$.$InQuart,
            $Opacity: $Jease$.$Linear
        }
    }],
    "SwingInsideinStairs": [{
        $Duration: 1200,
        x: 0.2,
        y: -0.1,
        $Delay: 16,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 1.3,
            $Top: 2.5
        }
    }],
    "SwingInsideinZigZag": [{
        $Duration: 1200,
        x: 0.2,
        y: -0.1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 1.3,
            $Top: 2.5
        }
    }],
    "SwingInsideinSwirl": [{
        $Duration: 1200,
        x: 0.2,
        y: -0.1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 1.3,
            $Top: 2.5
        }
    }],
    "SwingInsideinRandom": [{
        $Duration: 1200,
        x: 0.2,
        y: -0.1,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 1.3,
            $Top: 2.5
        }
    }],
    "SwingInsideinRandomChess": [{
        $Duration: 1200,
        x: 0.2,
        y: -0.1,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $ChessMode: {
            $Column: 3,
            $Row: 3
        },
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 1.3,
            $Top: 2.5
        }
    }],
    "SwingInsideoutZigZag": [{
        $Duration: 1200,
        x: 0.2,
        y: -0.1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 1.3,
            $Top: 2.5
        }
    }],
    "SwingInsideoutSwirl": [{
        $Duration: 1200,
        x: 0.2,
        y: -0.1,
        $Delay: 12,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 1.3,
            $Top: 2.5
        }
    }],
    "DodgeDanceInsideinStairs": [{
        $Duration: 1500,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgeDanceInsideinSwirl": [{
        $Duration: 1500,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgeDanceInsideinZigZag": [{
        $Duration: 1500,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgeDanceInsideinRandom": [{
        $Duration: 1500,
        x: 0.3,
        y: -0.3,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgeDanceInsideinRandomChess": [{
        $Duration: 1500,
        x: 0.3,
        y: -0.3,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $ChessMode: {
            $Column: 15,
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgeDanceInsideoutStairs": [{
        $Duration: 1500,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.1, 0.9],
            $Top: [0.1, 0.9]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgeDanceInsideoutSwirl": [{
        $Duration: 1500,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.1, 0.9],
            $Top: [0.1, 0.9]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgeDanceInsideoutZigZag": [{
        $Duration: 1500,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.1, 0.9],
            $Top: [0.1, 0.9]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgeDanceInsideoutRandom": [{
        $Duration: 1500,
        x: 0.3,
        y: -0.3,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgeDanceInsideoutRandomChess": [{
        $Duration: 1500,
        x: 0.3,
        y: -0.3,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $ChessMode: {
            $Column: 15,
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgePetInsideinStairs": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgePetInsideinSwirl": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgePetInsideinZigZag": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgePetInsideinRandom": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$Linear
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgePetInsideinRandomChess": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $ChessMode: {
            $Column: 15,
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$Linear
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgePetInsideoutStairs": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgePetInsideoutSwirl": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgePetInsideoutZigZag": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$OutQuad
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgePetInsideoutRandom": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $SlideOut: true,
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$Linear
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgePetInsideoutRandomChess": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $SlideOut: true,
        $ChessMode: {
            $Column: 15,
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InWave,
            $Top: $Jease$.$InWave,
            $Clip: $Jease$.$Linear
        },
        $Round: {
            $Left: 0.8,
            $Top: 2.5
        }
    }],
    "DodgeInsideoutStairs": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$Swing
        },
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideoutSwirl": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$Swing
        },
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideoutZigZag": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$Swing
        },
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideoutRandom": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $SlideOut: true,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$Swing
        },
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideoutRandomChess": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 40,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $SlideOut: true,
        $Assembly: 260,
        $ChessMode: {
            $Column: 15,
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$Swing
        },
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideinStairs": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$Swing
        },
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideinSwirl": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$Swing
        },
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideinZigZag": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$Swing
        },
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideinRandom": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$Swing
        },
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideinRandomChess": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 80,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8]
        },
        $Assembly: 260,
        $ChessMode: {
            $Column: 15,
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Clip: $Jease$.$Swing
        },
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideinTL": [{
        $Duration: 1200,
        x: 0.3,
        y: 0.3,
        $Delay: 60,
        $Zoom: 1,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Opacity: $Jease$.$Linear,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideinTR": [{
        $Duration: 1200,
        x: -0.3,
        y: 0.3,
        $Delay: 60,
        $Zoom: 1,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Opacity: $Jease$.$Linear,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideinBL": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 60,
        $Zoom: 1,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Opacity: $Jease$.$Linear,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideinBR": [{
        $Duration: 1200,
        x: -0.3,
        y: -0.3,
        $Delay: 60,
        $Zoom: 1,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Opacity: $Jease$.$Linear,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideoutTL": [{
        $Duration: 1200,
        x: 0.3,
        y: 0.3,
        $Delay: 60,
        $Zoom: 1,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Opacity: $Jease$.$Linear,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideoutTR": [{
        $Duration: 1200,
        x: -0.3,
        y: 0.3,
        $Delay: 60,
        $Zoom: 1,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Opacity: $Jease$.$Linear,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideoutBL": [{
        $Duration: 1200,
        x: 0.3,
        y: -0.3,
        $Delay: 60,
        $Zoom: 1,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Opacity: $Jease$.$Linear,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "DodgeInsideoutBR": [{
        $Duration: 1200,
        x: -0.3,
        y: -0.3,
        $Delay: 60,
        $Zoom: 1,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Left: $Jease$.$InJump,
            $Top: $Jease$.$InJump,
            $Opacity: $Jease$.$Linear,
            $Zoom: $Jease$.$Swing
        },
        $Opacity: 2,
        $Round: {
            $Left: 0.8,
            $Top: 0.8
        }
    }],
    "FlutterInsidein": [{
        $Duration: 1200,
        x: 1,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7]
        },
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InOutExpo,
            $Clip: $Jease$.$InOutQuad
        },
        $Round: {
            $Top: 0.8
        }
    }],
    "FlutterInsideinWind": [{
        $Duration: 1200,
        x: 1,
        y: 0.2,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 2050,
        $Easing: {
            $Left: $Jease$.$InOutSine,
            $Top: $Jease$.$OutWave,
            $Clip: $Jease$.$InOutQuad
        },
        $Round: {
            $Top: 1.3
        }
    }],
    "FlutterInsideinSwirl": [{
        $Duration: 1200,
        x: 1,
        y: 0.2,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 2050,
        $Easing: {
            $Left: $Jease$.$InOutSine,
            $Top: $Jease$.$OutWave,
            $Clip: $Jease$.$InOutQuad
        },
        $Round: {
            $Top: 1.3
        }
    }],
    "FlutterInsideinColumn": [{
        $Duration: 1500,
        x: 0.2,
        y: -0.1,
        $Delay: 150,
        $Cols: 12,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 2
        }
    }],
    "FlutterInsideout": [{
        $Duration: 1200,
        x: 1,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$InOutExpo,
            $Clip: $Jease$.$InOutQuad
        },
        $Round: {
            $Top: 0.8
        }
    }],
    "FlutterInsideoutWind": [{
        $Duration: 1200,
        x: 1,
        y: 0.2,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 2050,
        $Easing: {
            $Left: $Jease$.$InOutSine,
            $Top: $Jease$.$OutWave,
            $Clip: $Jease$.$InOutQuad
        },
        $Round: {
            $Top: 1.3
        }
    }],
    "FlutterInsideoutSwirl": [{
        $Duration: 1200,
        x: 1,
        y: 0.2,
        $Delay: 20,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.3, 0.7],
            $Top: [0.3, 0.7]
        },
        $SlideOut: true,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 2050,
        $Easing: {
            $Left: $Jease$.$InOutSine,
            $Top: $Jease$.$OutWave,
            $Clip: $Jease$.$InOutQuad
        },
        $Round: {
            $Top: 1.3
        }
    }],
    "FlutterInsideoutColumn": [{
        $Duration: 1800,
        x: 0.2,
        y: -0.1,
        $Delay: 150,
        $Cols: 12,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 2
        }
    }],
    "Clip&amp;Chessin": [{
        $Duration: 1200,
        y: -1,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Top: [0.5, 0.5],
            $Clip: [0, 0.5]
        },
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $ChessMode: {
            $Column: 12
        },
        $ScaleClip: 0.5
    }],
    "Clip&amp;Chessout": [{
        $Duration: 1200,
        y: -1,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Top: [0.5, 0.5],
            $Clip: [0, 0.5]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $ChessMode: {
            $Column: 12
        },
        $ScaleClip: 0.5
    }],
    "Clip&amp;ObliqueChessin": [{
        $Duration: 1200,
        x: -1,
        y: -1,
        $Cols: 6,
        $Rows: 6,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8],
            $Clip: [0, 0.2]
        },
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $ChessMode: {
            $Column: 15,
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Clip: $Jease$.$Swing
        },
        $ScaleClip: 0.5
    }],
    "Clip&amp;ObliqueChessout": [{
        $Duration: 1200,
        x: -1,
        y: -1,
        $Cols: 6,
        $Rows: 6,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.2, 0.8],
            $Top: [0.2, 0.8],
            $Clip: [0, 0.2]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $ChessMode: {
            $Column: 15,
            $Row: 15
        },
        $Easing: {
            $Left: $Jease$.$InCubic,
            $Top: $Jease$.$InCubic,
            $Clip: $Jease$.$Swing
        },
        $ScaleClip: 0.5
    }],
    "Clip&amp;Wavein": [{
        $Duration: 4000,
        x: -1,
        y: 0.45,
        $Delay: 80,
        $Cols: 12,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.35, 0.65],
            $Top: [0.35, 0.65],
            $Clip: [0, 0.15]
        },
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Assembly: 2049,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutWave,
            $Clip: $Jease$.$OutQuad
        },
        $ScaleClip: 0.7,
        $Round: {
            $Top: 4
        }
    }],
    "Clip&amp;Waveout": [{
        $Duration: 4000,
        x: -1,
        y: 0.45,
        $Delay: 80,
        $Cols: 12,
        $Opacity: 2,
        $Clip: 15,
        $During: {
            $Left: [0.35, 0.65],
            $Top: [0.35, 0.65],
            $Clip: [0, 0.15]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Assembly: 2049,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutWave,
            $Clip: $Jease$.$OutQuad
        },
        $ScaleClip: 0.7,
        $Round: {
            $Top: 4
        }
    }],
    "Clip&amp;Jumpin": [{
        $Duration: 4000,
        x: -1,
        y: 0.7,
        $Delay: 80,
        $Cols: 12,
        $Opacity: 2,
        $Clip: 11,
        $Move: true,
        $During: {
            $Left: [0.35, 0.65],
            $Top: [0.35, 0.65],
            $Clip: [0, 0.1]
        },
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Assembly: 2049,
        $Easing: {
            $Left: $Jease$.$OutQuad,
            $Top: $Jease$.$OutJump,
            $Clip: $Jease$.$OutQuad
        },
        $ScaleClip: 0.7,
        $Round: {
            $Top: 4
        }
    }],
    "Clip&amp;Jumpout": [{
        $Duration: 4000,
        x: -1,
        y: 0.7,
        $Delay: 80,
        $Cols: 12,
        $Opacity: 2,
        $Clip: 11,
        $Move: true,
        $During: {
            $Left: [0.35, 0.65],
            $Top: [0.35, 0.65],
            $Clip: [0, 0.1]
        },
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Assembly: 2049,
        $Easing: {
            $Left: $Jease$.$OutQuad,
            $Top: $Jease$.$OutJump,
            $Clip: $Jease$.$OutQuad
        },
        $ScaleClip: 0.7,
        $Round: {
            $Top: 4
        }
    }],
    "Waveout": [{
        $Duration: 1500,
        y: -0.5,
        $Delay: 60,
        $Cols: 16,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Top: $Jease$.$InWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveoutEagle": [{
        $Duration: 1200,
        y: -0.5,
        $Delay: 30,
        $Cols: 15,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationCircle,
        $Easing: {
            $Top: $Jease$.$InWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveoutSwirl": [{
        $Duration: 1200,
        x: -1,
        y: 0.5,
        $Delay: 30,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveoutZigZag": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 60,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $ChessMode: {
            $Row: 3
        },
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveoutRectangle": [{
        $Duration: 1500,
        x: 1,
        y: 0.5,
        $Delay: 60,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationRectangle,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveoutCircle": [{
        $Duration: 1500,
        x: 1,
        y: 0.5,
        $Delay: 60,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationCircle,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveoutCross": [{
        $Duration: 1500,
        x: 1,
        y: 0.5,
        $Delay: 60,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationCross,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveoutRectangleCross": [{
        $Duration: 1500,
        x: 1,
        y: 0.5,
        $Delay: 60,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationRectangleCross,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "Wavein": [{
        $Duration: 1500,
        y: -0.5,
        $Delay: 60,
        $Cols: 12,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationStraightStairs,
        $Easing: {
            $Top: $Jease$.$InWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveinEagle": [{
        $Duration: 1200,
        y: -0.5,
        $Delay: 30,
        $Cols: 15,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationCircle,
        $Easing: {
            $Top: $Jease$.$InWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveinSwirl": [{
        $Duration: 1200,
        x: -1,
        y: 0.5,
        $Delay: 30,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveinZigZag": [{
        $Duration: 1500,
        x: 1,
        y: 0.5,
        $Delay: 60,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $ChessMode: {
            $Row: 3
        },
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveinRectangle": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 60,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationRectangle,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveinCircle": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 60,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationCircle,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveinCross": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 60,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationCross,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "WaveinRectangleCross": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 60,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationRectangleCross,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InWave,
            $Opacity: $Jease$.$Linear
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpoutStraight": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 100,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Assembly: 513,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpoutSwirl": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 100,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpoutZigZag": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 100,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpoutRectangle": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 800,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationRectangle,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpoutCircle": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 100,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationCircle,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpoutRectangleCross": [{
        $Duration: 1500,
        x: -1,
        y: 0.5,
        $Delay: 100,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $SlideOut: true,
        $Formation: $JssorSlideshowFormations$.$FormationRectangleCross,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Linear,
            $Top: $Jease$.$OutJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpinStraight": [{
        $Duration: 1500,
        x: -1,
        y: -0.5,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationStraight,
        $Assembly: 513,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpinSwirl": [{
        $Duration: 1500,
        x: -1,
        y: -0.5,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationSwirl,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpinZigZag": [{
        $Duration: 1500,
        x: -1,
        y: -0.5,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationZigZag,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpinRectangle": [{
        $Duration: 1500,
        x: -1,
        y: -0.5,
        $Delay: 800,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Reverse: true,
        $Formation: $JssorSlideshowFormations$.$FormationRectangle,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpinCircle": [{
        $Duration: 1500,
        x: -1,
        y: -0.5,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationCircle,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "JumpinRectangleCross": [{
        $Duration: 1500,
        x: -1,
        y: -0.5,
        $Delay: 50,
        $Cols: 10,
        $Rows: 5,
        $Opacity: 2,
        $Formation: $JssorSlideshowFormations$.$FormationRectangleCross,
        $Assembly: 260,
        $Easing: {
            $Left: $Jease$.$Swing,
            $Top: $Jease$.$InJump
        },
        $Round: {
            $Top: 1.5
        }
    }],
    "SlideDown": [{
        $Duration: 500,
        y: 1,
        $Opacity: 2,
        $Easing: $Jease$.$InQuad
    }],
    "SlideRight": [{
        $Duration: 400,
        x: 1,
        $Opacity: 2,
        $Easing: $Jease$.$InQuad
    }],
    "BounceDown": [{
        $Duration: 1000,
        y: 1,
        $Opacity: 2,
        $Easing: $Jease$.$InBounce
    }],
    "BounceRight": [{
        $Duration: 1000,
        x: 1,
        $Opacity: 2,
        $Easing: $Jease$.$InBounce
    }],
};

function initjs() {
    var scrollPosition;
    var topValue;
    var navColor;
    createDropDown("#Loc", "target1");
    createDropDown("#Room", "target2");

    // form_v5 script
    if ($('#form_v5').length > 0) {
        $('.call_form_v5').on('click', function(e) {
            navColor = $('header .navbar-top.scroll').css("background-color");
            $('header .navbar-top').css('background-color', navColor);
            $('#form_v5').addClass('show');
            $('.bookingForm_bg_image_wrapper').addClass('show');
            $('.bookingForm_v5_wrapper').addClass('show');
            setTimeout(function() {
                $('.closeBookingForm').addClass('show');
            }, 500);
            scrollPosition = $(window).scrollTop();
            $('body').css('top', -scrollPosition);
            topValue = scrollPosition;
            $('body').css({
                'overflow-x': 'hidden',
                'position': 'fixed'
            });
        });
        $('.closeBookingForm').on('click', function(e) {
            $('#form_v5').removeClass('show');
            $('.bookingForm_bg_image_wrapper').removeClass('show');
            $('.bookingForm_v5_wrapper').removeClass('show');
            $('.closeBookingForm').removeClass('show');
            $('body').css({
                'top': '',
                'position': '',
                'overflow-x': ''
            });
            window.scrollTo(0, topValue);
            $('header .navbar-top').css('background-color', '');
        });
    }

    if (imageRevelAnim !== '' && typeof imageRevelAnim !== 'undefined' && typeof imageRevelAnimTimer !== 'undefined') {
        $('.widget-wrapper .image-content').addClass("viewPortOut").viewportChecker({
            classToAdd: 'viewPortIn animated ' + imageRevelAnim + ' ' + imageRevelAnimTimer + '', // Class to add to the elements when they are visible
            offset: 90,
            repeat: false
        });
    }

    if ($('.wt-masonry-gallery').length) {
        initMasonryGallery();
    }

    if ($('.wt-image-text-slider').length) {
        initImageTextSlider();
    }

    $(".formDatePicker").datepicker({
        dateFormat: 'dd-mm-yy'
    });
    $(".formDatePicker").datepicker("setDate", new Date());

    var getCalendarId = $('.input-group-addon');
    $(getCalendarId[0]).click(function() {
        var fromElem = $('.form-horizontal').find('.input-group input')[0];
        $(fromElem).trigger('focus');
    });
    $(getCalendarId[1]).click(function() {
        var fromElem = $('.form-horizontal').find('.input-group input')[1];
        $(fromElem).trigger('focus');
    });

    $(".jssor-home-wrapper").css('height', 'auto');

    if ($(".jssor-carousel").length) {
        $(".jssor-carousel").each(function() {
            var jssorCarouselId = $(this).attr("id");
            jssorTransitionOptions("#" + jssorCarouselId);
        });
    } else if ($("#homeCarousel .carousel-inner").length) {
        if (typeof heroImageChangeTime === 'undefined') {
            heroImageChangeTime = 5000;
        }
        $('.carousel').carousel({
            interval: parseInt(heroImageChangeTime),
            pause: ''
        });
    }

    promo_slider_play_pause();
    // right_col_promo_slider_play_pause();

    $('.promo-btn').on('click', function(e) {
        e.preventDefault();
        $('.promo-details-wrap').toggleClass('hide-promotions');
        $('.promo-close .fa').toggleClass('fa-chevron-down fa-times');
        $("#promos").attr("data-cycle-loop", "0");
        $('#promos.cycle-slideshow').cycle('reinit');
    });

    if ($(window).scrollTop() < 310) {
        interval = setInterval(openPromos, 2000);
    }

    interval1 = setInterval(showDateTime, 2000);

    $(".moreOptions").on("click", function() {
        if ($(".dropdown-more").hasClass("iHide")) {
            $(".dropdown-more").toggleClass("iHide");
        } else {
            if (flag == false) {
                flag++;
            } else {
                $(".dropdown-more").toggleClass("iHide");
                flag = true;
            }
        }
    });

    $("#collapseOne").focusin(function() {
        focusform = true;
        clearTimeout(timer);
    });
    $("#collapseOne").focusout(function() {
        focusform = false;
    });

    $("#accordion").hover(function() {
        onform = true;
        clearTimeout(timer);
    }, function() {
        onform = false;
    });

    $("#accordion").bind("clickoutside", function(event) {
        // $("#overlay").removeClass('open-overlay');
        // console.log('clickoutside happened');
        if (clicktrack == false) {
            clearTimeout(timer);
            closeBooking();
        }
        clicktrack = false;
    });
    // // <-- time in milliseconds

    $('#accordion .panel-heading').click(function(e) {
        // console.log('panel heading clicked');
        togglecaret();
        $("#accordion .panel-heading").toggleClass('collapsed');
        // $("#overlay").toggleClass('open-overlay', (accordionopen = !accordionopen));
        $("#accordion .panel-heading").removeClass("collapsed");
        $("#bookingForm .tohide").css('display', 'block');
        $(".abs_parent").css('z-index', '201');
        $("#ui-datepicker-div").css('z-index', '202');
        $("#bookingForm").addClass('open');
        $(".second-last-block").hide();

        // console.log('panel heading overlay clicked');
    });

    $("#collapseOne").on('hide', function(e) {
        $("#accordion .panel-heading").addClass("collapsed");
        // $("#overlay").removeClass('open-overlay').hide();
        // console.log('panel heading closed');
    });

    $("#collapseOne").on('show', function(e) {
        // console.log('collapse one clicked');
        $("#accordion .panel-heading").removeClass("collapsed");
        $("#bookingForm .tohide").css('display', 'block');
        $(".abs_parent").css('z-index', '201');
        $("#ui-datepicker-div").css('z-index', '202');
        $("#bookingForm").addClass('open');
        $(".second-last-block").hide();
        var docHeight = $(document).height();
        // $("#overlay").height(docHeight).addClass('open-overlay').show();
    });


    $("#ui-datepicker-div").click(function() {
        clicktrack = true;
    });

    // $('ul#top-navbar-collapse').flexMenu2({
    //     showOnHover: false
    // });

    checkHomepageBookingFormNoOfChildElements();
    initFoo();
    for_summary_slider();
    for_summary_detail_page_slider();
    for_a_universal_slider();
    whyBookDirectPosition();
    menuDropdown();

    $('.dropdown.primary').on('click mouseover', ourHotelMenuHeight);

    $(window).scroll(function() {
        $('nav').toggleClass('scroll', $(this).scrollTop() > 100);
        if ($(window).scrollTop() > $('#top-navbar-collapse li.moreOptions ul').height()) {
            $('#top-navbar-collapse li.moreOptions ul').removeClass('show');
        }

        if ($('#myVideo').length > 0) {
            /*===================================================
                        =            Video Play Pause for scroll            =
            ===================================================*/
            var video = $("#myVideo").get(0);
            if ($(window).scrollTop() > 300) {
                $('#myVideo')[0].pause();
                $('.play_pause_video_btn .fa-pause').fadeOut('300', function() {
                    $('.play_pause_video_btn .fa-play').fadeIn('300').css('display', 'inline-block');
                });
            } else if ($(window).scrollTop() <= 300) {
                $('#myVideo')[0].play();
                $('.play_pause_video_btn .fa-play').fadeOut('300', function() {
                    $('.play_pause_video_btn .fa-pause').fadeIn('300');
                });
            }
        }
        $(".abs_parent #bookingForm .wrapperOfBenefits").addClass("removePopupHover");
    });

    $(".abs_parent #bookingForm .whyBookDirect").hover(function() {
        $(".abs_parent #bookingForm .wrapperOfBenefits").removeClass("removePopupHover");
    });

    var isScrolling;
    window.addEventListener('scroll', function(event) {
        window.clearTimeout(isScrolling);
        isScrolling = setTimeout(function() {
            whyBookDirectPosition();
        }, 66);
    }, false);

    if ($('#myVideo').length > 0) {
        var video = $("#myVideo").get(0);

        if ($("video").prop('autoplay')) {
            var promise = video.play();

            if (promise !== undefined) {
                promise.then(function() {
                    // Autoplay started!
                    $('.play_pause_video_btn .fa-play').css('display', 'none');
                    $('.play_pause_video_btn .fa-pause').css('display', 'inline-block');
                }).catch(function(error) {
                    console.log(error);
                    // Autoplay was prevented.
                    $('.play_pause_video_btn .fa-pause').css('display', 'none');
                    $('.play_pause_video_btn .fa-play').css('display', 'inline-block');
                });
            }
        } else {
            $('.play_pause_video_btn .fa-pause').css('display', 'none');
            $('.play_pause_video_btn .fa-play').css('display', 'inline-block');
        }

        if ($("video").prop('muted')) {
            $('.mute_video .fa-volume-up').css('display', 'none');
            $('.mute_video .fa-volume-off').css('display', 'inline-block');
        } else {
            $('.mute_video .fa-volume-off').css('display', 'none');
            $('.mute_video .fa-volume-up').css('display', 'inline-block');
        }

        $('.play_pause_video_btn').click(function() {

            if (video.paused) {
                video.play();
                $('.play_pause_video_btn .fa-play').fadeOut('300', function() {
                    $('.play_pause_video_btn .fa-pause').fadeIn('300');
                });

            } else {
                video.pause();
                $('.play_pause_video_btn .fa-pause').fadeOut('300', function() {
                    $('.play_pause_video_btn .fa-play').fadeIn('300').css('display', 'inline-block');
                });
            }
        });

        $(".mute_video").click(function() {
            $('#myVideo').prop('muted', !$('#myVideo').prop('muted'));

            if ($("video").prop('muted')) {
                $('.mute_video .fa-volume-up').fadeOut('300', function() {
                    $('.mute_video .fa-volume-off').fadeIn('300');
                });
            } else {
                $('.mute_video .fa-volume-off').fadeOut('300', function() {
                    $('.mute_video .fa-volume-up').fadeIn('300').css('display', 'inline-block');
                });
            }
        });
    }

    roundImageCheck();

}

function initFoo() {
    var e = document.getElementById("fooDiv");
    if (e != null) {
        e.parentNode.removeChild(e);
    }
}

function openPromos() {
    $('.promo-details-wrap').toggleClass('hide-promotions');
    $('.promo-close .fa').removeClass('fa-chevron-down');
    $('.promo-close .fa').addClass(' fa-times');
    clearInterval(interval);
    $('#promos').on('cycle-finished', function(event, opts) {
        $("#promos").attr("data-cycle-loop", "0");
        closePromos();
    });
}

function showDateTime() {
    $('.wtlocation').slideDown();
    $('.weather-wrap').slideDown();
    clearInterval(interval1);
}

function closePromos() {
    $('.promo-details-wrap').toggleClass('hide-promotions');
    $('.promo-close .fa').removeClass('fa-times');
    $('.promo-close .fa').addClass(' fa-chevron-down');
}

function promo_slider_play_pause() {
    $(".promo-control .pause-button").on('click', function(event) {
        $('#promos.cycle-slideshow').cycle('pause');
        $(".promo-control .pause-button").hide();
        $(".promo-control .play-button").show();
    });
    $(".promo-control .play-button").on('click', function(event) {
        $('#promos.cycle-slideshow').cycle('resume');
        $(".promo-control .play-button").hide();
        $(".promo-control .pause-button").show();
    });
}

function showClosePromotions() {

    $('.promo-btn').click(function(e) {
        e.preventDefault();
        $('.promo-details-wrap').toggleClass('hide-promotions');
        $('.promo-close .fa').toggleClass('fa-chevron-down fa-times');
    });
}

function initGallery() {
    $("a.gallery-class").click(function(e) {
        e.preventDefault();
        $("a.gallery-class").removeClass("active");
        $(this).addClass("active");

        var t = parseInt($(this).attr("rel"), 10);
        var n = galleries[t].slides;
        var r = galleries[t].thumbs;
        var i = $("#slideshow-1").height();
        $("#slide-holder").css("height", i);
        $(".cycle-slideshow").cycle("stop");
        $(".gallery-header").html(galleries[t].galleryTitle);
        $(".cycle-slideshow").cycle("destroy");
        $(".cycle-slideshow").html(n.replace(/&lt;/g, "<").replace(/&gt;/g, ">"));
        $("#gallery-pager").html(r.replace(/&lt;/g, "<").replace(/&gt;/g, ">"));
        $("#gallery-pager").animate({
            left: 0
        }, 10);
        $("#slideshow-1").cycle();
        setTimeout(galleryThumbnailHeight(), 1000);
        return false

    });
    $(".cycle-slideshow").on("cycle-after", function(e, t, n, r) {
        var i = 54,
            s = -53,
            o = $("#gallery-pager").find("> div:first-child"),
            u = $("#gallery-pager").find("> div:last-child"),
            a = $("#gallery-pager").find("> div").length,
            f = $("#gallery-pager").position().left,
            l = $("#gallery-pager div.cycle-pager-active").position().left + f,
            c = o.position().left + f,
            h = u.position().left + i + f,
            p = $("#gallery-paging").innerWidth(),
            d = p / 2;
        if (l > d && h > p) {
            var v = l - d + i / 2;
            $("#gallery-pager").animate({
                left: "-=" + v
            }, 240)
        } else if (l < d && f < 0) {
            var m = d - l + i / 2;
            var g = f + m;
            if (g > 0) {
                m = -1 * f
            }
            $("#gallery-pager").animate({
                left: "+=" + m
            }, 240)
        }
    });

    $(".thumbnail-control").on("click", function() {
        var e = $(this).data("scrollModifier"),
            t = parseInt(e, 10);
        var n = 54,
            r = -53,
            i = $("#gallery-pager").find("> div:first-child"),
            s = $("#gallery-pager").find("> div:last-child"),
            o = $("#gallery-pager").position().left,
            u = i.position().left + o,
            a = s.position().left + n + o,
            f = $("#gallery-paging").innerWidth();
        if (t < 0) {
            if (a > f) {
                var l = a - f;
                var c = f / 2;
                if (l < c) {
                    $("#gallery-pager").animate({
                        left: "-=" + c
                    }, 240)
                } else {
                    $("#gallery-pager").animate({
                        left: "-=" + f
                    }, 240)
                }
            }
        } else {
            if (u < -10) {
                var h = o + f;
                if (h > 0) {
                    $("#gallery-pager").animate({
                        left: 0
                    }, 240)
                } else {
                    $("#gallery-pager").animate({
                        left: "+=" + f
                    }, 240)
                }
            }
        }
    })
}

function initlocationjs() {

    $('#places .panel-heading').click(function(e) {
        $('#places .panel-heading span').removeClass('fa-angle-up').addClass('fa-angle-down');
        if ($(this).hasClass('collapsed')) {
            $(this).find('span').removeClass('fa-angle-down').addClass('fa-angle-up');
        }
    });

    var addressTip;

    var mapElement = $('#mapContainer'),
        hotelLatLng = new google.maps.LatLng(mapElement.data('latitude'), mapElement.data('longitude')),
        hotelMapOptions = {
            zoom: mapElement.data('zoom'),
            center: hotelLatLng,
            mapTypeControl: true,
            scrollwheel: false,
            mapTypeControlOptions: {
                style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                position: google.maps.ControlPosition.TOP_CENTER
            },
            zoomControlOptions: {
                style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                position: google.maps.ControlPosition.TOP_CENTER
            },

        },

        hotelMap = new google.maps.Map(document.getElementById('mapContainer'), hotelMapOptions);
    hotelMarkerImage = new google.maps.MarkerImage(mapElement.data('icon'), new google.maps.Size(20, 20), new google.maps.Point(0, 0), new google.maps.Point(10, 0));
    hotelMarkerOptions = {
            map: hotelMap,
            position: hotelLatLng,
            icon: hotelMarkerImage
        },

        hotelMarker = new google.maps.Marker(hotelMarkerOptions),
        content = "<div style='overflow: hidden; width:300px; height:87px; '><b>" + mapElement.data('hotelName') + "</b><br>" + mapElement.data('hotelAddress') + "<br>" + mapElement.data('hotelPhone') + "</div>",
        hotelTip = new google.maps.InfoWindow({
            maxWidth: 400,
            position: hotelLatLng,
            content: content
        }),
        hotelDirectionService = new google.maps.DirectionsService(),
        hoteldirectionsDisplay = new google.maps.DirectionsRenderer();
    hoteldirectionsDisplay.setMap(hotelMap);
    hotelTip.open(hotelMap);
    var defMarkerImage = new google.maps.MarkerImage("https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|4484F6",
        new google.maps.Size(21, 34),
        new google.maps.Point(0, 0),
        new google.maps.Point(10, 34));
    var cacheTip;
    var markers = {};
    var allPlaces = $('.places-link').each(function(index, element) {
        var $element = $(element),
            position = new google.maps.LatLng($element.data('latitude'), $element.data('longitude')),
            markerOption = {
                map: hotelMap,
                position: position,
                icon: defMarkerImage
            },
            marker = new google.maps.Marker(markerOption),
            placeContent = "<div style='overflow: hidden; width:300px; '><b>" + $element.data('name') + "</b><br>" + $element.data('address') + "<br>",
            placeTip = new google.maps.InfoWindow({
                maxWidth: 400,
                position: position,
                content: content
            });
        var markerId = $element.data('latitude') + '--' + $element.data('longitude');
        markers[markerId] = marker;

        $('#directions').find('#toDirection').append('<option data-longitude=' + $element.data("longitude") + ' data-latitude=' + $element.data("latitude") + '>' + $element.data("name") + '</option>');
        if (index === 1) {
            $('#directions').find('#fromDirection').append('<option data-longitude=' + $element.data("longitude") + ' data-latitude=' + $element.data("latitude") + ' selected>' + $element.data("name") + '</option>');
        } else {
            $('#directions').find('#fromDirection').append('<option data-longitude=' + $element.data("longitude") + ' data-latitude=' + $element.data("latitude") + '>' + $element.data("name") + '</option>');
        }
        google.maps.event.addListener(marker, 'click', (function() {
            return function() {
                if (addressTip) {
                    addressTip.close();
                }
                if (cacheTip) {
                    cacheTip.close();
                }
                hotelTip.close();
                placeTip.setContent(placeContent);
                placeTip.open(hotelMap, marker);
                cacheTip = placeTip;
            };
        })(marker, placeContent, placeTip));
        //placeTip.open(hotelMap,marker);
    });

    $('.places-link').on('click', function(event) {
        $(".places-link").removeClass("active-location");
        $(this).addClass('active-location');
        event.preventDefault();
        hotelTip.close();
        if (addressTip) {
            addressTip.close();
        }
        if (cacheTip) {
            cacheTip.close();
        }



        var $element = $(this),
            position = new google.maps.LatLng($element.data('latitude'), $element.data('longitude')),
            placeContent = "<div style='overflow: hidden; width:300px; '><b>" + $element.data('name') + "</b><br>" + $element.data('address') + "<br>";
        addressTip = new google.maps.InfoWindow({
            maxWidth: 400,
            position: position,
            content: placeContent
        });
        var mId = $element.data('latitude') + '--' + $element.data('longitude');
        var m = markers[mId];
        addressTip.open(hotelMap, m);
        $(".location").attr("src", $element.attr('data-image-src'));
        $(".location").attr("alt", $element.attr('data-image-alt'));
        $(".text-header").html($element.data('name'));
        $(".text-content").html($element.data('description'));
        hotelMap.panTo(position);
        hotelMap.setZoom(15);
    });
    var modes = [];
    modes['G_TRAVEL_MODE_DRIVING'] = google.maps.TravelMode.DRIVING;
    modes['G_TRAVEL_MODE_BICYCLING'] = google.maps.TravelMode.BICYCLING;
    modes['G_TRAVEL_MODE_TRANSIT'] = google.maps.TravelMode.TRANSIT;
    modes['G_TRAVEL_MODE_WALKING'] = google.maps.TravelMode.WALKING;

    $('#getDirection').on('click', function(event) {
        event.preventDefault();
        var startLat = $('#toDirection').find('option:selected').data('latitude'),
            startLng = $('#toDirection').find('option:selected').data('longitude'),
            endLat = $('#fromDirection').find('option:selected').data('latitude'),
            endLng = $('#fromDirection').find('option:selected').data('longitude');
        var request = {
            origin: new google.maps.LatLng(startLat, startLng),
            destination: new google.maps.LatLng(endLat, endLng),
            travelMode: google.maps.TravelMode.DRIVING
        };
        hotelDirectionService.route(request, function(response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                hotelTip.close();
                if (addressTip) {
                    addressTip.close();
                }
                hoteldirectionsDisplay.setDirections(response);
                hoteldirectionsDisplay.setPanel(document.getElementById("directionsPanel"));
            } else {
                alert(status);
            }
        });
    });

}

/** Start Added for Booking Form closing **/
function closeBooking() {

    if (focusform == false && onform == false && accordionopen == true) {
        // console.log('close booking function clicked');
        $("#collapseOne").collapse('hide');
        togglecaret();
        $("#accordion .panel-heading").addClass("collapsed");
        accordionopen = false;
        $("#bookingForm .tohide").css('display', 'none');
        // $("#overlay").removeClass('open-overlay').hide();
        $("#bookingForm").removeClass('open');
        $(".abs_parent").css('z-index', '1');
        $(".second-last-block").show();
    }

}

//below function required on all pages
function togglecaret() {
    $('#accordion .panel-title span').toggleClass("fa-rotate-180");
}

function createDropDown(dropdown, target) {
    $("#" + target).remove();
    var source = $(dropdown);
    var selected = source.find("option[selected]");
    if (selected == null || selected.length == 0) {
        source.prop("selectedIndex", 0);
        source.find('option:first').attr("selected", "selected");
        selected = source.find("option[selected]");
    }
    //var options = $("option", source);
    var opts = $(dropdown + " optgroup");
    var ts = $.trim(selected.text());
    if (ts.length > 15) ts = ts.substring(0, 15);
    $(dropdown).after('<dl id="' + target + '" class="dropdown"></dl>');
    $("#" + target).append('<dt><a href="#">' + ts + '</a></dt>');
    $("#" + target).append('<dd><ul></ul></dd>');

    var co = false;
    opts.each(function() {
        co = true;
        $("#" + target + " dd ul").append('<li class="group-header">' +
            $(this).attr('label') + '</li>');
        var options;
        options = $("option", this);
        options.each(function() {
            $("#" + target + " dd ul").append('<li><a href="#">' +
                $(this).text() + '<span class="value">' +
                $(this).val() + '</span></a></li>');
        });
    });

    if (co == false) {
        var options = $("option", source);
        options.each(function() {
            $("#" + target + " dd ul").append('<li><a href="#">' +
                $(this).text() + '<span class="value">' +
                $(this).val() + '</span></a></li>');
        });
    }

    $(dropdown).hide();

    $("#" + target + " dt a").click(function(e) {
        e.preventDefault();

        if (target == 'target2') {
            $("#target1 dd ul").hide();
            $("#target3 dd ul").hide();
            $("#target4 dd ul").hide();
        }
        if (target == 'target1') {
            $("#target2 dd ul").hide();
            $("#target3 dd ul").hide();
            $("#target4 dd ul").hide();
        }
        if (target == 'target3') {
            $("#target1 dd ul").hide();
            $("#target2 dd ul").hide();
            $("#target4 dd ul").hide();
        }
        if (target == 'target4') {
            $("#target2 dd ul").hide();
            $("#target3 dd ul").hide();
            $("#target1 dd ul").hide();
        }

        $("#" + target + " dd ul").toggle();

        return false;
    });

    $(document).bind('click', function(e) {
        var $clicked = $(e.target);
        if (!$clicked.parents().hasClass("dropdown"))
            $("#" + target + " dd ul").hide();
    });

    $("#" + target + " dd ul li a").click(function(e) {
        e.preventDefault();
        var text = $(this).html();
        text = removeElements(text, 'span');
        $("#" + target + " dt a").html(text);
        $("#" + target + " dd ul").hide();

        var source = $(dropdown);
        source.val($(this).find("span.value").html());

        if (dropdown == '#Loc') {
            updateHotel();
        }
        return false;
    });
}

var removeElements = function(text, selector) {
    var wrapped = $("<div>" + text + "</div>");
    wrapped.find(selector).remove();
    var ret = $.trim(wrapped.html());
    return ret.substring(0, 15);
}

// google recaptcha on load widget defination
var newsLetterRecaptcha;
var contactFormFubscribeRecaptcha;
var temp_name = 'contactFormFubscribeRecaptcha-';
var recaptcha_count = $('[id^="contactFormFubscribeRecaptcha-"]').length;

var recaptchaCallBack = function() {
    //Render the recaptcha1 on the element with ID "recaptcha1"
    if ($('#newsLetterRecaptcha').length) {
        newsLetterRecaptcha = grecaptcha.render('newsLetterRecaptcha', {
            'sitekey': '6LcJkyEUAAAAAC_4fZ_gGuKupoeQNUei2DK_WfAE', //Replace this with your Site key
            'theme': 'light',
            'callback': formsubscribe
        });
    }

    //Render the recaptcha2 on the element with ID "recaptcha2"
    for (i = 0; i < recaptcha_count; i++) {
        temp_form_id = $($('[id^="contactFormFubscribeRecaptcha-"]')[i]).closest('form').find('#form-id').val();
        var name = temp_name + temp_form_id
        contactFormFubscribeRecaptcha = grecaptcha.render(name, {
            'sitekey': '6LcJkyEUAAAAAC_4fZ_gGuKupoeQNUei2DK_WfAE', //Replace this with your Site key
            'theme': 'light',
            'callback': contactformsubscribe
        });
    }
}


function check_filed() {
    var flag = true;
    var phflag = true;
    var all_fields = [];
    var form_data = subscribeFormElement.parent();

    all_fields = all_fields.concat(form_data.find('input'));
    all_fields = all_fields.concat(form_data.find('textarea'));
    all_fields = all_fields.concat(form_data.find('radio'));
    all_fields = all_fields.concat(form_data.find('checkbox'));
    all_fields = all_fields.concat(form_data.find('radio'));
    all_fields = all_fields.concat(form_data.find('select'));
    // special check for email
    var email = form_data.closest('form').find('.contact_email');
    // special check for phone number
    var phNumber = form_data.closest('form').find('.contact_phNumber');
    for (var i = 0; i < all_fields.length; i++) {
        for (var j = 0; j < all_fields[i].length; j++) {
            if (all_fields[i][j] && all_fields[i][j].required) {
                if (all_fields[i][j].value) {
                    flag = true;
                } else {
                    return false;
                }
            }
        }
    }
    if (email.length) {
        flag = false;
        if (email.val() === '' && !email.prop('required')) {
            flag = true;
        } else {
            (email.val() != '' && email.val().match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i) ? flag = true : flag = "invalid email");
        }
    }
    if (phNumber.length) {
        phflag = false;
        if (phNumber.val() === '' && !phNumber.prop('required')) {
            phflag = true;
        } else {
            (phNumber.val() != '' && phNumber.val().match(/^\s*\+?\s*([(]{0,1}[0-9][)]{0,1}[\s-\.\+]*){10,15}$/) ? phflag = true : phflag = "invalid phone number");
        }
    }
    return {
        'flag': flag,
        'phflag': phflag
    };
}
var subscribeFormElement = '';

$('.formSubmitButton').on('click', function(e) {
    e.preventDefault();
    subscribeFormElement = $(this).closest('form').find('#form-id');
    var id = subscribeFormElement.val();
    var checkAllFiled = check_filed();
    if (checkAllFiled.flag === "invalid email") {
        $('#message-' + id).removeClass('text-success').addClass('text-danger').html("Please enter valid email address");
        $('#message-' + id).fadeIn('fast').delay(4000).fadeOut(700);
    } else if (checkAllFiled.phflag === "invalid phone number") {
        $('#message-' + id).removeClass('text-success').addClass('text-danger').html("Please enter valid phone number");
        $('#message-' + id).fadeIn('fast').delay(4000).fadeOut(700);
    } else if (checkAllFiled.flag && checkAllFiled.phflag) {
        $('#contact_google_recaptcha_modal-' + id).modal('show');
    } else {
        $('#message-' + id).removeClass('text-success').addClass('text-danger').html("Please enter all required fields");
        $('#message-' + id).fadeIn('fast').delay(4000).fadeOut(700);
    }
});

function contactformsubscribe(res) {
    var id = subscribeFormElement.val();
    var submitbtn = $('#btn-' + id);
    var submitform = false;
    var msg = $('#msg-' + id).val();
    var errmsg = $('#errmsg-' + id).val();
    if (submitform == false) {
        $('#message-' + id).fadeOut(100);
        submitform = true;
        var formId = $('#form-' + id);
        var postData = new FormData(formId[0]);
        postData.g_recaptcha_response = res;
        var formURL = $('.subscribe_api').val();
        $.ajax({
            url: formURL,
            type: "POST",
            data: postData,
            contentType: false,
            processData: false,
            // async: false,
            success: function(response) {
                $('#message-' + id).removeClass('text-danger').addClass('text-success').html(msg);
                $('#message-' + id).fadeIn('fast').delay(4000).fadeOut(700);
                $("#form-" + id)[0].reset();
            },
            error: function() {
                $('#message-' + id).removeClass('text-success').addClass('text-danger').html(errmsg);
                $('#message-' + id).fadeIn('fast');
            }
        });
        submitform = false;
        $("#form-" + id).fadeTo(200, 1);
        $(submitbtn).prop('disabled', false);
    }
    $('#contact_google_recaptcha_modal-' + id).modal('hide');
}


$('#subscribeNewsLetter').on('click', function(e) {
    e.preventDefault();
    $('#news_letter_google_recaptcha_modal').modal('show');
});

function formsubscribe(e) {

    var formURL = $('.news_letter_api').val();

    // var subscribebtn = $('#subscribeNewsLetter');
    var postData = {};
    var id = $('.form_id').val();

    postData.user_email = $('.user_email').val();
    postData.new_letter_widget = $('.new_letter_widget').val();
    postData.news_description = $('.news_description').val();
    postData.g_recaptcha_response = grecaptcha.getResponse(newsLetterRecaptcha);
    $.ajax({
        url: formURL,
        type: "POST",
        data: postData,
        // async: false,
        success: function(response) {
            $('#subscribeMessage-' + id).removeClass('text-danger').addClass('text-success').html('Thank you. You have been subscribed.');
            $('#subscribeForm-' + id)[0].reset();
            $('.subs_input').val("");
            $('#subscribeNewsLetter').attr('disabled', 'disabled');
            $('#news_letter_google_recaptcha_modal').modal('hide');
            $('.input-holder').remove();
            $('.button-holder').remove();

        },
        error: function() {
            $('#subscribeMessage-' + id).removeClass('text-success').addClass('text-danger').html('Sorry something went wrong, you might want to try again.');
            $('#subscribeMessage-' + id).fadeIn('fast');
            $('#news_letter_google_recaptcha_modal').modal('hide');
        }
    });
}

$('.subs_input').bind('keyup', function(event) {
    if (event.type === 'keyup') {
        //cache jquery objects
        var $invalidEmailError = $('#invalidEmailError'),
            $submitButton = $('#subscribeNewsLetter'),
            $this = $(this);

        var v = $this.val();

        //trim spaces
        v = v.replace(/^\s+|\s+$/g, "");

        //check email against regex
        if (v.match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i)) {
            $invalidEmailError.hide();
            $submitButton.removeAttr('disabled').removeClass('disabled');
        } else {
            $invalidEmailError.show();
            $submitButton.attr('disabled', 'disabled').addClass('disabled');
        }
        //replace email with trimmed version
        $this.val(v);
    }
});


function for_summary_detail_page_slider() {
    if ($("#summary_detail_page_slider").children().length == 1) {
        $('#summary_detail_page_slider').camera({
            loader: 'none',
            thumbnails: false,
            hover: false,
            opacityOnGrid: false,
            fx: 'none',
            autoAdvance: false,
            pagination: false,
            overlayer: false,
            playPause: false,
            navigation: false
        });
    } else if ($("#summary_detail_page_slider").children().length > 1) {
        $('#summary_detail_page_slider').camera({
            loader: 'none',
            thumbnails: false,
            hover: false,
            opacityOnGrid: false,
            fx: 'simpleFade',
            pauseOnClick: false,
            pagination: true,
            overlayer: false,
            playPause: false,
            overlayer: false,
            navigation: true,
            imagePath: '../css/images/'
        });
    }
}

function for_a_universal_slider() {
    if ($(".a_universal_slider").children().length == 1) {
        $('.a_universal_slider').each(function() {
            $(this).camera({
                autoAdvance: false,
                loader: 'none',
                thumbnails: false,
                hover: false,
                opacityOnGrid: false,
                fx: 'none',
                pagination: false,
                overlayer: false,
                playPause: false,
                navigation: false
            });
        });
    } else if ($(".a_universal_slider").children().length > 1) {
        $('.a_universal_slider').each(function() {
            $(this).camera({
                loader: 'none',
                thumbnails: false,
                hover: false,
                opacityOnGrid: false,
                fx: 'simpleFade',
                pauseOnClick: false,
                pagination: true,
                overlayer: false,
                playPause: false,
                imagePath: '../css/images/'
            });
        });
    }

}


function for_summary_slider() {

    $('.summary_slider').each(function() {

        if ($(this).children().length == 1) {
            $(this).camera({
                autoAdvance: false,
                loader: 'none',
                thumbnails: false,
                hover: false,
                opacityOnGrid: false,
                fx: 'none',
                pagination: false,
                overlayer: false,
                playPause: false,
                navigation: false
            });

        } else if ($(this).children().length > 1) {

            $(this).camera({
                loader: 'none',
                thumbnails: false,
                hover: false,
                opacityOnGrid: false,
                fx: 'simpleFade',
                pauseOnClick: false,
                pagination: false,
                overlayer: false,
                playPause: false,
                imagePath: '../css/images/'
            });

        }
    });
}

function homepageSliderInitialization() {
    if ($('#homepage-carousel').length) {
        if ($("#homepage-carousel").children().length == 1) {
            $('#homepage-carousel').camera({
                height: '56.25%',
                loader: 'none',
                thumbnails: false,
                hover: false,
                opacityOnGrid: false,
                fx: 'none',
                autoAdvance: false,
                pagination: false,
                navigation: false,
                overlayer: false,
                playPause: false
            });
        } else if ($("#homepage-carousel").children().length > 1) {
            $('#homepage-carousel').camera({
                height: '56.25%',
                loader: 'none',
                thumbnails: false,
                hover: false,
                opacityOnGrid: false,
                fx: 'simpleFade',
                pauseOnClick: false,
                time: 5000,
                transPeriod: 1500,
                pagination: true,
                navigation: false,
                playPause: false,
                overlayer: false,
                imagePath: '../css/images/'
            });
        }
    }
}

function jssorTransitionOptions(carouselWidgetId) {
    var sliderTransition = $(carouselWidgetId).attr("data-jssortransition");
    var sliderInterval = $(carouselWidgetId).attr("data-slideInterval");
    var aspectRatio = $(carouselWidgetId).find('.item img').first().attr('data-aspectratio');
    var aspectRatioWidth = "";
    var aspectRatioHeight = "";
    if (aspectRatio == "") {
        aspectRatioWidth = "16";
        aspectRatioHeight = "9";
    } else {
        aspectRatio = aspectRatio.split('-');
        aspectRatioWidth = aspectRatio[0];
        aspectRatioHeight = aspectRatio[1];
    }
    var $ScaleWidth = '1600px';
    var $ScaleHeight = '900px';

    function setSliderSize() {
        $ScaleWidth = $(carouselWidgetId).parent().width();
        var aspectRatioValue = parseInt(aspectRatioHeight) / parseInt(aspectRatioWidth);
        $ScaleHeight = $ScaleWidth * aspectRatioValue;
        $(carouselWidgetId).css({
            'width': $ScaleWidth,
            'height': $ScaleHeight
        });
        $(carouselWidgetId).find('.sliders-jssor').css({
            'width': $ScaleWidth,
            'height': $ScaleHeight
        });
    }

    setSliderSize();
    var jssorOptions = {
        $AutoPlay: 1,
        $PauseOnHover: 0,
        $SlideshowOptions: {
            $Class: $JssorSlideshowRunner$,
            $Transitions: slideshowTransitions[sliderTransition],
            $TransitionsOrder: 1
        },
        $Idle: parseInt(sliderInterval),
        $SlideEasing: $Jease$.$InOutSine,
        $LazyLoading: 1,
        $DragOrientation: 0,
        $ArrowNavigatorOptions: {
            $Class: $JssorArrowNavigator$
        },
        $BulletNavigatorOptions: {
            $Class: $JssorBulletNavigator$
        },
        $ScaleWidth: $ScaleWidth,
        $ScaleHeight: $ScaleHeight
    };

    var jssorSliderInstance = new $JssorSlider$(carouselWidgetId.substring(1, carouselWidgetId.length), jssorOptions);

    function ScaleSlider() {
        if (carouselWidgetId === "#homeCarousel") {
            jssorSliderInstance.$Elmt.style.margin = "";
            var MAX_WIDTH = 10000;
            var MAX_HEIGHT = 10000;
            var MAX_BLEEDING = 1;
            var containerElement = jssorSliderInstance.$Elmt.parentNode;
            var containerWidth = containerElement.clientWidth;
        } else {
            var parentWidth = $(carouselWidgetId).parent().width();
        }

        if (containerWidth) {
            var originalWidth = jssorSliderInstance.$OriginalWidth();
            var originalHeight = jssorSliderInstance.$OriginalHeight();

            var containerHeight = originalHeight || window.innerHeight;

            var expectedWidth = Math.min(MAX_WIDTH || containerWidth, containerWidth);
            var expectedHeight = Math.min(MAX_HEIGHT || containerHeight, containerHeight);

            jssorSliderInstance.$ScaleSize(expectedWidth, expectedHeight, MAX_BLEEDING);

            //position slider at center in vertical orientation
            jssorSliderInstance.$Elmt.style.top = ((containerHeight - expectedHeight) / 2) + "px";

            //position slider at center in horizontal orientation
            jssorSliderInstance.$Elmt.style.left = ((containerWidth - expectedWidth) / 2) + "px";

        } else if (parentWidth) {
            jssorSliderInstance.$ScaleWidth(parentWidth);
        } else {
            window.setTimeout(ScaleSlider, 30);
        }
    }

    // enabling programatic autoplay
    function EnableAutoplay(callback, time) {
        var newTime = time;
        var interval = setInterval(callback, newTime);
        this.start = function() {
            if (!interval) {
                this.stop();
                interval = setInterval(callback, time);
            }
            return this;
        }

        this.stop = function() {
            if (interval) {
                clearInterval(interval);
                interval = null;
            }
            return this;
        }

        this.restart = function(t) {
            newTime = t ? t : newTime;
            return this.stop().start();
        }
    }

    var defaultAutplayTime = 5; // In seconds
    var autoplayIns = new EnableAutoplay(function() {
        jssorSliderInstance.$Next();
    }, defaultAutplayTime * 1000);

    jssorSliderInstance.$On($JssorSlider$.$EVT_STATE_CHANGE, function() {
        autoplayIns.restart();
    });

    var captions = $(carouselWidgetId).find('.carousel-caption-wrapper .jssor-caption');
    var sliders = $(carouselWidgetId).find('.item');
    var currIndex = 0;
    var bulletIcons = $(carouselWidgetId).find(".bullet-icon");

    function toggleSliderActiveClass() {
        // currIndex represents the actual slide that is in animation
        $(sliders[currIndex]).removeClass('myActive').addClass('myInactive');

        for (var index = 0; index < sliders.length; index++) {
            if (index !== currIndex) { // when i and currIndex differ(slider inherent bug)
                $(sliders[index]).removeClass('myInactive');
            }
        }
    }
    // adding animationend event and click on carousel-indicators event for all sliders to remove jerkiness in images after animation finishes.
    if (carouselWidgetId === "#homeCarousel") {
        for (var i = 0; i < sliders.length; i++) {
            (function(i) {
                $(bulletIcons[i]).on("click", function(e) {
                    toggleSliderActiveClass();
                });
                $(sliders[i]).on("animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd", function(evt) {
                    toggleSliderActiveClass();
                });
            })(i);
        }
    }
    jssorSliderInstance.$On($JssorSlider$.$EVT_STATE_CHANGE, function(slideIndex, progress, progressBegin, idleBegin, idleEnd, progressEnd) {
        $(captions).fadeOut();
        if (progress === idleBegin) { //current slide become idle
            if ($(sliders[slideIndex]).length) {
                if (carouselWidgetId === "#homeCarousel") {
                    $(sliders[slideIndex]).addClass('myActive');
                }
                $(captions[slideIndex]).fadeIn();
                currIndex = slideIndex;
            }
        }
    });

    //Scale slider after document ready
    ScaleSlider();

    //Scale slider while window load/resize/orientationchange.
    $(window).bind("load", ScaleSlider);
    $(window).bind("resize", ScaleSlider);
    $(window).bind("orientationchange", ScaleSlider);
    //responsive code end
}


function bookingFormOverlay() {
    $(document).on('focus', '.bookingform-wrapper .booking-form-vc-desktop .select-block select', function() {
        // console.log($('#booking-engine-groups option').filter(':selected').val());
        $(".bookingform-wrapper .booking-form-vc-desktop .tohide").css('display', 'block');
        $(".bookingform-wrapper .booking-form-vc-desktop .vc_tohide").css('display', 'block');
        $(".bookingform-wrapper .abs_parent").css('z-index', '201');
        $("#ui-datepicker-div").css('z-index', '203');
        $(".bookingform-wrapper .booking-form-vc-desktop").addClass('open');
        $(".bookingform-wrapper .second-last-block").hide();
        $(".bookingform-wrapper .select-block select").focusout();
        $(".bookingform-wrapper .open-form-block").find(".fa-plus-circle").removeClass("fa-plus-circle").addClass("fa-minus-circle");
        $(".link-text").text('Less Options');
    });

    var x = 0;
    $(document).on('click', '.bookingform-wrapper .open-form-block', function(event) {
        event.preventDefault();
        if (x == 1) {
            $(".bookingform-wrapper .booking-form-vc-desktop .tohide").css('display', 'none');
            $(".bookingform-wrapper .booking-form-vc-desktop .vc_tohide").css('display', 'none');
            // $(".last-block.tohide").css('display', 'none');
            $("#overlay").removeClass('open-overlay').hide();
            $(".bookingform-wrapper .booking-form-vc-desktop").removeClass('open');
            $(".bookingform-wrapper .abs_parent").css('z-index', '1');
            $(".bookingform-wrapper .second-last-block").show();
            $(".link-text").text('More Options');
            $(".bookingform-wrapper .open-form-block").find(".fa-minus-circle").removeClass("fa-minus-circle").addClass("fa-plus-circle");
            x = 0;
        } else {
            $(".bookingform-wrapper .booking-form-vc-desktop .tohide").css('display', 'block');
            $(".bookingform-wrapper .booking-form-vc-desktop .vc_tohide").css('display', 'block');
            $(".bookingform-wrapper .abs_parent").css('z-index', '201');
            $("#ui-datepicker-div").css('z-index', '203');
            $(".bookingform-wrapper .booking-form-vc-desktop").addClass('open');
            $(".bookingform-wrapper .second-last-block").hide();
            $(".link-text").text('Less Options');
            $(".bookingform-wrapper .open-form-block").find(".fa-plus-circle").removeClass("fa-plus-circle").addClass("fa-minus-circle");
            x = 1;
        }
    });

    $(document).on('click', '#overlay', function() {


        $(".bookingform-wrapper .booking-form-vc-desktop .tohide").css('display', 'none');
        $(".bookingform-wrapper .booking-form-vc-desktop .vc_tohide").css('display', 'none');
        $(".bookingform-wrapper .last-block.tohide").css('display', 'none');
        $("#overlay").removeClass('open-overlay').hide();
        $(".bookingform-wrapper .booking-form-vc-desktop").removeClass('open');
        $(".bookingform-wrapper .abs_parent").css('z-index', '1');
        $(".bookingform-wrapper .second-last-block").show();
        if ($(".bookingform-wrapper .open-form-block").find("i").hasClass("fa-minus-circle")) {
            $(".bookingform-wrapper .open-form-block").find(".fa-minus-circle").removeClass("fa-minus-circle").addClass("fa-plus-circle");
            $(".link-text").text('More Options');
        }
    });
}

function caption_alignment() {
    var calculated_bottom = $(".homepage-carousel-address-bar").height() + 50;
    $(".camera_caption").css("bottom", calculated_bottom);
}

function innerpageBookingFormOverlay() {
    $(document).on('click', '#overlay', function() {
        $("#overlay").toggleClass('open-overlay');
    });
}

function checkHomepageBookingFormNoOfChildElements() {
    if ($("#booking-form").children(".form-group").length > 2) {
        $(".close-form-block").show();
        $(".open-form-block").show();
    } else {
        $(".close-form-block").hide();
        $(".open-form-block").hide();
    }
}


function initLightBox() {
    $.fn.ekkoLightbox.defaults.loadingMessage = "<div class='text-center'><i class='fa fa-spinner fa-spin'></i></div>";
    $(document).delegate('*[data-toggle="lightbox"]', 'click', function(event) {
        event.preventDefault();
        $(this).ekkoLightbox({
            'left_arrow_class': '.gallery-prev-icon',
            'right_arrow_class': '.gallery-next-icon'
        });
    });
}

function responsive_menu(navBarId) {
    $(navBarId).css('overflow', 'hidden');
    $('#top-menu').css({
        'width': '100%',
        'padding-right': '0px'
    });
    $('#bottom-menu').css('width', '100%');
    var langBookWrapWidth = $('.lang-book-wrapper').width();
    $('#top-navbar-collapse').css('padding-right', langBookWrapWidth);
    $('header #top-menu, header #bottom-menu').addClass('removeHidden');
    var navWidth = $(navBarId).width();
    // console.log("total width: " + navWidth);
    var moreWidth = $(navBarId + ' .moreOptions').outerWidth();
    // console.log("more width: " + moreWidth);
    var availableWidth = navWidth - moreWidth;
    // console.log("available width: " + availableWidth);
    $(navBarId + ' li.primary').each(function() {
        if ($(this).hasClass('moved')) {
            $(this).insertBefore(navBarId + " .moreOptions");
            $(this).removeClass('moved');
            $(navBarId + ' .moreOptions').removeClass('show');
        }
    });
    $(navBarId + ' li.primary').each(function() {
        var width = $(this).outerWidth() + 1;
        // console.log("li width: " + width);
        availableWidth = availableWidth - width;
        // console.log("width after li : " + availableWidth);
        if (availableWidth < 0) {
            $(this).addClass("moved");
            $(navBarId + ' .dropdown-more').append($(this));
            $(navBarId + ' .moreOptions').addClass('show');
            $('.moreOptions.show').css('animation', 'zoomIn 1s 1');
        } else {
            if ($(this).hasClass('moved')) {
                $(this).insertBefore(navBarId + " .moreOptions");
                $(this).removeClass('moved');
                $(navBarId + ' .moreOptions').removeClass('show');
            }
        }
    });
    if ($(navBarId + ' ul.dropdown-more').has('li.secondary').length) {
        $(navBarId + ' .moreOptions').addClass('show');
        $(navBarId + ' ul.dropdown-more').append($(navBarId + ' li.secondary'));
    }
    $(navBarId).css('overflow', 'visible');
}


function onScrollSocialicons() {
    $(".wtsocialicons").hide();
    $(window).scroll(function() {
        if ($(window).scrollTop() > 600) {
            $(".wtsocialicons").show('slow');
        } else {
            $(".wtsocialicons").hide('slow');
        }

    });
}

function goToTop() {
    // hide #back-top first
    $("#back-top").hide();

    // fade in #back-top
    $(function() {
        $(window).scroll(function() {
            if ($(this).scrollTop() > 150) {
                $('#back-top').fadeIn();
            } else {
                $('#back-top').fadeOut();
            }
        });

        // scroll body to 0px on click
        $('#back-top a').click(function() {
            $('body,html').animate({
                scrollTop: 0
            }, 800);
            return false;
        });
    });
}

function onScrollHidePromo() {
    $(window).scroll(function() {
        if ($(this).scrollTop() > 0) {
            if ($('.promo-details-wrap').hasClass('hide-promotions') === false) {
                $('.promo-details-wrap').addClass('hide-promotions');
                $('.promo-close .fa').removeClass('fa-times');
                $('.promo-close .fa').addClass('fa-chevron-down');
            }
        }
    });
}


function enablingHotelDirectoryCSS() {
    var a = $("#top-navbar-collapse ul.mega-menu > li:last-child .dropdown-header h4");
    var b = $("#top-navbar-collapse ul.mega-menu > li:last-child");
    if (a.text() === '') {
        b.addClass('directory');
    }
}

function showLocationDetails() {
    $('#close-details').click(function() {
        $('#details').toggleClass('show-loc-details');
        $('#close-details span i').toggleClass('fa-rotate-180');
    });
}

/* Modal booking form toggle */
$('.resv_button').on('click', function() {
    $('#resv-form .booking-form-wrapper').append($('#bookingForm'));
});

$('#resv-form').on('hidden.bs.modal', function() {
    $('.bookingform-wrapper').find('.abs_parent').append($('#bookingForm'));
});

// Readjust the height of the widgets
$(window).load(function() {
    $('.widget-wrapper').each(function() {
        var minContainerHeight = 50;
        var self = this;
        var imageLoaded = function() {
            var imgContainerHeight = 50;

            $(self).find(".readjust-container").each(function() {
                if ($(this).height() > imgContainerHeight) {
                    imgContainerHeight = $(this).height();
                }
            });

            if (imgContainerHeight > minContainerHeight) {
                minContainerHeight = imgContainerHeight;
            }

            $(self).find(".readjust-height, .readjust-container").height(minContainerHeight);
        };

        $(this).find('.readjust-container img').each(function() {
            var tmpImg = new Image();
            tmpImg.onload = imageLoaded;
            tmpImg.src = $(this).attr('src');
        });
    });
});

function galleryThumbnailHeight() {
    var thumbheight = $('#gallery-pager .thumb-img').first().width() * (9 / 16);
    $('#gallery-pager .thumb-img').css('height', thumbheight);

}

function homeCarouselImgHeight() {
    if (typeof heroAspectRatioEnable === 'undefined') {
        heroAspectRatioEnable = false;
    }
    if (heroAspectRatioEnable) {
        if ($('#homeCarousel .carousel-inner').length) {
            // for bootstrap carousel
            var imgheight = $('#homeCarousel .carousel-inner .item.active img').first().height();
            $('#homeCarousel .carousel-inner .item img').css('height', imgheight);
            $('#homeCarousel').css('padding-top', $('header').height());
        }
    } else {
        if ($('#homeCarousel .carousel-inner').length) {
            var imgheight = $('#homeCarousel .carousel-inner .item.active img').first().width() * (9 / 16);
            $('#homeCarousel .carousel-inner .item img').css('height', imgheight);
        }
    }
}

function review_init() {
    $.fn.stars = function() {
        return $(this).each(function() {

            var rating = $(this).data("rating");

            var numStars = $(this).data("numStars");

            var fullStar = new Array(Math.floor(Math.round(rating) + 1)).join('<i class="fa fa-star"></i>');

            var halfStar = ((rating % 1) !== 0) ? '<i class="fa fa-star-half-empty"></i>' : '';

            var noStar = new Array(Math.floor(numStars + 1 - rating)).join('<i class="fa fa-star-o"></i>');

            var result_star = $(this).html(fullStar + halfStar + noStar);

            // console.log("numStars:" + numStars);
            // console.log("rating" + rating);
            // console.log("rating count " + rating + 1);
            // console.log("fullStar " + fullStar);
            // console.log("halfStar" + halfStar);
            // console.log("noStar" + noStar);
            // console.log(result_star)

        });
    }

    $('.stars').stars();
    $('#review_data_carousel').slick({
        infinite: true,
        autoplay: true,
        autoplaySpeed: 3000,
        arrows: true,
        slidesToShow: 3,
        slidesToScroll: 3,
        responsive: [{
                breakpoint: 1024,
                settings: {
                    slidesToShow: 3,
                    slidesToScroll: 3
                }
            },
            {
                breakpoint: 600,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 2
                }
            },
            {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1
                }
            }
            // You can unslick at a given breakpoint now by adding:
            // settings: "unslick"
            // instead of a settings object
        ]
    });
}

function ourHotelMenuHeight() {
    var vh = $(window).height() * .65;
    var ulHeight = $('.mega-menu').height() + 40;

    if (vh > ulHeight) {
        $('.our-hotel-menu').height(ulHeight);
    } else {
        $('.our-hotel-menu').height(vh);
    }
}

function roundImageCheck() {
    $(".page_link img").each(function() {
        var imgUrl = $(this).attr('src');
        // check if image is circular
        if (imgUrl.indexOf("r_max") > -1) {
            $(this).parent('.page_link').addClass('rounded_image');
        }
    });
}

function initMasonryGallery() {
    $('.mg-image-wrap').magnificPopup({

        type: 'image',
        tLoading: 'Loading image ...',
        mainClass: 'mfp-img-mobile mfp-with-zoom',
        closeOnContentClick: false,
        closeBtnInside: false,
        gallery: {
            enabled: true,
            arrowMarkup: '<button title="%title%" type="button" class="fa-mfp-arrow fa-mfp-arrow-%dir% fa fa-angle-%dir%"></button>',
            preload: [0, 1] // Will preload 0 - before current, and 1 after the current image
        },
        image: {
            verticalFit: true,
            tError: '<a href="%url%">The image #%curr%</a> could not be loaded.'
            // titleSrc: function(item) {
            //     return item.el.attr('data-title') + '<p class="image-description"></p>';
            // }
        },
        zoom: {
            enabled: true, // By default it's false, so don't forget to enable it

            duration: 300, // duration of the effect, in milliseconds
            easing: 'ease-in-out', // CSS transition easing function

            // The "opener" function should return the element from which popup will be zoomed in
            // and to which popup will be scaled down
            // By defailt it looks for an image tag:
            opener: function(openerElement) {
                // openerElement is the element on which popup was initialized, in this case its <a> tag
                // you don't need to add "opener" option if this code matches your needs, it's defailt one.
                return openerElement.is('img') ? openerElement : openerElement.find('img');
            }
        },
        callbacks: {
            open: function() {
                if ($('header').css('position') === 'fixed') {
                    $('header').css('margin-right', '15px');
                }
            },
            close: function() {
                if ($('header').css('position') === 'fixed') {
                    $('header').css('margin-right', '');
                }
            }
        }

    });

    $('.wt-masonry-gallery').each(function() { // the containers for all your galleries
        $(this).magnificPopup({
            delegate: 'a', // the selector for gallery item
            type: 'image',
            gallery: {
                enabled: true
            }
        });
    });
}

function imageTextSliderInitialize(imageTextSlides) {
    imageTextSlides.slick({
        dots: true,
        arrows: true,
        autoplay: true,
        autoplaySpeed: 3000,
        slidesToShow: 3,
        slidesToScroll: 1,
        speed: 500,
        responsive: [{
                breakpoint: 1024,
                settings: {
                    slidesToShow: 3,
                    slidesToScroll: 1
                }
            },
            {
                breakpoint: 600,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 1
                }
            },
            {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1
                }
            }
        ]
    });
}

function initImageTextSlider() {
    if ($('.wt-image-text-slider').length > 0) {
        if ($('.wt-image-text-slider.fullWidthWidget').length > 0) {
            imageTextSliderInitialize($('.wt-image-text-slider .fullWidthWidgetWrapper'));
        }
        if ($('.wt-image-text-slider.nonFullWidthWidget').length > 0) {
            imageTextSliderInitialize($('.wt-image-text-slider.nonFullWidthWidget'));
        }
    }
}

function whyBookDirectPosition() {
    var yOffset = window.pageYOffset;
    var outerheight = $('.abs_parent .wrapperOfBenefits').outerHeight();
    var getWindowHeight = $(window).outerHeight() - (yOffset * 2) - $('.navbar-top').outerHeight() - 20;
    if (getWindowHeight < outerheight) {
        $(".abs_parent .wrapperOfBenefits").addClass("changePosOfBenefits");
    } else {
        $(".abs_parent .wrapperOfBenefits").removeClass("changePosOfBenefits");
    }
}
//Remove blank link from image widget
$("img[src$='/blank_umwkyu']").attr('src', '');
$(".readjust-height[style*='blank_umwkyu']").css("display", "none");

function menuDropdown() {
    var allNavEle = $('.navbar-nav > li.primary');
    windowWidth = $(window).width();
    for (i = (allNavEle.length); i > 0; i--) {
        var navEle = $(allNavEle)[i];
        var navEleDD = $(navEle).find('.dropdown-menu');
        if (navEleDD.length) {
            var navEleOffset = $(navEle).offset(),
                navEleDDwidth = $(navEleDD).width(),
                spaceAvailable = (windowWidth - navEleOffset.left);
            if (spaceAvailable < (navEleDDwidth)) {
                $(navEleDD).addClass('dropdown-menu-right');
            }
        }
    }
}